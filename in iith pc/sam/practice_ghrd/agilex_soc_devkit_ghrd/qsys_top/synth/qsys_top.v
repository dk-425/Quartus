// qsys_top.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top (
		output wire        wd_reset_reset_n,                          //                       wd_reset.reset_n
		input  wire [43:0] agilex_hps_f2h_stm_hw_events_stm_hwevents, //   agilex_hps_f2h_stm_hw_events.stm_hwevents
		input  wire        agilex_hps_h2f_cs_ntrst,                   //              agilex_hps_h2f_cs.ntrst
		input  wire        agilex_hps_h2f_cs_tck,                     //                               .tck
		input  wire        agilex_hps_h2f_cs_tdi,                     //                               .tdi
		output wire        agilex_hps_h2f_cs_tdo,                     //                               .tdo
		output wire        agilex_hps_h2f_cs_tdoen,                   //                               .tdoen
		input  wire        agilex_hps_h2f_cs_tms,                     //                               .tms
		output wire        emac1_mdc_clk,                             //                      emac1_mdc.clk
		output wire        hps_io_EMAC0_TX_CLK,                       //                         hps_io.EMAC0_TX_CLK
		output wire        hps_io_EMAC0_TXD0,                         //                               .EMAC0_TXD0
		output wire        hps_io_EMAC0_TXD1,                         //                               .EMAC0_TXD1
		output wire        hps_io_EMAC0_TXD2,                         //                               .EMAC0_TXD2
		output wire        hps_io_EMAC0_TXD3,                         //                               .EMAC0_TXD3
		input  wire        hps_io_EMAC0_RX_CTL,                       //                               .EMAC0_RX_CTL
		output wire        hps_io_EMAC0_TX_CTL,                       //                               .EMAC0_TX_CTL
		input  wire        hps_io_EMAC0_RX_CLK,                       //                               .EMAC0_RX_CLK
		input  wire        hps_io_EMAC0_RXD0,                         //                               .EMAC0_RXD0
		input  wire        hps_io_EMAC0_RXD1,                         //                               .EMAC0_RXD1
		input  wire        hps_io_EMAC0_RXD2,                         //                               .EMAC0_RXD2
		input  wire        hps_io_EMAC0_RXD3,                         //                               .EMAC0_RXD3
		inout  wire        hps_io_EMAC0_MDIO,                         //                               .EMAC0_MDIO
		output wire        hps_io_EMAC0_MDC,                          //                               .EMAC0_MDC
		inout  wire        hps_io_SDMMC_CMD,                          //                               .SDMMC_CMD
		inout  wire        hps_io_SDMMC_D0,                           //                               .SDMMC_D0
		inout  wire        hps_io_SDMMC_D1,                           //                               .SDMMC_D1
		inout  wire        hps_io_SDMMC_D2,                           //                               .SDMMC_D2
		inout  wire        hps_io_SDMMC_D3,                           //                               .SDMMC_D3
		output wire        hps_io_SDMMC_CCLK,                         //                               .SDMMC_CCLK
		inout  wire        hps_io_USB0_DATA0,                         //                               .USB0_DATA0
		inout  wire        hps_io_USB0_DATA1,                         //                               .USB0_DATA1
		inout  wire        hps_io_USB0_DATA2,                         //                               .USB0_DATA2
		inout  wire        hps_io_USB0_DATA3,                         //                               .USB0_DATA3
		inout  wire        hps_io_USB0_DATA4,                         //                               .USB0_DATA4
		inout  wire        hps_io_USB0_DATA5,                         //                               .USB0_DATA5
		inout  wire        hps_io_USB0_DATA6,                         //                               .USB0_DATA6
		inout  wire        hps_io_USB0_DATA7,                         //                               .USB0_DATA7
		input  wire        hps_io_USB0_CLK,                           //                               .USB0_CLK
		output wire        hps_io_USB0_STP,                           //                               .USB0_STP
		input  wire        hps_io_USB0_DIR,                           //                               .USB0_DIR
		input  wire        hps_io_USB0_NXT,                           //                               .USB0_NXT
		input  wire        hps_io_UART0_RX,                           //                               .UART0_RX
		output wire        hps_io_UART0_TX,                           //                               .UART0_TX
		inout  wire        hps_io_I2C1_SDA,                           //                               .I2C1_SDA
		inout  wire        hps_io_I2C1_SCL,                           //                               .I2C1_SCL
		inout  wire        hps_io_gpio1_io0,                          //                               .gpio1_io0
		inout  wire        hps_io_gpio1_io1,                          //                               .gpio1_io1
		inout  wire        hps_io_gpio1_io4,                          //                               .gpio1_io4
		inout  wire        hps_io_gpio1_io5,                          //                               .gpio1_io5
		input  wire        hps_io_jtag_tck,                           //                               .jtag_tck
		input  wire        hps_io_jtag_tms,                           //                               .jtag_tms
		output wire        hps_io_jtag_tdo,                           //                               .jtag_tdo
		input  wire        hps_io_jtag_tdi,                           //                               .jtag_tdi
		input  wire        hps_io_hps_osc_clk,                        //                               .hps_osc_clk
		inout  wire        hps_io_gpio1_io19,                         //                               .gpio1_io19
		inout  wire        hps_io_gpio1_io20,                         //                               .gpio1_io20
		inout  wire        hps_io_gpio1_io21,                         //                               .gpio1_io21
		output wire        h2f_reset_reset,                           //                      h2f_reset.reset
		input  wire [31:0] f2h_irq1_irq,                              //                       f2h_irq1.irq
		input  wire        clk_100_clk,                               //                        clk_100.clk
		input  wire        clk_125_clk,                               //                        clk_125.clk
		input  wire        emif_hps_pll_ref_clk_clk,                  //           emif_hps_pll_ref_clk.clk
		input  wire        emif_hps_oct_oct_rzqin,                    //                   emif_hps_oct.oct_rzqin
		output wire [0:0]  emif_hps_mem_mem_ck,                       //                   emif_hps_mem.mem_ck
		output wire [0:0]  emif_hps_mem_mem_ck_n,                     //                               .mem_ck_n
		output wire [16:0] emif_hps_mem_mem_a,                        //                               .mem_a
		output wire [0:0]  emif_hps_mem_mem_act_n,                    //                               .mem_act_n
		output wire [1:0]  emif_hps_mem_mem_ba,                       //                               .mem_ba
		output wire [0:0]  emif_hps_mem_mem_bg,                       //                               .mem_bg
		output wire [0:0]  emif_hps_mem_mem_cke,                      //                               .mem_cke
		output wire [0:0]  emif_hps_mem_mem_cs_n,                     //                               .mem_cs_n
		output wire [0:0]  emif_hps_mem_mem_odt,                      //                               .mem_odt
		output wire [0:0]  emif_hps_mem_mem_reset_n,                  //                               .mem_reset_n
		output wire [0:0]  emif_hps_mem_mem_par,                      //                               .mem_par
		input  wire [0:0]  emif_hps_mem_mem_alert_n,                  //                               .mem_alert_n
		inout  wire [8:0]  emif_hps_mem_mem_dqs,                      //                               .mem_dqs
		inout  wire [8:0]  emif_hps_mem_mem_dqs_n,                    //                               .mem_dqs_n
		inout  wire [71:0] emif_hps_mem_mem_dq,                       //                               .mem_dq
		inout  wire [8:0]  emif_hps_mem_mem_dbi_n,                    //                               .mem_dbi_n
		input  wire        reset_reset_n,                             //                          reset.reset_n
		output wire        ninit_done_ninit_done,                     //                     ninit_done.ninit_done
		input  wire [3:0]  button_pio_external_connection_export,     // button_pio_external_connection.export
		input  wire [3:0]  dipsw_pio_external_connection_export,      //  dipsw_pio_external_connection.export
		input  wire [2:0]  led_pio_external_connection_in_port,       //    led_pio_external_connection.in_port
		output wire [2:0]  led_pio_external_connection_out_port,      //                               .out_port
		input  wire        emac1_mdio_gmii_mdi_i,                     //                     emac1_mdio.gmii_mdi_i
		output wire        emac1_mdio_gmii_mdo_o,                     //                               .gmii_mdo_o
		output wire        emac1_mdio_gmii_mdo_o_e,                   //                               .gmii_mdo_o_e
		input  wire        emac1_ptp_ptp_aux_ts_trig_i,               //                      emac1_ptp.ptp_aux_ts_trig_i
		output wire        emac1_ptp_ptp_pps_o,                       //                               .ptp_pps_o
		output wire        emac1_ptp_ptp_tstmp_data,                  //                               .ptp_tstmp_data
		output wire        emac1_ptp_ptp_tstmp_en,                    //                               .ptp_tstmp_en
		output wire        emac1_sgmii_status_set_10,                 //             emac1_sgmii_status.set_10
		output wire        emac1_sgmii_status_set_1000,               //                               .set_1000
		output wire        emac1_sgmii_status_set_100,                //                               .set_100
		output wire        emac1_sgmii_status_hd_ena,                 //                               .hd_ena
		output wire        emac1_status_led_crs,                      //               emac1_status_led.crs
		output wire        emac1_status_led_link,                     //                               .link
		output wire        emac1_status_led_panel_link,               //                               .panel_link
		output wire        emac1_status_led_col,                      //                               .col
		output wire        emac1_status_led_an,                       //                               .an
		output wire        emac1_status_led_char_err,                 //                               .char_err
		output wire        emac1_status_led_disp_err,                 //                               .disp_err
		output wire        emac1_serdes_control_export,               //           emac1_serdes_control.export
		output wire        emac1_lvds_tx_pll_locked_export,           //       emac1_lvds_tx_pll_locked.export
		input  wire        emac1_serial_rxp_0,                        //                   emac1_serial.rxp_0
		input  wire        emac1_serial_rxn_0,                        //                               .rxn_0
		output wire        emac1_serial_txp_0,                        //                               .txp_0
		output wire        emac1_serial_txn_0,                        //                               .txn_0
		input  wire [12:0] emac1_sgmii_debug_status_pio_export        //   emac1_sgmii_debug_status_pio.export
	);

	wire           agilex_hps_emac1_gtx_clk_clk;                           // agilex_hps:emac1_phy_txclk_o -> [rst_controller_002:clk, subsys_sgmii_emac1:emac_gtx_clk_clk]
	wire           subsys_sgmii_emac1_emac_rx_clk_in_clk;                  // subsys_sgmii_emac1:emac_rx_clk_in_clk -> agilex_hps:emac1_clk_rx_i
	wire           subsys_sgmii_emac1_emac_tx_clk_in_clk;                  // subsys_sgmii_emac1:emac_tx_clk_in_clk -> agilex_hps:emac1_clk_tx_i
	wire           emif_calbus_0_emif_calbus_clk_clk;                      // emif_calbus_0:calbus_clk -> emif_hps:calbus_clk
	wire           clk_100_out_clk_clk;                                    // clk_100:out_clk -> [agilex_hps:emac_ptp_ref_clk, agilex_hps:f2h_axi_clk, agilex_hps:h2f_axi_clk, agilex_hps:h2f_lw_axi_clk, fpga_m2ocm_pb:clk, irq_mapper_001:clk, jtg_mst:clk_clk, mm_interconnect_0:clk_100_out_clk_clk, mm_interconnect_1:clk_100_out_clk_clk, mm_interconnect_2:clk_100_out_clk_clk, ocm:clk, periph:clk_clk, rst_controller:clk, rst_controller_001:clk, subsys_sgmii_emac1:csr_clk_clk]
	wire           clk_125_out_clk_clk;                                    // clk_125:out_clk -> subsys_sgmii_emac1:clk_125_clk
	wire     [7:0] agilex_hps_emac1_phy_txd_o;                             // agilex_hps:emac1_phy_txd_o -> subsys_sgmii_emac1:splitter_emac_phy_txd_o
	wire           subsys_sgmii_emac1_splitter_emac_phy_rxer_i;            // subsys_sgmii_emac1:splitter_emac_phy_rxer_i -> agilex_hps:emac1_phy_rxer_i
	wire           subsys_sgmii_emac1_splitter_emac_gmii_mdi_i;            // subsys_sgmii_emac1:splitter_emac_gmii_mdi_i -> agilex_hps:emac1_gmii_mdi_i
	wire           agilex_hps_emac1_gmii_mdo_o;                            // agilex_hps:emac1_gmii_mdo_o -> subsys_sgmii_emac1:splitter_emac_gmii_mdo_o
	wire           subsys_sgmii_emac1_splitter_emac_phy_col_i;             // subsys_sgmii_emac1:splitter_emac_phy_col_i -> agilex_hps:emac1_phy_col_i
	wire           subsys_sgmii_emac1_splitter_emac_phy_crs_i;             // subsys_sgmii_emac1:splitter_emac_phy_crs_i -> agilex_hps:emac1_phy_crs_i
	wire           agilex_hps_emac1_phy_txen_o;                            // agilex_hps:emac1_phy_txen_o -> subsys_sgmii_emac1:splitter_emac_phy_txen_o
	wire           agilex_hps_emac1_phy_txer_o;                            // agilex_hps:emac1_phy_txer_o -> subsys_sgmii_emac1:splitter_emac_phy_txer_o
	wire           agilex_hps_emac1_ptp_tstmp_en;                          // agilex_hps:s2f_emac1_ptp_tstmp_en -> subsys_sgmii_emac1:splitter_emac_ptp_tstmp_en
	wire           agilex_hps_emac1_gmii_mdo_o_e;                          // agilex_hps:emac1_gmii_mdo_o_e -> subsys_sgmii_emac1:splitter_emac_gmii_mdo_o_e
	wire           subsys_sgmii_emac1_splitter_emac_ptp_aux_ts_trig_i;     // subsys_sgmii_emac1:splitter_emac_ptp_aux_ts_trig_i -> agilex_hps:emac1_ptp_aux_ts_trig_i
	wire     [7:0] subsys_sgmii_emac1_splitter_emac_phy_rxd_i;             // subsys_sgmii_emac1:splitter_emac_phy_rxd_i -> agilex_hps:emac1_phy_rxd_i
	wire     [1:0] agilex_hps_emac1_phy_mac_speed_o;                       // agilex_hps:emac1_phy_mac_speed_o -> subsys_sgmii_emac1:splitter_emac_phy_mac_speed_o
	wire           agilex_hps_emac1_ptp_pps_o;                             // agilex_hps:emac1_ptp_pps_o -> subsys_sgmii_emac1:splitter_emac_ptp_pps_o
	wire           agilex_hps_emac1_ptp_tstmp_data;                        // agilex_hps:s2f_emac1_ptp_tstmp_data -> subsys_sgmii_emac1:splitter_emac_ptp_tstmp_data
	wire           subsys_sgmii_emac1_splitter_emac_phy_rxdv_i;            // subsys_sgmii_emac1:splitter_emac_phy_rxdv_i -> agilex_hps:emac1_phy_rxdv_i
	wire    [31:0] emif_calbus_0_emif_calbus_0_calbus_wdata;               // emif_calbus_0:calbus_wdata_0 -> emif_hps:calbus_wdata
	wire    [19:0] emif_calbus_0_emif_calbus_0_calbus_address;             // emif_calbus_0:calbus_address_0 -> emif_hps:calbus_address
	wire  [4095:0] emif_hps_emif_calbus_calbus_seq_param_tbl;              // emif_hps:calbus_seq_param_tbl -> emif_calbus_0:calbus_seq_param_tbl_0
	wire           emif_calbus_0_emif_calbus_0_calbus_read;                // emif_calbus_0:calbus_read_0 -> emif_hps:calbus_read
	wire           emif_calbus_0_emif_calbus_0_calbus_write;               // emif_calbus_0:calbus_write_0 -> emif_hps:calbus_write
	wire    [31:0] emif_hps_emif_calbus_calbus_rdata;                      // emif_hps:calbus_rdata -> emif_calbus_0:calbus_rdata_0
	wire     [1:0] agilex_hps_hps_emif_gp_to_emif;                         // agilex_hps:hps_emif_gp_to_emif -> emif_hps:hps_to_emif_gp
	wire  [4095:0] emif_hps_hps_emif_emif_to_hps;                          // emif_hps:emif_to_hps -> agilex_hps:hps_emif_emif_to_hps
	wire     [0:0] emif_hps_hps_emif_emif_to_gp;                           // emif_hps:emif_to_hps_gp -> agilex_hps:hps_emif_emif_to_gp
	wire  [4095:0] agilex_hps_hps_emif_hps_to_emif;                        // agilex_hps:hps_emif_hps_to_emif -> emif_hps:hps_to_emif
	wire           agilex_hps_emac1_rx_reset_reset;                        // agilex_hps:emac1_rst_clk_rx_n_o -> subsys_sgmii_emac1:emac_rx_reset_reset_n
	wire    [31:0] jtg_mst_fpga_m_master_readdata;                         // mm_interconnect_0:jtg_mst_fpga_m_master_readdata -> jtg_mst:fpga_m_master_readdata
	wire           jtg_mst_fpga_m_master_waitrequest;                      // mm_interconnect_0:jtg_mst_fpga_m_master_waitrequest -> jtg_mst:fpga_m_master_waitrequest
	wire    [31:0] jtg_mst_fpga_m_master_address;                          // jtg_mst:fpga_m_master_address -> mm_interconnect_0:jtg_mst_fpga_m_master_address
	wire           jtg_mst_fpga_m_master_read;                             // jtg_mst:fpga_m_master_read -> mm_interconnect_0:jtg_mst_fpga_m_master_read
	wire     [3:0] jtg_mst_fpga_m_master_byteenable;                       // jtg_mst:fpga_m_master_byteenable -> mm_interconnect_0:jtg_mst_fpga_m_master_byteenable
	wire           jtg_mst_fpga_m_master_readdatavalid;                    // mm_interconnect_0:jtg_mst_fpga_m_master_readdatavalid -> jtg_mst:fpga_m_master_readdatavalid
	wire           jtg_mst_fpga_m_master_write;                            // jtg_mst:fpga_m_master_write -> mm_interconnect_0:jtg_mst_fpga_m_master_write
	wire    [31:0] jtg_mst_fpga_m_master_writedata;                        // jtg_mst:fpga_m_master_writedata -> mm_interconnect_0:jtg_mst_fpga_m_master_writedata
	wire     [1:0] agilex_hps_h2f_lw_axi_master_awburst;                   // agilex_hps:h2f_lw_AWBURST -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awburst
	wire     [7:0] agilex_hps_h2f_lw_axi_master_arlen;                     // agilex_hps:h2f_lw_ARLEN -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arlen
	wire     [3:0] agilex_hps_h2f_lw_axi_master_wstrb;                     // agilex_hps:h2f_lw_WSTRB -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_wstrb
	wire           agilex_hps_h2f_lw_axi_master_wready;                    // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_wready -> agilex_hps:h2f_lw_WREADY
	wire     [3:0] agilex_hps_h2f_lw_axi_master_rid;                       // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_rid -> agilex_hps:h2f_lw_RID
	wire           agilex_hps_h2f_lw_axi_master_rready;                    // agilex_hps:h2f_lw_RREADY -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_rready
	wire     [7:0] agilex_hps_h2f_lw_axi_master_awlen;                     // agilex_hps:h2f_lw_AWLEN -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awlen
	wire     [3:0] agilex_hps_h2f_lw_axi_master_arcache;                   // agilex_hps:h2f_lw_ARCACHE -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arcache
	wire           agilex_hps_h2f_lw_axi_master_wvalid;                    // agilex_hps:h2f_lw_WVALID -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_wvalid
	wire    [20:0] agilex_hps_h2f_lw_axi_master_araddr;                    // agilex_hps:h2f_lw_ARADDR -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_araddr
	wire     [2:0] agilex_hps_h2f_lw_axi_master_arprot;                    // agilex_hps:h2f_lw_ARPROT -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arprot
	wire     [2:0] agilex_hps_h2f_lw_axi_master_awprot;                    // agilex_hps:h2f_lw_AWPROT -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awprot
	wire    [31:0] agilex_hps_h2f_lw_axi_master_wdata;                     // agilex_hps:h2f_lw_WDATA -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_wdata
	wire           agilex_hps_h2f_lw_axi_master_arvalid;                   // agilex_hps:h2f_lw_ARVALID -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arvalid
	wire     [3:0] agilex_hps_h2f_lw_axi_master_awcache;                   // agilex_hps:h2f_lw_AWCACHE -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awcache
	wire     [3:0] agilex_hps_h2f_lw_axi_master_arid;                      // agilex_hps:h2f_lw_ARID -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arid
	wire           agilex_hps_h2f_lw_axi_master_arlock;                    // agilex_hps:h2f_lw_ARLOCK -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arlock
	wire           agilex_hps_h2f_lw_axi_master_awlock;                    // agilex_hps:h2f_lw_AWLOCK -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awlock
	wire    [20:0] agilex_hps_h2f_lw_axi_master_awaddr;                    // agilex_hps:h2f_lw_AWADDR -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awaddr
	wire     [1:0] agilex_hps_h2f_lw_axi_master_bresp;                     // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_bresp -> agilex_hps:h2f_lw_BRESP
	wire           agilex_hps_h2f_lw_axi_master_arready;                   // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arready -> agilex_hps:h2f_lw_ARREADY
	wire    [31:0] agilex_hps_h2f_lw_axi_master_rdata;                     // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_rdata -> agilex_hps:h2f_lw_RDATA
	wire           agilex_hps_h2f_lw_axi_master_awready;                   // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awready -> agilex_hps:h2f_lw_AWREADY
	wire     [1:0] agilex_hps_h2f_lw_axi_master_arburst;                   // agilex_hps:h2f_lw_ARBURST -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arburst
	wire     [2:0] agilex_hps_h2f_lw_axi_master_arsize;                    // agilex_hps:h2f_lw_ARSIZE -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_arsize
	wire           agilex_hps_h2f_lw_axi_master_bready;                    // agilex_hps:h2f_lw_BREADY -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_bready
	wire           agilex_hps_h2f_lw_axi_master_rlast;                     // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_rlast -> agilex_hps:h2f_lw_RLAST
	wire           agilex_hps_h2f_lw_axi_master_wlast;                     // agilex_hps:h2f_lw_WLAST -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_wlast
	wire     [1:0] agilex_hps_h2f_lw_axi_master_rresp;                     // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_rresp -> agilex_hps:h2f_lw_RRESP
	wire     [3:0] agilex_hps_h2f_lw_axi_master_awid;                      // agilex_hps:h2f_lw_AWID -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awid
	wire     [3:0] agilex_hps_h2f_lw_axi_master_bid;                       // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_bid -> agilex_hps:h2f_lw_BID
	wire           agilex_hps_h2f_lw_axi_master_bvalid;                    // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_bvalid -> agilex_hps:h2f_lw_BVALID
	wire     [2:0] agilex_hps_h2f_lw_axi_master_awsize;                    // agilex_hps:h2f_lw_AWSIZE -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awsize
	wire           agilex_hps_h2f_lw_axi_master_awvalid;                   // agilex_hps:h2f_lw_AWVALID -> mm_interconnect_0:agilex_hps_h2f_lw_axi_master_awvalid
	wire           agilex_hps_h2f_lw_axi_master_rvalid;                    // mm_interconnect_0:agilex_hps_h2f_lw_axi_master_rvalid -> agilex_hps:h2f_lw_RVALID
	wire    [31:0] mm_interconnect_0_subsys_sgmii_emac1_csr_readdata;      // subsys_sgmii_emac1:csr_readdata -> mm_interconnect_0:subsys_sgmii_emac1_csr_readdata
	wire           mm_interconnect_0_subsys_sgmii_emac1_csr_waitrequest;   // subsys_sgmii_emac1:csr_waitrequest -> mm_interconnect_0:subsys_sgmii_emac1_csr_waitrequest
	wire           mm_interconnect_0_subsys_sgmii_emac1_csr_debugaccess;   // mm_interconnect_0:subsys_sgmii_emac1_csr_debugaccess -> subsys_sgmii_emac1:csr_debugaccess
	wire     [6:0] mm_interconnect_0_subsys_sgmii_emac1_csr_address;       // mm_interconnect_0:subsys_sgmii_emac1_csr_address -> subsys_sgmii_emac1:csr_address
	wire           mm_interconnect_0_subsys_sgmii_emac1_csr_read;          // mm_interconnect_0:subsys_sgmii_emac1_csr_read -> subsys_sgmii_emac1:csr_read
	wire     [3:0] mm_interconnect_0_subsys_sgmii_emac1_csr_byteenable;    // mm_interconnect_0:subsys_sgmii_emac1_csr_byteenable -> subsys_sgmii_emac1:csr_byteenable
	wire           mm_interconnect_0_subsys_sgmii_emac1_csr_readdatavalid; // subsys_sgmii_emac1:csr_readdatavalid -> mm_interconnect_0:subsys_sgmii_emac1_csr_readdatavalid
	wire           mm_interconnect_0_subsys_sgmii_emac1_csr_write;         // mm_interconnect_0:subsys_sgmii_emac1_csr_write -> subsys_sgmii_emac1:csr_write
	wire    [31:0] mm_interconnect_0_subsys_sgmii_emac1_csr_writedata;     // mm_interconnect_0:subsys_sgmii_emac1_csr_writedata -> subsys_sgmii_emac1:csr_writedata
	wire     [0:0] mm_interconnect_0_subsys_sgmii_emac1_csr_burstcount;    // mm_interconnect_0:subsys_sgmii_emac1_csr_burstcount -> subsys_sgmii_emac1:csr_burstcount
	wire    [31:0] mm_interconnect_0_periph_pb_cpu_0_s0_readdata;          // periph:pb_cpu_0_s0_readdata -> mm_interconnect_0:periph_pb_cpu_0_s0_readdata
	wire           mm_interconnect_0_periph_pb_cpu_0_s0_waitrequest;       // periph:pb_cpu_0_s0_waitrequest -> mm_interconnect_0:periph_pb_cpu_0_s0_waitrequest
	wire           mm_interconnect_0_periph_pb_cpu_0_s0_debugaccess;       // mm_interconnect_0:periph_pb_cpu_0_s0_debugaccess -> periph:pb_cpu_0_s0_debugaccess
	wire     [8:0] mm_interconnect_0_periph_pb_cpu_0_s0_address;           // mm_interconnect_0:periph_pb_cpu_0_s0_address -> periph:pb_cpu_0_s0_address
	wire           mm_interconnect_0_periph_pb_cpu_0_s0_read;              // mm_interconnect_0:periph_pb_cpu_0_s0_read -> periph:pb_cpu_0_s0_read
	wire     [3:0] mm_interconnect_0_periph_pb_cpu_0_s0_byteenable;        // mm_interconnect_0:periph_pb_cpu_0_s0_byteenable -> periph:pb_cpu_0_s0_byteenable
	wire           mm_interconnect_0_periph_pb_cpu_0_s0_readdatavalid;     // periph:pb_cpu_0_s0_readdatavalid -> mm_interconnect_0:periph_pb_cpu_0_s0_readdatavalid
	wire           mm_interconnect_0_periph_pb_cpu_0_s0_write;             // mm_interconnect_0:periph_pb_cpu_0_s0_write -> periph:pb_cpu_0_s0_write
	wire    [31:0] mm_interconnect_0_periph_pb_cpu_0_s0_writedata;         // mm_interconnect_0:periph_pb_cpu_0_s0_writedata -> periph:pb_cpu_0_s0_writedata
	wire     [0:0] mm_interconnect_0_periph_pb_cpu_0_s0_burstcount;        // mm_interconnect_0:periph_pb_cpu_0_s0_burstcount -> periph:pb_cpu_0_s0_burstcount
	wire   [127:0] mm_interconnect_0_fpga_m2ocm_pb_s0_readdata;            // fpga_m2ocm_pb:s0_readdata -> mm_interconnect_0:fpga_m2ocm_pb_s0_readdata
	wire           mm_interconnect_0_fpga_m2ocm_pb_s0_waitrequest;         // fpga_m2ocm_pb:s0_waitrequest -> mm_interconnect_0:fpga_m2ocm_pb_s0_waitrequest
	wire           mm_interconnect_0_fpga_m2ocm_pb_s0_debugaccess;         // mm_interconnect_0:fpga_m2ocm_pb_s0_debugaccess -> fpga_m2ocm_pb:s0_debugaccess
	wire    [17:0] mm_interconnect_0_fpga_m2ocm_pb_s0_address;             // mm_interconnect_0:fpga_m2ocm_pb_s0_address -> fpga_m2ocm_pb:s0_address
	wire           mm_interconnect_0_fpga_m2ocm_pb_s0_read;                // mm_interconnect_0:fpga_m2ocm_pb_s0_read -> fpga_m2ocm_pb:s0_read
	wire    [15:0] mm_interconnect_0_fpga_m2ocm_pb_s0_byteenable;          // mm_interconnect_0:fpga_m2ocm_pb_s0_byteenable -> fpga_m2ocm_pb:s0_byteenable
	wire           mm_interconnect_0_fpga_m2ocm_pb_s0_readdatavalid;       // fpga_m2ocm_pb:s0_readdatavalid -> mm_interconnect_0:fpga_m2ocm_pb_s0_readdatavalid
	wire           mm_interconnect_0_fpga_m2ocm_pb_s0_write;               // mm_interconnect_0:fpga_m2ocm_pb_s0_write -> fpga_m2ocm_pb:s0_write
	wire   [127:0] mm_interconnect_0_fpga_m2ocm_pb_s0_writedata;           // mm_interconnect_0:fpga_m2ocm_pb_s0_writedata -> fpga_m2ocm_pb:s0_writedata
	wire     [0:0] mm_interconnect_0_fpga_m2ocm_pb_s0_burstcount;          // mm_interconnect_0:fpga_m2ocm_pb_s0_burstcount -> fpga_m2ocm_pb:s0_burstcount
	wire     [1:0] agilex_hps_h2f_axi_master_awburst;                      // agilex_hps:h2f_AWBURST -> mm_interconnect_1:agilex_hps_h2f_axi_master_awburst
	wire     [7:0] agilex_hps_h2f_axi_master_arlen;                        // agilex_hps:h2f_ARLEN -> mm_interconnect_1:agilex_hps_h2f_axi_master_arlen
	wire    [15:0] agilex_hps_h2f_axi_master_wstrb;                        // agilex_hps:h2f_WSTRB -> mm_interconnect_1:agilex_hps_h2f_axi_master_wstrb
	wire           agilex_hps_h2f_axi_master_wready;                       // mm_interconnect_1:agilex_hps_h2f_axi_master_wready -> agilex_hps:h2f_WREADY
	wire     [3:0] agilex_hps_h2f_axi_master_rid;                          // mm_interconnect_1:agilex_hps_h2f_axi_master_rid -> agilex_hps:h2f_RID
	wire           agilex_hps_h2f_axi_master_rready;                       // agilex_hps:h2f_RREADY -> mm_interconnect_1:agilex_hps_h2f_axi_master_rready
	wire     [7:0] agilex_hps_h2f_axi_master_awlen;                        // agilex_hps:h2f_AWLEN -> mm_interconnect_1:agilex_hps_h2f_axi_master_awlen
	wire     [3:0] agilex_hps_h2f_axi_master_arcache;                      // agilex_hps:h2f_ARCACHE -> mm_interconnect_1:agilex_hps_h2f_axi_master_arcache
	wire           agilex_hps_h2f_axi_master_wvalid;                       // agilex_hps:h2f_WVALID -> mm_interconnect_1:agilex_hps_h2f_axi_master_wvalid
	wire    [31:0] agilex_hps_h2f_axi_master_araddr;                       // agilex_hps:h2f_ARADDR -> mm_interconnect_1:agilex_hps_h2f_axi_master_araddr
	wire     [2:0] agilex_hps_h2f_axi_master_arprot;                       // agilex_hps:h2f_ARPROT -> mm_interconnect_1:agilex_hps_h2f_axi_master_arprot
	wire     [2:0] agilex_hps_h2f_axi_master_awprot;                       // agilex_hps:h2f_AWPROT -> mm_interconnect_1:agilex_hps_h2f_axi_master_awprot
	wire   [127:0] agilex_hps_h2f_axi_master_wdata;                        // agilex_hps:h2f_WDATA -> mm_interconnect_1:agilex_hps_h2f_axi_master_wdata
	wire           agilex_hps_h2f_axi_master_arvalid;                      // agilex_hps:h2f_ARVALID -> mm_interconnect_1:agilex_hps_h2f_axi_master_arvalid
	wire     [3:0] agilex_hps_h2f_axi_master_awcache;                      // agilex_hps:h2f_AWCACHE -> mm_interconnect_1:agilex_hps_h2f_axi_master_awcache
	wire     [3:0] agilex_hps_h2f_axi_master_arid;                         // agilex_hps:h2f_ARID -> mm_interconnect_1:agilex_hps_h2f_axi_master_arid
	wire           agilex_hps_h2f_axi_master_arlock;                       // agilex_hps:h2f_ARLOCK -> mm_interconnect_1:agilex_hps_h2f_axi_master_arlock
	wire           agilex_hps_h2f_axi_master_awlock;                       // agilex_hps:h2f_AWLOCK -> mm_interconnect_1:agilex_hps_h2f_axi_master_awlock
	wire    [31:0] agilex_hps_h2f_axi_master_awaddr;                       // agilex_hps:h2f_AWADDR -> mm_interconnect_1:agilex_hps_h2f_axi_master_awaddr
	wire     [1:0] agilex_hps_h2f_axi_master_bresp;                        // mm_interconnect_1:agilex_hps_h2f_axi_master_bresp -> agilex_hps:h2f_BRESP
	wire           agilex_hps_h2f_axi_master_arready;                      // mm_interconnect_1:agilex_hps_h2f_axi_master_arready -> agilex_hps:h2f_ARREADY
	wire   [127:0] agilex_hps_h2f_axi_master_rdata;                        // mm_interconnect_1:agilex_hps_h2f_axi_master_rdata -> agilex_hps:h2f_RDATA
	wire           agilex_hps_h2f_axi_master_awready;                      // mm_interconnect_1:agilex_hps_h2f_axi_master_awready -> agilex_hps:h2f_AWREADY
	wire     [1:0] agilex_hps_h2f_axi_master_arburst;                      // agilex_hps:h2f_ARBURST -> mm_interconnect_1:agilex_hps_h2f_axi_master_arburst
	wire     [2:0] agilex_hps_h2f_axi_master_arsize;                       // agilex_hps:h2f_ARSIZE -> mm_interconnect_1:agilex_hps_h2f_axi_master_arsize
	wire           agilex_hps_h2f_axi_master_bready;                       // agilex_hps:h2f_BREADY -> mm_interconnect_1:agilex_hps_h2f_axi_master_bready
	wire           agilex_hps_h2f_axi_master_rlast;                        // mm_interconnect_1:agilex_hps_h2f_axi_master_rlast -> agilex_hps:h2f_RLAST
	wire           agilex_hps_h2f_axi_master_wlast;                        // agilex_hps:h2f_WLAST -> mm_interconnect_1:agilex_hps_h2f_axi_master_wlast
	wire     [1:0] agilex_hps_h2f_axi_master_rresp;                        // mm_interconnect_1:agilex_hps_h2f_axi_master_rresp -> agilex_hps:h2f_RRESP
	wire     [3:0] agilex_hps_h2f_axi_master_awid;                         // agilex_hps:h2f_AWID -> mm_interconnect_1:agilex_hps_h2f_axi_master_awid
	wire     [3:0] agilex_hps_h2f_axi_master_bid;                          // mm_interconnect_1:agilex_hps_h2f_axi_master_bid -> agilex_hps:h2f_BID
	wire           agilex_hps_h2f_axi_master_bvalid;                       // mm_interconnect_1:agilex_hps_h2f_axi_master_bvalid -> agilex_hps:h2f_BVALID
	wire     [2:0] agilex_hps_h2f_axi_master_awsize;                       // agilex_hps:h2f_AWSIZE -> mm_interconnect_1:agilex_hps_h2f_axi_master_awsize
	wire           agilex_hps_h2f_axi_master_awvalid;                      // agilex_hps:h2f_AWVALID -> mm_interconnect_1:agilex_hps_h2f_axi_master_awvalid
	wire           agilex_hps_h2f_axi_master_rvalid;                       // mm_interconnect_1:agilex_hps_h2f_axi_master_rvalid -> agilex_hps:h2f_RVALID
	wire           fpga_m2ocm_pb_m0_waitrequest;                           // mm_interconnect_1:fpga_m2ocm_pb_m0_waitrequest -> fpga_m2ocm_pb:m0_waitrequest
	wire   [127:0] fpga_m2ocm_pb_m0_readdata;                              // mm_interconnect_1:fpga_m2ocm_pb_m0_readdata -> fpga_m2ocm_pb:m0_readdata
	wire           fpga_m2ocm_pb_m0_debugaccess;                           // fpga_m2ocm_pb:m0_debugaccess -> mm_interconnect_1:fpga_m2ocm_pb_m0_debugaccess
	wire    [17:0] fpga_m2ocm_pb_m0_address;                               // fpga_m2ocm_pb:m0_address -> mm_interconnect_1:fpga_m2ocm_pb_m0_address
	wire           fpga_m2ocm_pb_m0_read;                                  // fpga_m2ocm_pb:m0_read -> mm_interconnect_1:fpga_m2ocm_pb_m0_read
	wire    [15:0] fpga_m2ocm_pb_m0_byteenable;                            // fpga_m2ocm_pb:m0_byteenable -> mm_interconnect_1:fpga_m2ocm_pb_m0_byteenable
	wire           fpga_m2ocm_pb_m0_readdatavalid;                         // mm_interconnect_1:fpga_m2ocm_pb_m0_readdatavalid -> fpga_m2ocm_pb:m0_readdatavalid
	wire   [127:0] fpga_m2ocm_pb_m0_writedata;                             // fpga_m2ocm_pb:m0_writedata -> mm_interconnect_1:fpga_m2ocm_pb_m0_writedata
	wire           fpga_m2ocm_pb_m0_write;                                 // fpga_m2ocm_pb:m0_write -> mm_interconnect_1:fpga_m2ocm_pb_m0_write
	wire     [0:0] fpga_m2ocm_pb_m0_burstcount;                            // fpga_m2ocm_pb:m0_burstcount -> mm_interconnect_1:fpga_m2ocm_pb_m0_burstcount
	wire           mm_interconnect_1_ocm_s1_chipselect;                    // mm_interconnect_1:ocm_s1_chipselect -> ocm:chipselect
	wire   [127:0] mm_interconnect_1_ocm_s1_readdata;                      // ocm:readdata -> mm_interconnect_1:ocm_s1_readdata
	wire    [13:0] mm_interconnect_1_ocm_s1_address;                       // mm_interconnect_1:ocm_s1_address -> ocm:address
	wire    [15:0] mm_interconnect_1_ocm_s1_byteenable;                    // mm_interconnect_1:ocm_s1_byteenable -> ocm:byteenable
	wire           mm_interconnect_1_ocm_s1_write;                         // mm_interconnect_1:ocm_s1_write -> ocm:write
	wire   [127:0] mm_interconnect_1_ocm_s1_writedata;                     // mm_interconnect_1:ocm_s1_writedata -> ocm:writedata
	wire           mm_interconnect_1_ocm_s1_clken;                         // mm_interconnect_1:ocm_s1_clken -> ocm:clken
	wire    [31:0] jtg_mst_hps_m_master_readdata;                          // mm_interconnect_2:jtg_mst_hps_m_master_readdata -> jtg_mst:hps_m_master_readdata
	wire           jtg_mst_hps_m_master_waitrequest;                       // mm_interconnect_2:jtg_mst_hps_m_master_waitrequest -> jtg_mst:hps_m_master_waitrequest
	wire    [31:0] jtg_mst_hps_m_master_address;                           // jtg_mst:hps_m_master_address -> mm_interconnect_2:jtg_mst_hps_m_master_address
	wire           jtg_mst_hps_m_master_read;                              // jtg_mst:hps_m_master_read -> mm_interconnect_2:jtg_mst_hps_m_master_read
	wire     [3:0] jtg_mst_hps_m_master_byteenable;                        // jtg_mst:hps_m_master_byteenable -> mm_interconnect_2:jtg_mst_hps_m_master_byteenable
	wire           jtg_mst_hps_m_master_readdatavalid;                     // mm_interconnect_2:jtg_mst_hps_m_master_readdatavalid -> jtg_mst:hps_m_master_readdatavalid
	wire           jtg_mst_hps_m_master_write;                             // jtg_mst:hps_m_master_write -> mm_interconnect_2:jtg_mst_hps_m_master_write
	wire    [31:0] jtg_mst_hps_m_master_writedata;                         // jtg_mst:hps_m_master_writedata -> mm_interconnect_2:jtg_mst_hps_m_master_writedata
	wire     [1:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awburst;     // mm_interconnect_2:agilex_hps_f2h_axi_slave_awburst -> agilex_hps:f2h_AWBURST
	wire    [22:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awuser;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_awuser -> agilex_hps:f2h_AWUSER
	wire     [7:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arlen;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_arlen -> agilex_hps:f2h_ARLEN
	wire     [3:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arqos;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_arqos -> agilex_hps:f2h_ARQOS
	wire    [63:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_wstrb;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_wstrb -> agilex_hps:f2h_WSTRB
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_wready;      // agilex_hps:f2h_WREADY -> mm_interconnect_2:agilex_hps_f2h_axi_slave_wready
	wire     [4:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_rid;         // agilex_hps:f2h_RID -> mm_interconnect_2:agilex_hps_f2h_axi_slave_rid
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_rready;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_rready -> agilex_hps:f2h_RREADY
	wire     [7:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awlen;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_awlen -> agilex_hps:f2h_AWLEN
	wire     [3:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awqos;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_awqos -> agilex_hps:f2h_AWQOS
	wire     [3:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arcache;     // mm_interconnect_2:agilex_hps_f2h_axi_slave_arcache -> agilex_hps:f2h_ARCACHE
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_wvalid;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_wvalid -> agilex_hps:f2h_WVALID
	wire    [31:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_araddr;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_araddr -> agilex_hps:f2h_ARADDR
	wire     [2:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arprot;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_arprot -> agilex_hps:f2h_ARPROT
	wire     [2:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awprot;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_awprot -> agilex_hps:f2h_AWPROT
	wire   [511:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_wdata;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_wdata -> agilex_hps:f2h_WDATA
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_arvalid;     // mm_interconnect_2:agilex_hps_f2h_axi_slave_arvalid -> agilex_hps:f2h_ARVALID
	wire     [3:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awcache;     // mm_interconnect_2:agilex_hps_f2h_axi_slave_awcache -> agilex_hps:f2h_AWCACHE
	wire     [4:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arid;        // mm_interconnect_2:agilex_hps_f2h_axi_slave_arid -> agilex_hps:f2h_ARID
	wire     [0:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arlock;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_arlock -> agilex_hps:f2h_ARLOCK
	wire     [0:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awlock;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_awlock -> agilex_hps:f2h_AWLOCK
	wire    [31:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awaddr;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_awaddr -> agilex_hps:f2h_AWADDR
	wire     [1:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_bresp;       // agilex_hps:f2h_BRESP -> mm_interconnect_2:agilex_hps_f2h_axi_slave_bresp
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_arready;     // agilex_hps:f2h_ARREADY -> mm_interconnect_2:agilex_hps_f2h_axi_slave_arready
	wire   [511:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_rdata;       // agilex_hps:f2h_RDATA -> mm_interconnect_2:agilex_hps_f2h_axi_slave_rdata
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_awready;     // agilex_hps:f2h_AWREADY -> mm_interconnect_2:agilex_hps_f2h_axi_slave_awready
	wire     [1:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arburst;     // mm_interconnect_2:agilex_hps_f2h_axi_slave_arburst -> agilex_hps:f2h_ARBURST
	wire     [2:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_arsize;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_arsize -> agilex_hps:f2h_ARSIZE
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_bready;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_bready -> agilex_hps:f2h_BREADY
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_rlast;       // agilex_hps:f2h_RLAST -> mm_interconnect_2:agilex_hps_f2h_axi_slave_rlast
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_wlast;       // mm_interconnect_2:agilex_hps_f2h_axi_slave_wlast -> agilex_hps:f2h_WLAST
	wire     [1:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_rresp;       // agilex_hps:f2h_RRESP -> mm_interconnect_2:agilex_hps_f2h_axi_slave_rresp
	wire     [4:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awid;        // mm_interconnect_2:agilex_hps_f2h_axi_slave_awid -> agilex_hps:f2h_AWID
	wire     [4:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_bid;         // agilex_hps:f2h_BID -> mm_interconnect_2:agilex_hps_f2h_axi_slave_bid
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_bvalid;      // agilex_hps:f2h_BVALID -> mm_interconnect_2:agilex_hps_f2h_axi_slave_bvalid
	wire     [2:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_awsize;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_awsize -> agilex_hps:f2h_AWSIZE
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_awvalid;     // mm_interconnect_2:agilex_hps_f2h_axi_slave_awvalid -> agilex_hps:f2h_AWVALID
	wire    [22:0] mm_interconnect_2_agilex_hps_f2h_axi_slave_aruser;      // mm_interconnect_2:agilex_hps_f2h_axi_slave_aruser -> agilex_hps:f2h_ARUSER
	wire           mm_interconnect_2_agilex_hps_f2h_axi_slave_rvalid;      // agilex_hps:f2h_RVALID -> mm_interconnect_2:agilex_hps_f2h_axi_slave_rvalid
	wire    [31:0] agilex_hps_f2h_irq0_irq;                                // irq_mapper:sender_irq -> agilex_hps:f2h_irq_p0
	wire     [1:0] periph_ilc_irq_irq;                                     // irq_mapper_001:sender_irq -> periph:ILC_irq_irq
	wire           irq_mapper_receiver0_irq;                               // periph:button_pio_irq_irq -> [irq_mapper:receiver0_irq, irq_mapper_001:receiver0_irq]
	wire           irq_mapper_receiver1_irq;                               // periph:dipsw_pio_irq_irq -> [irq_mapper:receiver1_irq, irq_mapper_001:receiver1_irq]
	wire           rst_controller_reset_out_reset;                         // rst_controller:reset_out -> [agilex_hps:f2h_axi_rst_n, agilex_hps:h2f_axi_rst_n, agilex_hps:h2f_lw_axi_rst_n, fpga_m2ocm_pb:reset, irq_mapper_001:reset, ocm:reset, rst_translator:in_reset]
	wire           rst_controller_reset_out_reset_req;                     // rst_controller:reset_req -> [ocm:reset_req, rst_translator:reset_req_in]
	wire           rst_in_out_reset_reset;                                 // rst_in:out_reset_n -> [rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire           rst_controller_001_reset_out_reset;                     // rst_controller_001:reset_out -> [jtg_mst:reset_reset_n, mm_interconnect_0:agilex_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset, mm_interconnect_0:jtg_mst_reset_reset_bridge_in_reset_reset, mm_interconnect_1:agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset, mm_interconnect_2:agilex_hps_f2h_axi_reset_reset_bridge_in_reset_reset, mm_interconnect_2:jtg_mst_reset_reset_bridge_in_reset_reset, periph:reset_reset_n, subsys_sgmii_emac1:rst_in_reset_n]
	wire           rst_controller_002_reset_out_reset;                     // rst_controller_002:reset_out -> subsys_sgmii_emac1:emac_tx_reset_reset_n
	wire           agilex_hps_emac1_tx_reset_reset;                        // agilex_hps:emac1_rst_clk_tx_n_o -> rst_controller_002:reset_in0

	agilex_hps agilex_hps (
		.h2f_watchdog_rst         (wd_reset_reset_n),                                   //  output,     width = 1,   h2f_watchdog_rst.reset_n
		.f2h_stm_hwevents         (agilex_hps_f2h_stm_hw_events_stm_hwevents),          //   input,    width = 44,  f2h_stm_hw_events.stm_hwevents
		.h2f_cs_ntrst             (agilex_hps_h2f_cs_ntrst),                            //   input,     width = 1,             h2f_cs.ntrst
		.h2f_cs_tck               (agilex_hps_h2f_cs_tck),                              //   input,     width = 1,                   .tck
		.h2f_cs_tdi               (agilex_hps_h2f_cs_tdi),                              //   input,     width = 1,                   .tdi
		.h2f_cs_tdo               (agilex_hps_h2f_cs_tdo),                              //  output,     width = 1,                   .tdo
		.h2f_cs_tdoen             (agilex_hps_h2f_cs_tdoen),                            //  output,     width = 1,                   .tdoen
		.h2f_cs_tms               (agilex_hps_h2f_cs_tms),                              //   input,     width = 1,                   .tms
		.hps_emif_emif_to_hps     (emif_hps_hps_emif_emif_to_hps),                      //   input,  width = 4096,           hps_emif.emif_to_hps
		.hps_emif_hps_to_emif     (agilex_hps_hps_emif_hps_to_emif),                    //  output,  width = 4096,                   .hps_to_emif
		.hps_emif_emif_to_gp      (emif_hps_hps_emif_emif_to_gp),                       //   input,     width = 1,                   .emif_to_gp
		.hps_emif_gp_to_emif      (agilex_hps_hps_emif_gp_to_emif),                     //  output,     width = 2,                   .gp_to_emif
		.emac_ptp_ref_clk         (clk_100_out_clk_clk),                                //   input,     width = 1, emac_ptp_ref_clock.clk
		.emac1_phy_mac_speed_o    (agilex_hps_emac1_phy_mac_speed_o),                   //  output,     width = 2,              emac1.phy_mac_speed_o
		.emac1_phy_txd_o          (agilex_hps_emac1_phy_txd_o),                         //  output,     width = 8,                   .phy_txd_o
		.emac1_phy_txen_o         (agilex_hps_emac1_phy_txen_o),                        //  output,     width = 1,                   .phy_txen_o
		.emac1_phy_txer_o         (agilex_hps_emac1_phy_txer_o),                        //  output,     width = 1,                   .phy_txer_o
		.emac1_phy_rxdv_i         (subsys_sgmii_emac1_splitter_emac_phy_rxdv_i),        //   input,     width = 1,                   .phy_rxdv_i
		.emac1_phy_rxer_i         (subsys_sgmii_emac1_splitter_emac_phy_rxer_i),        //   input,     width = 1,                   .phy_rxer_i
		.emac1_phy_rxd_i          (subsys_sgmii_emac1_splitter_emac_phy_rxd_i),         //   input,     width = 8,                   .phy_rxd_i
		.emac1_phy_col_i          (subsys_sgmii_emac1_splitter_emac_phy_col_i),         //   input,     width = 1,                   .phy_col_i
		.emac1_phy_crs_i          (subsys_sgmii_emac1_splitter_emac_phy_crs_i),         //   input,     width = 1,                   .phy_crs_i
		.emac1_gmii_mdo_o         (agilex_hps_emac1_gmii_mdo_o),                        //  output,     width = 1,                   .gmii_mdo_o
		.emac1_gmii_mdo_o_e       (agilex_hps_emac1_gmii_mdo_o_e),                      //  output,     width = 1,                   .gmii_mdo_o_e
		.emac1_gmii_mdi_i         (subsys_sgmii_emac1_splitter_emac_gmii_mdi_i),        //   input,     width = 1,                   .gmii_mdi_i
		.emac1_ptp_pps_o          (agilex_hps_emac1_ptp_pps_o),                         //  output,     width = 1,                   .ptp_pps_o
		.emac1_ptp_aux_ts_trig_i  (subsys_sgmii_emac1_splitter_emac_ptp_aux_ts_trig_i), //   input,     width = 1,                   .ptp_aux_ts_trig_i
		.s2f_emac1_ptp_tstmp_data (agilex_hps_emac1_ptp_tstmp_data),                    //  output,     width = 1,                   .ptp_tstmp_data
		.s2f_emac1_ptp_tstmp_en   (agilex_hps_emac1_ptp_tstmp_en),                      //  output,     width = 1,                   .ptp_tstmp_en
		.emac1_gmii_mdc_o         (emac1_mdc_clk),                                      //  output,     width = 1,       emac1_md_clk.clk
		.emac1_clk_rx_i           (subsys_sgmii_emac1_emac_rx_clk_in_clk),              //   input,     width = 1,    emac1_rx_clk_in.clk
		.emac1_clk_tx_i           (subsys_sgmii_emac1_emac_tx_clk_in_clk),              //   input,     width = 1,    emac1_tx_clk_in.clk
		.emac1_phy_txclk_o        (agilex_hps_emac1_gtx_clk_clk),                       //  output,     width = 1,      emac1_gtx_clk.clk
		.emac1_rst_clk_tx_n_o     (agilex_hps_emac1_tx_reset_reset),                    //  output,     width = 1,     emac1_tx_reset.reset_n
		.emac1_rst_clk_rx_n_o     (agilex_hps_emac1_rx_reset_reset),                    //  output,     width = 1,     emac1_rx_reset.reset_n
		.EMAC0_TX_CLK             (hps_io_EMAC0_TX_CLK),                                //  output,     width = 1,             hps_io.EMAC0_TX_CLK
		.EMAC0_TXD0               (hps_io_EMAC0_TXD0),                                  //  output,     width = 1,                   .EMAC0_TXD0
		.EMAC0_TXD1               (hps_io_EMAC0_TXD1),                                  //  output,     width = 1,                   .EMAC0_TXD1
		.EMAC0_TXD2               (hps_io_EMAC0_TXD2),                                  //  output,     width = 1,                   .EMAC0_TXD2
		.EMAC0_TXD3               (hps_io_EMAC0_TXD3),                                  //  output,     width = 1,                   .EMAC0_TXD3
		.EMAC0_RX_CTL             (hps_io_EMAC0_RX_CTL),                                //   input,     width = 1,                   .EMAC0_RX_CTL
		.EMAC0_TX_CTL             (hps_io_EMAC0_TX_CTL),                                //  output,     width = 1,                   .EMAC0_TX_CTL
		.EMAC0_RX_CLK             (hps_io_EMAC0_RX_CLK),                                //   input,     width = 1,                   .EMAC0_RX_CLK
		.EMAC0_RXD0               (hps_io_EMAC0_RXD0),                                  //   input,     width = 1,                   .EMAC0_RXD0
		.EMAC0_RXD1               (hps_io_EMAC0_RXD1),                                  //   input,     width = 1,                   .EMAC0_RXD1
		.EMAC0_RXD2               (hps_io_EMAC0_RXD2),                                  //   input,     width = 1,                   .EMAC0_RXD2
		.EMAC0_RXD3               (hps_io_EMAC0_RXD3),                                  //   input,     width = 1,                   .EMAC0_RXD3
		.EMAC0_MDIO               (hps_io_EMAC0_MDIO),                                  //   inout,     width = 1,                   .EMAC0_MDIO
		.EMAC0_MDC                (hps_io_EMAC0_MDC),                                   //  output,     width = 1,                   .EMAC0_MDC
		.SDMMC_CMD                (hps_io_SDMMC_CMD),                                   //   inout,     width = 1,                   .SDMMC_CMD
		.SDMMC_D0                 (hps_io_SDMMC_D0),                                    //   inout,     width = 1,                   .SDMMC_D0
		.SDMMC_D1                 (hps_io_SDMMC_D1),                                    //   inout,     width = 1,                   .SDMMC_D1
		.SDMMC_D2                 (hps_io_SDMMC_D2),                                    //   inout,     width = 1,                   .SDMMC_D2
		.SDMMC_D3                 (hps_io_SDMMC_D3),                                    //   inout,     width = 1,                   .SDMMC_D3
		.SDMMC_CCLK               (hps_io_SDMMC_CCLK),                                  //  output,     width = 1,                   .SDMMC_CCLK
		.USB0_DATA0               (hps_io_USB0_DATA0),                                  //   inout,     width = 1,                   .USB0_DATA0
		.USB0_DATA1               (hps_io_USB0_DATA1),                                  //   inout,     width = 1,                   .USB0_DATA1
		.USB0_DATA2               (hps_io_USB0_DATA2),                                  //   inout,     width = 1,                   .USB0_DATA2
		.USB0_DATA3               (hps_io_USB0_DATA3),                                  //   inout,     width = 1,                   .USB0_DATA3
		.USB0_DATA4               (hps_io_USB0_DATA4),                                  //   inout,     width = 1,                   .USB0_DATA4
		.USB0_DATA5               (hps_io_USB0_DATA5),                                  //   inout,     width = 1,                   .USB0_DATA5
		.USB0_DATA6               (hps_io_USB0_DATA6),                                  //   inout,     width = 1,                   .USB0_DATA6
		.USB0_DATA7               (hps_io_USB0_DATA7),                                  //   inout,     width = 1,                   .USB0_DATA7
		.USB0_CLK                 (hps_io_USB0_CLK),                                    //   input,     width = 1,                   .USB0_CLK
		.USB0_STP                 (hps_io_USB0_STP),                                    //  output,     width = 1,                   .USB0_STP
		.USB0_DIR                 (hps_io_USB0_DIR),                                    //   input,     width = 1,                   .USB0_DIR
		.USB0_NXT                 (hps_io_USB0_NXT),                                    //   input,     width = 1,                   .USB0_NXT
		.UART0_RX                 (hps_io_UART0_RX),                                    //   input,     width = 1,                   .UART0_RX
		.UART0_TX                 (hps_io_UART0_TX),                                    //  output,     width = 1,                   .UART0_TX
		.I2C1_SDA                 (hps_io_I2C1_SDA),                                    //   inout,     width = 1,                   .I2C1_SDA
		.I2C1_SCL                 (hps_io_I2C1_SCL),                                    //   inout,     width = 1,                   .I2C1_SCL
		.gpio1_io0                (hps_io_gpio1_io0),                                   //   inout,     width = 1,                   .gpio1_io0
		.gpio1_io1                (hps_io_gpio1_io1),                                   //   inout,     width = 1,                   .gpio1_io1
		.gpio1_io4                (hps_io_gpio1_io4),                                   //   inout,     width = 1,                   .gpio1_io4
		.gpio1_io5                (hps_io_gpio1_io5),                                   //   inout,     width = 1,                   .gpio1_io5
		.jtag_tck                 (hps_io_jtag_tck),                                    //   input,     width = 1,                   .jtag_tck
		.jtag_tms                 (hps_io_jtag_tms),                                    //   input,     width = 1,                   .jtag_tms
		.jtag_tdo                 (hps_io_jtag_tdo),                                    //  output,     width = 1,                   .jtag_tdo
		.jtag_tdi                 (hps_io_jtag_tdi),                                    //   input,     width = 1,                   .jtag_tdi
		.hps_osc_clk              (hps_io_hps_osc_clk),                                 //   input,     width = 1,                   .hps_osc_clk
		.gpio1_io19               (hps_io_gpio1_io19),                                  //   inout,     width = 1,                   .gpio1_io19
		.gpio1_io20               (hps_io_gpio1_io20),                                  //   inout,     width = 1,                   .gpio1_io20
		.gpio1_io21               (hps_io_gpio1_io21),                                  //   inout,     width = 1,                   .gpio1_io21
		.h2f_rst                  (h2f_reset_reset),                                    //  output,     width = 1,          h2f_reset.reset
		.h2f_axi_clk              (clk_100_out_clk_clk),                                //   input,     width = 1,      h2f_axi_clock.clk
		.h2f_axi_rst_n            (~rst_controller_reset_out_reset),                    //   input,     width = 1,      h2f_axi_reset.reset_n
		.h2f_AWID                 (agilex_hps_h2f_axi_master_awid),                     //  output,     width = 4,     h2f_axi_master.awid
		.h2f_AWADDR               (agilex_hps_h2f_axi_master_awaddr),                   //  output,    width = 32,                   .awaddr
		.h2f_AWLEN                (agilex_hps_h2f_axi_master_awlen),                    //  output,     width = 8,                   .awlen
		.h2f_AWSIZE               (agilex_hps_h2f_axi_master_awsize),                   //  output,     width = 3,                   .awsize
		.h2f_AWBURST              (agilex_hps_h2f_axi_master_awburst),                  //  output,     width = 2,                   .awburst
		.h2f_AWLOCK               (agilex_hps_h2f_axi_master_awlock),                   //  output,     width = 1,                   .awlock
		.h2f_AWCACHE              (agilex_hps_h2f_axi_master_awcache),                  //  output,     width = 4,                   .awcache
		.h2f_AWPROT               (agilex_hps_h2f_axi_master_awprot),                   //  output,     width = 3,                   .awprot
		.h2f_AWVALID              (agilex_hps_h2f_axi_master_awvalid),                  //  output,     width = 1,                   .awvalid
		.h2f_AWREADY              (agilex_hps_h2f_axi_master_awready),                  //   input,     width = 1,                   .awready
		.h2f_WDATA                (agilex_hps_h2f_axi_master_wdata),                    //  output,   width = 128,                   .wdata
		.h2f_WSTRB                (agilex_hps_h2f_axi_master_wstrb),                    //  output,    width = 16,                   .wstrb
		.h2f_WLAST                (agilex_hps_h2f_axi_master_wlast),                    //  output,     width = 1,                   .wlast
		.h2f_WVALID               (agilex_hps_h2f_axi_master_wvalid),                   //  output,     width = 1,                   .wvalid
		.h2f_WREADY               (agilex_hps_h2f_axi_master_wready),                   //   input,     width = 1,                   .wready
		.h2f_BID                  (agilex_hps_h2f_axi_master_bid),                      //   input,     width = 4,                   .bid
		.h2f_BRESP                (agilex_hps_h2f_axi_master_bresp),                    //   input,     width = 2,                   .bresp
		.h2f_BVALID               (agilex_hps_h2f_axi_master_bvalid),                   //   input,     width = 1,                   .bvalid
		.h2f_BREADY               (agilex_hps_h2f_axi_master_bready),                   //  output,     width = 1,                   .bready
		.h2f_ARID                 (agilex_hps_h2f_axi_master_arid),                     //  output,     width = 4,                   .arid
		.h2f_ARADDR               (agilex_hps_h2f_axi_master_araddr),                   //  output,    width = 32,                   .araddr
		.h2f_ARLEN                (agilex_hps_h2f_axi_master_arlen),                    //  output,     width = 8,                   .arlen
		.h2f_ARSIZE               (agilex_hps_h2f_axi_master_arsize),                   //  output,     width = 3,                   .arsize
		.h2f_ARBURST              (agilex_hps_h2f_axi_master_arburst),                  //  output,     width = 2,                   .arburst
		.h2f_ARLOCK               (agilex_hps_h2f_axi_master_arlock),                   //  output,     width = 1,                   .arlock
		.h2f_ARCACHE              (agilex_hps_h2f_axi_master_arcache),                  //  output,     width = 4,                   .arcache
		.h2f_ARPROT               (agilex_hps_h2f_axi_master_arprot),                   //  output,     width = 3,                   .arprot
		.h2f_ARVALID              (agilex_hps_h2f_axi_master_arvalid),                  //  output,     width = 1,                   .arvalid
		.h2f_ARREADY              (agilex_hps_h2f_axi_master_arready),                  //   input,     width = 1,                   .arready
		.h2f_RID                  (agilex_hps_h2f_axi_master_rid),                      //   input,     width = 4,                   .rid
		.h2f_RDATA                (agilex_hps_h2f_axi_master_rdata),                    //   input,   width = 128,                   .rdata
		.h2f_RRESP                (agilex_hps_h2f_axi_master_rresp),                    //   input,     width = 2,                   .rresp
		.h2f_RLAST                (agilex_hps_h2f_axi_master_rlast),                    //   input,     width = 1,                   .rlast
		.h2f_RVALID               (agilex_hps_h2f_axi_master_rvalid),                   //   input,     width = 1,                   .rvalid
		.h2f_RREADY               (agilex_hps_h2f_axi_master_rready),                   //  output,     width = 1,                   .rready
		.h2f_lw_axi_clk           (clk_100_out_clk_clk),                                //   input,     width = 1,   h2f_lw_axi_clock.clk
		.h2f_lw_axi_rst_n         (~rst_controller_reset_out_reset),                    //   input,     width = 1,   h2f_lw_axi_reset.reset_n
		.h2f_lw_AWID              (agilex_hps_h2f_lw_axi_master_awid),                  //  output,     width = 4,  h2f_lw_axi_master.awid
		.h2f_lw_AWADDR            (agilex_hps_h2f_lw_axi_master_awaddr),                //  output,    width = 21,                   .awaddr
		.h2f_lw_AWLEN             (agilex_hps_h2f_lw_axi_master_awlen),                 //  output,     width = 8,                   .awlen
		.h2f_lw_AWSIZE            (agilex_hps_h2f_lw_axi_master_awsize),                //  output,     width = 3,                   .awsize
		.h2f_lw_AWBURST           (agilex_hps_h2f_lw_axi_master_awburst),               //  output,     width = 2,                   .awburst
		.h2f_lw_AWLOCK            (agilex_hps_h2f_lw_axi_master_awlock),                //  output,     width = 1,                   .awlock
		.h2f_lw_AWCACHE           (agilex_hps_h2f_lw_axi_master_awcache),               //  output,     width = 4,                   .awcache
		.h2f_lw_AWPROT            (agilex_hps_h2f_lw_axi_master_awprot),                //  output,     width = 3,                   .awprot
		.h2f_lw_AWVALID           (agilex_hps_h2f_lw_axi_master_awvalid),               //  output,     width = 1,                   .awvalid
		.h2f_lw_AWREADY           (agilex_hps_h2f_lw_axi_master_awready),               //   input,     width = 1,                   .awready
		.h2f_lw_WDATA             (agilex_hps_h2f_lw_axi_master_wdata),                 //  output,    width = 32,                   .wdata
		.h2f_lw_WSTRB             (agilex_hps_h2f_lw_axi_master_wstrb),                 //  output,     width = 4,                   .wstrb
		.h2f_lw_WLAST             (agilex_hps_h2f_lw_axi_master_wlast),                 //  output,     width = 1,                   .wlast
		.h2f_lw_WVALID            (agilex_hps_h2f_lw_axi_master_wvalid),                //  output,     width = 1,                   .wvalid
		.h2f_lw_WREADY            (agilex_hps_h2f_lw_axi_master_wready),                //   input,     width = 1,                   .wready
		.h2f_lw_BID               (agilex_hps_h2f_lw_axi_master_bid),                   //   input,     width = 4,                   .bid
		.h2f_lw_BRESP             (agilex_hps_h2f_lw_axi_master_bresp),                 //   input,     width = 2,                   .bresp
		.h2f_lw_BVALID            (agilex_hps_h2f_lw_axi_master_bvalid),                //   input,     width = 1,                   .bvalid
		.h2f_lw_BREADY            (agilex_hps_h2f_lw_axi_master_bready),                //  output,     width = 1,                   .bready
		.h2f_lw_ARID              (agilex_hps_h2f_lw_axi_master_arid),                  //  output,     width = 4,                   .arid
		.h2f_lw_ARADDR            (agilex_hps_h2f_lw_axi_master_araddr),                //  output,    width = 21,                   .araddr
		.h2f_lw_ARLEN             (agilex_hps_h2f_lw_axi_master_arlen),                 //  output,     width = 8,                   .arlen
		.h2f_lw_ARSIZE            (agilex_hps_h2f_lw_axi_master_arsize),                //  output,     width = 3,                   .arsize
		.h2f_lw_ARBURST           (agilex_hps_h2f_lw_axi_master_arburst),               //  output,     width = 2,                   .arburst
		.h2f_lw_ARLOCK            (agilex_hps_h2f_lw_axi_master_arlock),                //  output,     width = 1,                   .arlock
		.h2f_lw_ARCACHE           (agilex_hps_h2f_lw_axi_master_arcache),               //  output,     width = 4,                   .arcache
		.h2f_lw_ARPROT            (agilex_hps_h2f_lw_axi_master_arprot),                //  output,     width = 3,                   .arprot
		.h2f_lw_ARVALID           (agilex_hps_h2f_lw_axi_master_arvalid),               //  output,     width = 1,                   .arvalid
		.h2f_lw_ARREADY           (agilex_hps_h2f_lw_axi_master_arready),               //   input,     width = 1,                   .arready
		.h2f_lw_RID               (agilex_hps_h2f_lw_axi_master_rid),                   //   input,     width = 4,                   .rid
		.h2f_lw_RDATA             (agilex_hps_h2f_lw_axi_master_rdata),                 //   input,    width = 32,                   .rdata
		.h2f_lw_RRESP             (agilex_hps_h2f_lw_axi_master_rresp),                 //   input,     width = 2,                   .rresp
		.h2f_lw_RLAST             (agilex_hps_h2f_lw_axi_master_rlast),                 //   input,     width = 1,                   .rlast
		.h2f_lw_RVALID            (agilex_hps_h2f_lw_axi_master_rvalid),                //   input,     width = 1,                   .rvalid
		.h2f_lw_RREADY            (agilex_hps_h2f_lw_axi_master_rready),                //  output,     width = 1,                   .rready
		.f2h_axi_clk              (clk_100_out_clk_clk),                                //   input,     width = 1,      f2h_axi_clock.clk
		.f2h_axi_rst_n            (~rst_controller_reset_out_reset),                    //   input,     width = 1,      f2h_axi_reset.reset_n
		.f2h_AWID                 (mm_interconnect_2_agilex_hps_f2h_axi_slave_awid),    //   input,     width = 5,      f2h_axi_slave.awid
		.f2h_AWADDR               (mm_interconnect_2_agilex_hps_f2h_axi_slave_awaddr),  //   input,    width = 32,                   .awaddr
		.f2h_AWLEN                (mm_interconnect_2_agilex_hps_f2h_axi_slave_awlen),   //   input,     width = 8,                   .awlen
		.f2h_AWSIZE               (mm_interconnect_2_agilex_hps_f2h_axi_slave_awsize),  //   input,     width = 3,                   .awsize
		.f2h_AWBURST              (mm_interconnect_2_agilex_hps_f2h_axi_slave_awburst), //   input,     width = 2,                   .awburst
		.f2h_AWLOCK               (mm_interconnect_2_agilex_hps_f2h_axi_slave_awlock),  //   input,     width = 1,                   .awlock
		.f2h_AWCACHE              (mm_interconnect_2_agilex_hps_f2h_axi_slave_awcache), //   input,     width = 4,                   .awcache
		.f2h_AWPROT               (mm_interconnect_2_agilex_hps_f2h_axi_slave_awprot),  //   input,     width = 3,                   .awprot
		.f2h_AWVALID              (mm_interconnect_2_agilex_hps_f2h_axi_slave_awvalid), //   input,     width = 1,                   .awvalid
		.f2h_AWREADY              (mm_interconnect_2_agilex_hps_f2h_axi_slave_awready), //  output,     width = 1,                   .awready
		.f2h_AWQOS                (mm_interconnect_2_agilex_hps_f2h_axi_slave_awqos),   //   input,     width = 4,                   .awqos
		.f2h_WDATA                (mm_interconnect_2_agilex_hps_f2h_axi_slave_wdata),   //   input,   width = 512,                   .wdata
		.f2h_WSTRB                (mm_interconnect_2_agilex_hps_f2h_axi_slave_wstrb),   //   input,    width = 64,                   .wstrb
		.f2h_WLAST                (mm_interconnect_2_agilex_hps_f2h_axi_slave_wlast),   //   input,     width = 1,                   .wlast
		.f2h_WVALID               (mm_interconnect_2_agilex_hps_f2h_axi_slave_wvalid),  //   input,     width = 1,                   .wvalid
		.f2h_WREADY               (mm_interconnect_2_agilex_hps_f2h_axi_slave_wready),  //  output,     width = 1,                   .wready
		.f2h_BID                  (mm_interconnect_2_agilex_hps_f2h_axi_slave_bid),     //  output,     width = 5,                   .bid
		.f2h_BRESP                (mm_interconnect_2_agilex_hps_f2h_axi_slave_bresp),   //  output,     width = 2,                   .bresp
		.f2h_BVALID               (mm_interconnect_2_agilex_hps_f2h_axi_slave_bvalid),  //  output,     width = 1,                   .bvalid
		.f2h_BREADY               (mm_interconnect_2_agilex_hps_f2h_axi_slave_bready),  //   input,     width = 1,                   .bready
		.f2h_ARID                 (mm_interconnect_2_agilex_hps_f2h_axi_slave_arid),    //   input,     width = 5,                   .arid
		.f2h_ARADDR               (mm_interconnect_2_agilex_hps_f2h_axi_slave_araddr),  //   input,    width = 32,                   .araddr
		.f2h_ARLEN                (mm_interconnect_2_agilex_hps_f2h_axi_slave_arlen),   //   input,     width = 8,                   .arlen
		.f2h_ARSIZE               (mm_interconnect_2_agilex_hps_f2h_axi_slave_arsize),  //   input,     width = 3,                   .arsize
		.f2h_ARBURST              (mm_interconnect_2_agilex_hps_f2h_axi_slave_arburst), //   input,     width = 2,                   .arburst
		.f2h_ARLOCK               (mm_interconnect_2_agilex_hps_f2h_axi_slave_arlock),  //   input,     width = 1,                   .arlock
		.f2h_ARCACHE              (mm_interconnect_2_agilex_hps_f2h_axi_slave_arcache), //   input,     width = 4,                   .arcache
		.f2h_ARPROT               (mm_interconnect_2_agilex_hps_f2h_axi_slave_arprot),  //   input,     width = 3,                   .arprot
		.f2h_ARVALID              (mm_interconnect_2_agilex_hps_f2h_axi_slave_arvalid), //   input,     width = 1,                   .arvalid
		.f2h_ARREADY              (mm_interconnect_2_agilex_hps_f2h_axi_slave_arready), //  output,     width = 1,                   .arready
		.f2h_ARQOS                (mm_interconnect_2_agilex_hps_f2h_axi_slave_arqos),   //   input,     width = 4,                   .arqos
		.f2h_RID                  (mm_interconnect_2_agilex_hps_f2h_axi_slave_rid),     //  output,     width = 5,                   .rid
		.f2h_RDATA                (mm_interconnect_2_agilex_hps_f2h_axi_slave_rdata),   //  output,   width = 512,                   .rdata
		.f2h_RRESP                (mm_interconnect_2_agilex_hps_f2h_axi_slave_rresp),   //  output,     width = 2,                   .rresp
		.f2h_RLAST                (mm_interconnect_2_agilex_hps_f2h_axi_slave_rlast),   //  output,     width = 1,                   .rlast
		.f2h_RVALID               (mm_interconnect_2_agilex_hps_f2h_axi_slave_rvalid),  //  output,     width = 1,                   .rvalid
		.f2h_RREADY               (mm_interconnect_2_agilex_hps_f2h_axi_slave_rready),  //   input,     width = 1,                   .rready
		.f2h_ARUSER               (mm_interconnect_2_agilex_hps_f2h_axi_slave_aruser),  //   input,    width = 23,                   .aruser
		.f2h_AWUSER               (mm_interconnect_2_agilex_hps_f2h_axi_slave_awuser),  //   input,    width = 23,                   .awuser
		.f2h_irq_p0               (agilex_hps_f2h_irq0_irq),                            //   input,    width = 32,           f2h_irq0.irq
		.f2h_irq_p1               (f2h_irq1_irq)                                        //   input,    width = 32,           f2h_irq1.irq
	);

	clk_100 clk_100 (
		.in_clk  (clk_100_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (clk_100_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	clk_125 clk_125 (
		.in_clk  (clk_125_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (clk_125_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	emif_calbus_0 emif_calbus_0 (
		.calbus_read_0          (emif_calbus_0_emif_calbus_0_calbus_read),    //  output,     width = 1,   emif_calbus_0.calbus_read
		.calbus_write_0         (emif_calbus_0_emif_calbus_0_calbus_write),   //  output,     width = 1,                .calbus_write
		.calbus_address_0       (emif_calbus_0_emif_calbus_0_calbus_address), //  output,    width = 20,                .calbus_address
		.calbus_wdata_0         (emif_calbus_0_emif_calbus_0_calbus_wdata),   //  output,    width = 32,                .calbus_wdata
		.calbus_rdata_0         (emif_hps_emif_calbus_calbus_rdata),          //   input,    width = 32,                .calbus_rdata
		.calbus_seq_param_tbl_0 (emif_hps_emif_calbus_calbus_seq_param_tbl),  //   input,  width = 4096,                .calbus_seq_param_tbl
		.calbus_clk             (emif_calbus_0_emif_calbus_clk_clk)           //  output,     width = 1, emif_calbus_clk.clk
	);

	emif_hps emif_hps (
		.pll_ref_clk          (emif_hps_pll_ref_clk_clk),                   //   input,     width = 1,     pll_ref_clk.clk
		.oct_rzqin            (emif_hps_oct_oct_rzqin),                     //   input,     width = 1,             oct.oct_rzqin
		.mem_ck               (emif_hps_mem_mem_ck),                        //  output,     width = 1,             mem.mem_ck
		.mem_ck_n             (emif_hps_mem_mem_ck_n),                      //  output,     width = 1,                .mem_ck_n
		.mem_a                (emif_hps_mem_mem_a),                         //  output,    width = 17,                .mem_a
		.mem_act_n            (emif_hps_mem_mem_act_n),                     //  output,     width = 1,                .mem_act_n
		.mem_ba               (emif_hps_mem_mem_ba),                        //  output,     width = 2,                .mem_ba
		.mem_bg               (emif_hps_mem_mem_bg),                        //  output,     width = 1,                .mem_bg
		.mem_cke              (emif_hps_mem_mem_cke),                       //  output,     width = 1,                .mem_cke
		.mem_cs_n             (emif_hps_mem_mem_cs_n),                      //  output,     width = 1,                .mem_cs_n
		.mem_odt              (emif_hps_mem_mem_odt),                       //  output,     width = 1,                .mem_odt
		.mem_reset_n          (emif_hps_mem_mem_reset_n),                   //  output,     width = 1,                .mem_reset_n
		.mem_par              (emif_hps_mem_mem_par),                       //  output,     width = 1,                .mem_par
		.mem_alert_n          (emif_hps_mem_mem_alert_n),                   //   input,     width = 1,                .mem_alert_n
		.mem_dqs              (emif_hps_mem_mem_dqs),                       //   inout,     width = 9,                .mem_dqs
		.mem_dqs_n            (emif_hps_mem_mem_dqs_n),                     //   inout,     width = 9,                .mem_dqs_n
		.mem_dq               (emif_hps_mem_mem_dq),                        //   inout,    width = 72,                .mem_dq
		.mem_dbi_n            (emif_hps_mem_mem_dbi_n),                     //   inout,     width = 9,                .mem_dbi_n
		.hps_to_emif          (agilex_hps_hps_emif_hps_to_emif),            //   input,  width = 4096,        hps_emif.hps_to_emif
		.emif_to_hps          (emif_hps_hps_emif_emif_to_hps),              //  output,  width = 4096,                .emif_to_hps
		.hps_to_emif_gp       (agilex_hps_hps_emif_gp_to_emif),             //   input,     width = 2,                .gp_to_emif
		.emif_to_hps_gp       (emif_hps_hps_emif_emif_to_gp),               //  output,     width = 1,                .emif_to_gp
		.calbus_read          (emif_calbus_0_emif_calbus_0_calbus_read),    //   input,     width = 1,     emif_calbus.calbus_read
		.calbus_write         (emif_calbus_0_emif_calbus_0_calbus_write),   //   input,     width = 1,                .calbus_write
		.calbus_address       (emif_calbus_0_emif_calbus_0_calbus_address), //   input,    width = 20,                .calbus_address
		.calbus_wdata         (emif_calbus_0_emif_calbus_0_calbus_wdata),   //   input,    width = 32,                .calbus_wdata
		.calbus_rdata         (emif_hps_emif_calbus_calbus_rdata),          //  output,    width = 32,                .calbus_rdata
		.calbus_seq_param_tbl (emif_hps_emif_calbus_calbus_seq_param_tbl),  //  output,  width = 4096,                .calbus_seq_param_tbl
		.calbus_clk           (emif_calbus_0_emif_calbus_clk_clk)           //   input,     width = 1, emif_calbus_clk.clk
	);

	fpga_m2ocm_pb fpga_m2ocm_pb (
		.clk              (clk_100_out_clk_clk),                              //   input,    width = 1,   clk.clk
		.reset            (rst_controller_reset_out_reset),                   //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_fpga_m2ocm_pb_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_fpga_m2ocm_pb_s0_readdata),      //  output,  width = 128,      .readdata
		.s0_readdatavalid (mm_interconnect_0_fpga_m2ocm_pb_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_fpga_m2ocm_pb_s0_burstcount),    //   input,    width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_0_fpga_m2ocm_pb_s0_writedata),     //   input,  width = 128,      .writedata
		.s0_address       (mm_interconnect_0_fpga_m2ocm_pb_s0_address),       //   input,   width = 18,      .address
		.s0_write         (mm_interconnect_0_fpga_m2ocm_pb_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_0_fpga_m2ocm_pb_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_fpga_m2ocm_pb_s0_byteenable),    //   input,   width = 16,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_fpga_m2ocm_pb_s0_debugaccess),   //   input,    width = 1,      .debugaccess
		.m0_waitrequest   (fpga_m2ocm_pb_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (fpga_m2ocm_pb_m0_readdata),                        //   input,  width = 128,      .readdata
		.m0_readdatavalid (fpga_m2ocm_pb_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (fpga_m2ocm_pb_m0_burstcount),                      //  output,    width = 1,      .burstcount
		.m0_writedata     (fpga_m2ocm_pb_m0_writedata),                       //  output,  width = 128,      .writedata
		.m0_address       (fpga_m2ocm_pb_m0_address),                         //  output,   width = 18,      .address
		.m0_write         (fpga_m2ocm_pb_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (fpga_m2ocm_pb_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (fpga_m2ocm_pb_m0_byteenable),                      //  output,   width = 16,      .byteenable
		.m0_debugaccess   (fpga_m2ocm_pb_m0_debugaccess)                      //  output,    width = 1,      .debugaccess
	);

	ocm ocm (
		.clk        (clk_100_out_clk_clk),                 //   input,    width = 1,   clk1.clk
		.address    (mm_interconnect_1_ocm_s1_address),    //   input,   width = 14,     s1.address
		.clken      (mm_interconnect_1_ocm_s1_clken),      //   input,    width = 1,       .clken
		.chipselect (mm_interconnect_1_ocm_s1_chipselect), //   input,    width = 1,       .chipselect
		.write      (mm_interconnect_1_ocm_s1_write),      //   input,    width = 1,       .write
		.readdata   (mm_interconnect_1_ocm_s1_readdata),   //  output,  width = 128,       .readdata
		.writedata  (mm_interconnect_1_ocm_s1_writedata),  //   input,  width = 128,       .writedata
		.byteenable (mm_interconnect_1_ocm_s1_byteenable), //   input,   width = 16,       .byteenable
		.reset      (rst_controller_reset_out_reset),      //   input,    width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)   //   input,    width = 1,       .reset_req
	);

	rst_in rst_in (
		.in_reset_n  (reset_reset_n),          //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (rst_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	user_rst_clkgate_0 user_rst_clkgate_0 (
		.ninit_done (ninit_done_ninit_done)  //  output,  width = 1, ninit_done.ninit_done
	);

	subsys_jtg_mst jtg_mst (
		.fpga_m_master_address       (jtg_mst_fpga_m_master_address),       //  output,  width = 32, fpga_m_master.address
		.fpga_m_master_readdata      (jtg_mst_fpga_m_master_readdata),      //   input,  width = 32,              .readdata
		.fpga_m_master_read          (jtg_mst_fpga_m_master_read),          //  output,   width = 1,              .read
		.fpga_m_master_write         (jtg_mst_fpga_m_master_write),         //  output,   width = 1,              .write
		.fpga_m_master_writedata     (jtg_mst_fpga_m_master_writedata),     //  output,  width = 32,              .writedata
		.fpga_m_master_waitrequest   (jtg_mst_fpga_m_master_waitrequest),   //   input,   width = 1,              .waitrequest
		.fpga_m_master_readdatavalid (jtg_mst_fpga_m_master_readdatavalid), //   input,   width = 1,              .readdatavalid
		.fpga_m_master_byteenable    (jtg_mst_fpga_m_master_byteenable),    //  output,   width = 4,              .byteenable
		.hps_m_master_address        (jtg_mst_hps_m_master_address),        //  output,  width = 32,  hps_m_master.address
		.hps_m_master_readdata       (jtg_mst_hps_m_master_readdata),       //   input,  width = 32,              .readdata
		.hps_m_master_read           (jtg_mst_hps_m_master_read),           //  output,   width = 1,              .read
		.hps_m_master_write          (jtg_mst_hps_m_master_write),          //  output,   width = 1,              .write
		.hps_m_master_writedata      (jtg_mst_hps_m_master_writedata),      //  output,  width = 32,              .writedata
		.hps_m_master_waitrequest    (jtg_mst_hps_m_master_waitrequest),    //   input,   width = 1,              .waitrequest
		.hps_m_master_readdatavalid  (jtg_mst_hps_m_master_readdatavalid),  //   input,   width = 1,              .readdatavalid
		.hps_m_master_byteenable     (jtg_mst_hps_m_master_byteenable),     //  output,   width = 4,              .byteenable
		.clk_clk                     (clk_100_out_clk_clk),                 //   input,   width = 1,           clk.clk
		.reset_reset_n               (~rst_controller_001_reset_out_reset)  //   input,   width = 1,         reset.reset_n
	);

	subsys_periph periph (
		.ILC_irq_irq                           (periph_ilc_irq_irq),                                 //   input,   width = 2,                        ILC_irq.irq
		.button_pio_external_connection_export (button_pio_external_connection_export),              //   input,   width = 4, button_pio_external_connection.export
		.button_pio_irq_irq                    (irq_mapper_receiver0_irq),                           //  output,   width = 1,                 button_pio_irq.irq
		.dipsw_pio_external_connection_export  (dipsw_pio_external_connection_export),               //   input,   width = 4,  dipsw_pio_external_connection.export
		.dipsw_pio_irq_irq                     (irq_mapper_receiver1_irq),                           //  output,   width = 1,                  dipsw_pio_irq.irq
		.led_pio_external_connection_in_port   (led_pio_external_connection_in_port),                //   input,   width = 3,    led_pio_external_connection.in_port
		.led_pio_external_connection_out_port  (led_pio_external_connection_out_port),               //  output,   width = 3,                               .out_port
		.pb_cpu_0_s0_waitrequest               (mm_interconnect_0_periph_pb_cpu_0_s0_waitrequest),   //  output,   width = 1,                    pb_cpu_0_s0.waitrequest
		.pb_cpu_0_s0_readdata                  (mm_interconnect_0_periph_pb_cpu_0_s0_readdata),      //  output,  width = 32,                               .readdata
		.pb_cpu_0_s0_readdatavalid             (mm_interconnect_0_periph_pb_cpu_0_s0_readdatavalid), //  output,   width = 1,                               .readdatavalid
		.pb_cpu_0_s0_burstcount                (mm_interconnect_0_periph_pb_cpu_0_s0_burstcount),    //   input,   width = 1,                               .burstcount
		.pb_cpu_0_s0_writedata                 (mm_interconnect_0_periph_pb_cpu_0_s0_writedata),     //   input,  width = 32,                               .writedata
		.pb_cpu_0_s0_address                   (mm_interconnect_0_periph_pb_cpu_0_s0_address),       //   input,   width = 9,                               .address
		.pb_cpu_0_s0_write                     (mm_interconnect_0_periph_pb_cpu_0_s0_write),         //   input,   width = 1,                               .write
		.pb_cpu_0_s0_read                      (mm_interconnect_0_periph_pb_cpu_0_s0_read),          //   input,   width = 1,                               .read
		.pb_cpu_0_s0_byteenable                (mm_interconnect_0_periph_pb_cpu_0_s0_byteenable),    //   input,   width = 4,                               .byteenable
		.pb_cpu_0_s0_debugaccess               (mm_interconnect_0_periph_pb_cpu_0_s0_debugaccess),   //   input,   width = 1,                               .debugaccess
		.clk_clk                               (clk_100_out_clk_clk),                                //   input,   width = 1,                            clk.clk
		.reset_reset_n                         (~rst_controller_001_reset_out_reset)                 //   input,   width = 1,                          reset.reset_n
	);

	subsys_sgmii subsys_sgmii_emac1 (
		.emac_gtx_clk_clk                (agilex_hps_emac1_gtx_clk_clk),                           //   input,   width = 1,           emac_gtx_clk.clk
		.emac_tx_clk_in_clk              (subsys_sgmii_emac1_emac_tx_clk_in_clk),                  //  output,   width = 1,         emac_tx_clk_in.clk
		.emac_rx_clk_in_clk              (subsys_sgmii_emac1_emac_rx_clk_in_clk),                  //  output,   width = 1,         emac_rx_clk_in.clk
		.emac_tx_reset_reset_n           (~rst_controller_002_reset_out_reset),                    //   input,   width = 1,          emac_tx_reset.reset_n
		.emac_rx_reset_reset_n           (agilex_hps_emac1_rx_reset_reset),                        //   input,   width = 1,          emac_rx_reset.reset_n
		.mdio_gmii_mdi_i                 (emac1_mdio_gmii_mdi_i),                                  //   input,   width = 1,                   mdio.gmii_mdi_i
		.mdio_gmii_mdo_o                 (emac1_mdio_gmii_mdo_o),                                  //  output,   width = 1,                       .gmii_mdo_o
		.mdio_gmii_mdo_o_e               (emac1_mdio_gmii_mdo_o_e),                                //  output,   width = 1,                       .gmii_mdo_o_e
		.splitter_emac_phy_txd_o         (agilex_hps_emac1_phy_txd_o),                             //   input,   width = 8,          splitter_emac.phy_txd_o
		.splitter_emac_phy_txen_o        (agilex_hps_emac1_phy_txen_o),                            //   input,   width = 1,                       .phy_txen_o
		.splitter_emac_phy_txer_o        (agilex_hps_emac1_phy_txer_o),                            //   input,   width = 1,                       .phy_txer_o
		.splitter_emac_phy_mac_speed_o   (agilex_hps_emac1_phy_mac_speed_o),                       //   input,   width = 2,                       .phy_mac_speed_o
		.splitter_emac_gmii_mdo_o        (agilex_hps_emac1_gmii_mdo_o),                            //   input,   width = 1,                       .gmii_mdo_o
		.splitter_emac_gmii_mdo_o_e      (agilex_hps_emac1_gmii_mdo_o_e),                          //   input,   width = 1,                       .gmii_mdo_o_e
		.splitter_emac_ptp_pps_o         (agilex_hps_emac1_ptp_pps_o),                             //   input,   width = 1,                       .ptp_pps_o
		.splitter_emac_phy_rxdv_i        (subsys_sgmii_emac1_splitter_emac_phy_rxdv_i),            //  output,   width = 1,                       .phy_rxdv_i
		.splitter_emac_phy_rxer_i        (subsys_sgmii_emac1_splitter_emac_phy_rxer_i),            //  output,   width = 1,                       .phy_rxer_i
		.splitter_emac_phy_rxd_i         (subsys_sgmii_emac1_splitter_emac_phy_rxd_i),             //  output,   width = 8,                       .phy_rxd_i
		.splitter_emac_phy_col_i         (subsys_sgmii_emac1_splitter_emac_phy_col_i),             //  output,   width = 1,                       .phy_col_i
		.splitter_emac_phy_crs_i         (subsys_sgmii_emac1_splitter_emac_phy_crs_i),             //  output,   width = 1,                       .phy_crs_i
		.splitter_emac_gmii_mdi_i        (subsys_sgmii_emac1_splitter_emac_gmii_mdi_i),            //  output,   width = 1,                       .gmii_mdi_i
		.splitter_emac_ptp_aux_ts_trig_i (subsys_sgmii_emac1_splitter_emac_ptp_aux_ts_trig_i),     //  output,   width = 1,                       .ptp_aux_ts_trig_i
		.splitter_emac_ptp_tstmp_data    (agilex_hps_emac1_ptp_tstmp_data),                        //   input,   width = 1,                       .ptp_tstmp_data
		.splitter_emac_ptp_tstmp_en      (agilex_hps_emac1_ptp_tstmp_en),                          //   input,   width = 1,                       .ptp_tstmp_en
		.ptp_ptp_aux_ts_trig_i           (emac1_ptp_ptp_aux_ts_trig_i),                            //   input,   width = 1,                    ptp.ptp_aux_ts_trig_i
		.ptp_ptp_pps_o                   (emac1_ptp_ptp_pps_o),                                    //  output,   width = 1,                       .ptp_pps_o
		.ptp_ptp_tstmp_data              (emac1_ptp_ptp_tstmp_data),                               //  output,   width = 1,                       .ptp_tstmp_data
		.ptp_ptp_tstmp_en                (emac1_ptp_ptp_tstmp_en),                                 //  output,   width = 1,                       .ptp_tstmp_en
		.sgmii_status_set_10             (emac1_sgmii_status_set_10),                              //  output,   width = 1,           sgmii_status.set_10
		.sgmii_status_set_1000           (emac1_sgmii_status_set_1000),                            //  output,   width = 1,                       .set_1000
		.sgmii_status_set_100            (emac1_sgmii_status_set_100),                             //  output,   width = 1,                       .set_100
		.sgmii_status_hd_ena             (emac1_sgmii_status_hd_ena),                              //  output,   width = 1,                       .hd_ena
		.status_led_crs                  (emac1_status_led_crs),                                   //  output,   width = 1,             status_led.crs
		.status_led_link                 (emac1_status_led_link),                                  //  output,   width = 1,                       .link
		.status_led_panel_link           (emac1_status_led_panel_link),                            //  output,   width = 1,                       .panel_link
		.status_led_col                  (emac1_status_led_col),                                   //  output,   width = 1,                       .col
		.status_led_an                   (emac1_status_led_an),                                    //  output,   width = 1,                       .an
		.status_led_char_err             (emac1_status_led_char_err),                              //  output,   width = 1,                       .char_err
		.status_led_disp_err             (emac1_status_led_disp_err),                              //  output,   width = 1,                       .disp_err
		.serdes_control_export           (emac1_serdes_control_export),                            //  output,   width = 1,         serdes_control.export
		.lvds_tx_pll_locked_export       (emac1_lvds_tx_pll_locked_export),                        //  output,   width = 1,     lvds_tx_pll_locked.export
		.serial_connection_rxp_0         (emac1_serial_rxp_0),                                     //   input,   width = 1,      serial_connection.rxp_0
		.serial_connection_rxn_0         (emac1_serial_rxn_0),                                     //   input,   width = 1,                       .rxn_0
		.serial_connection_txp_0         (emac1_serial_txp_0),                                     //  output,   width = 1,                       .txp_0
		.serial_connection_txn_0         (emac1_serial_txn_0),                                     //  output,   width = 1,                       .txn_0
		.clk_125_clk                     (clk_125_out_clk_clk),                                    //   input,   width = 1,                clk_125.clk
		.csr_waitrequest                 (mm_interconnect_0_subsys_sgmii_emac1_csr_waitrequest),   //  output,   width = 1,                    csr.waitrequest
		.csr_readdata                    (mm_interconnect_0_subsys_sgmii_emac1_csr_readdata),      //  output,  width = 32,                       .readdata
		.csr_readdatavalid               (mm_interconnect_0_subsys_sgmii_emac1_csr_readdatavalid), //  output,   width = 1,                       .readdatavalid
		.csr_burstcount                  (mm_interconnect_0_subsys_sgmii_emac1_csr_burstcount),    //   input,   width = 1,                       .burstcount
		.csr_writedata                   (mm_interconnect_0_subsys_sgmii_emac1_csr_writedata),     //   input,  width = 32,                       .writedata
		.csr_address                     (mm_interconnect_0_subsys_sgmii_emac1_csr_address),       //   input,   width = 7,                       .address
		.csr_write                       (mm_interconnect_0_subsys_sgmii_emac1_csr_write),         //   input,   width = 1,                       .write
		.csr_read                        (mm_interconnect_0_subsys_sgmii_emac1_csr_read),          //   input,   width = 1,                       .read
		.csr_byteenable                  (mm_interconnect_0_subsys_sgmii_emac1_csr_byteenable),    //   input,   width = 4,                       .byteenable
		.csr_debugaccess                 (mm_interconnect_0_subsys_sgmii_emac1_csr_debugaccess),   //   input,   width = 1,                       .debugaccess
		.csr_clk_clk                     (clk_100_out_clk_clk),                                    //   input,   width = 1,                csr_clk.clk
		.sgmii_debug_status_pio_export   (emac1_sgmii_debug_status_pio_export),                    //   input,  width = 13, sgmii_debug_status_pio.export
		.rst_in_reset_n                  (~rst_controller_001_reset_out_reset)                     //   input,   width = 1,                 rst_in.reset_n
	);

	qsys_top_altera_mm_interconnect_1920_j33jr5i mm_interconnect_0 (
		.jtg_mst_fpga_m_master_address                           (jtg_mst_fpga_m_master_address),                          //   input,   width = 32,                             jtg_mst_fpga_m_master.address
		.jtg_mst_fpga_m_master_waitrequest                       (jtg_mst_fpga_m_master_waitrequest),                      //  output,    width = 1,                                                  .waitrequest
		.jtg_mst_fpga_m_master_byteenable                        (jtg_mst_fpga_m_master_byteenable),                       //   input,    width = 4,                                                  .byteenable
		.jtg_mst_fpga_m_master_read                              (jtg_mst_fpga_m_master_read),                             //   input,    width = 1,                                                  .read
		.jtg_mst_fpga_m_master_readdata                          (jtg_mst_fpga_m_master_readdata),                         //  output,   width = 32,                                                  .readdata
		.jtg_mst_fpga_m_master_readdatavalid                     (jtg_mst_fpga_m_master_readdatavalid),                    //  output,    width = 1,                                                  .readdatavalid
		.jtg_mst_fpga_m_master_write                             (jtg_mst_fpga_m_master_write),                            //   input,    width = 1,                                                  .write
		.jtg_mst_fpga_m_master_writedata                         (jtg_mst_fpga_m_master_writedata),                        //   input,   width = 32,                                                  .writedata
		.agilex_hps_h2f_lw_axi_master_awid                       (agilex_hps_h2f_lw_axi_master_awid),                      //   input,    width = 4,                      agilex_hps_h2f_lw_axi_master.awid
		.agilex_hps_h2f_lw_axi_master_awaddr                     (agilex_hps_h2f_lw_axi_master_awaddr),                    //   input,   width = 21,                                                  .awaddr
		.agilex_hps_h2f_lw_axi_master_awlen                      (agilex_hps_h2f_lw_axi_master_awlen),                     //   input,    width = 8,                                                  .awlen
		.agilex_hps_h2f_lw_axi_master_awsize                     (agilex_hps_h2f_lw_axi_master_awsize),                    //   input,    width = 3,                                                  .awsize
		.agilex_hps_h2f_lw_axi_master_awburst                    (agilex_hps_h2f_lw_axi_master_awburst),                   //   input,    width = 2,                                                  .awburst
		.agilex_hps_h2f_lw_axi_master_awlock                     (agilex_hps_h2f_lw_axi_master_awlock),                    //   input,    width = 1,                                                  .awlock
		.agilex_hps_h2f_lw_axi_master_awcache                    (agilex_hps_h2f_lw_axi_master_awcache),                   //   input,    width = 4,                                                  .awcache
		.agilex_hps_h2f_lw_axi_master_awprot                     (agilex_hps_h2f_lw_axi_master_awprot),                    //   input,    width = 3,                                                  .awprot
		.agilex_hps_h2f_lw_axi_master_awvalid                    (agilex_hps_h2f_lw_axi_master_awvalid),                   //   input,    width = 1,                                                  .awvalid
		.agilex_hps_h2f_lw_axi_master_awready                    (agilex_hps_h2f_lw_axi_master_awready),                   //  output,    width = 1,                                                  .awready
		.agilex_hps_h2f_lw_axi_master_wdata                      (agilex_hps_h2f_lw_axi_master_wdata),                     //   input,   width = 32,                                                  .wdata
		.agilex_hps_h2f_lw_axi_master_wstrb                      (agilex_hps_h2f_lw_axi_master_wstrb),                     //   input,    width = 4,                                                  .wstrb
		.agilex_hps_h2f_lw_axi_master_wlast                      (agilex_hps_h2f_lw_axi_master_wlast),                     //   input,    width = 1,                                                  .wlast
		.agilex_hps_h2f_lw_axi_master_wvalid                     (agilex_hps_h2f_lw_axi_master_wvalid),                    //   input,    width = 1,                                                  .wvalid
		.agilex_hps_h2f_lw_axi_master_wready                     (agilex_hps_h2f_lw_axi_master_wready),                    //  output,    width = 1,                                                  .wready
		.agilex_hps_h2f_lw_axi_master_bid                        (agilex_hps_h2f_lw_axi_master_bid),                       //  output,    width = 4,                                                  .bid
		.agilex_hps_h2f_lw_axi_master_bresp                      (agilex_hps_h2f_lw_axi_master_bresp),                     //  output,    width = 2,                                                  .bresp
		.agilex_hps_h2f_lw_axi_master_bvalid                     (agilex_hps_h2f_lw_axi_master_bvalid),                    //  output,    width = 1,                                                  .bvalid
		.agilex_hps_h2f_lw_axi_master_bready                     (agilex_hps_h2f_lw_axi_master_bready),                    //   input,    width = 1,                                                  .bready
		.agilex_hps_h2f_lw_axi_master_arid                       (agilex_hps_h2f_lw_axi_master_arid),                      //   input,    width = 4,                                                  .arid
		.agilex_hps_h2f_lw_axi_master_araddr                     (agilex_hps_h2f_lw_axi_master_araddr),                    //   input,   width = 21,                                                  .araddr
		.agilex_hps_h2f_lw_axi_master_arlen                      (agilex_hps_h2f_lw_axi_master_arlen),                     //   input,    width = 8,                                                  .arlen
		.agilex_hps_h2f_lw_axi_master_arsize                     (agilex_hps_h2f_lw_axi_master_arsize),                    //   input,    width = 3,                                                  .arsize
		.agilex_hps_h2f_lw_axi_master_arburst                    (agilex_hps_h2f_lw_axi_master_arburst),                   //   input,    width = 2,                                                  .arburst
		.agilex_hps_h2f_lw_axi_master_arlock                     (agilex_hps_h2f_lw_axi_master_arlock),                    //   input,    width = 1,                                                  .arlock
		.agilex_hps_h2f_lw_axi_master_arcache                    (agilex_hps_h2f_lw_axi_master_arcache),                   //   input,    width = 4,                                                  .arcache
		.agilex_hps_h2f_lw_axi_master_arprot                     (agilex_hps_h2f_lw_axi_master_arprot),                    //   input,    width = 3,                                                  .arprot
		.agilex_hps_h2f_lw_axi_master_arvalid                    (agilex_hps_h2f_lw_axi_master_arvalid),                   //   input,    width = 1,                                                  .arvalid
		.agilex_hps_h2f_lw_axi_master_arready                    (agilex_hps_h2f_lw_axi_master_arready),                   //  output,    width = 1,                                                  .arready
		.agilex_hps_h2f_lw_axi_master_rid                        (agilex_hps_h2f_lw_axi_master_rid),                       //  output,    width = 4,                                                  .rid
		.agilex_hps_h2f_lw_axi_master_rdata                      (agilex_hps_h2f_lw_axi_master_rdata),                     //  output,   width = 32,                                                  .rdata
		.agilex_hps_h2f_lw_axi_master_rresp                      (agilex_hps_h2f_lw_axi_master_rresp),                     //  output,    width = 2,                                                  .rresp
		.agilex_hps_h2f_lw_axi_master_rlast                      (agilex_hps_h2f_lw_axi_master_rlast),                     //  output,    width = 1,                                                  .rlast
		.agilex_hps_h2f_lw_axi_master_rvalid                     (agilex_hps_h2f_lw_axi_master_rvalid),                    //  output,    width = 1,                                                  .rvalid
		.agilex_hps_h2f_lw_axi_master_rready                     (agilex_hps_h2f_lw_axi_master_rready),                    //   input,    width = 1,                                                  .rready
		.subsys_sgmii_emac1_csr_address                          (mm_interconnect_0_subsys_sgmii_emac1_csr_address),       //  output,    width = 7,                            subsys_sgmii_emac1_csr.address
		.subsys_sgmii_emac1_csr_write                            (mm_interconnect_0_subsys_sgmii_emac1_csr_write),         //  output,    width = 1,                                                  .write
		.subsys_sgmii_emac1_csr_read                             (mm_interconnect_0_subsys_sgmii_emac1_csr_read),          //  output,    width = 1,                                                  .read
		.subsys_sgmii_emac1_csr_readdata                         (mm_interconnect_0_subsys_sgmii_emac1_csr_readdata),      //   input,   width = 32,                                                  .readdata
		.subsys_sgmii_emac1_csr_writedata                        (mm_interconnect_0_subsys_sgmii_emac1_csr_writedata),     //  output,   width = 32,                                                  .writedata
		.subsys_sgmii_emac1_csr_burstcount                       (mm_interconnect_0_subsys_sgmii_emac1_csr_burstcount),    //  output,    width = 1,                                                  .burstcount
		.subsys_sgmii_emac1_csr_byteenable                       (mm_interconnect_0_subsys_sgmii_emac1_csr_byteenable),    //  output,    width = 4,                                                  .byteenable
		.subsys_sgmii_emac1_csr_readdatavalid                    (mm_interconnect_0_subsys_sgmii_emac1_csr_readdatavalid), //   input,    width = 1,                                                  .readdatavalid
		.subsys_sgmii_emac1_csr_waitrequest                      (mm_interconnect_0_subsys_sgmii_emac1_csr_waitrequest),   //   input,    width = 1,                                                  .waitrequest
		.subsys_sgmii_emac1_csr_debugaccess                      (mm_interconnect_0_subsys_sgmii_emac1_csr_debugaccess),   //  output,    width = 1,                                                  .debugaccess
		.periph_pb_cpu_0_s0_address                              (mm_interconnect_0_periph_pb_cpu_0_s0_address),           //  output,    width = 9,                                periph_pb_cpu_0_s0.address
		.periph_pb_cpu_0_s0_write                                (mm_interconnect_0_periph_pb_cpu_0_s0_write),             //  output,    width = 1,                                                  .write
		.periph_pb_cpu_0_s0_read                                 (mm_interconnect_0_periph_pb_cpu_0_s0_read),              //  output,    width = 1,                                                  .read
		.periph_pb_cpu_0_s0_readdata                             (mm_interconnect_0_periph_pb_cpu_0_s0_readdata),          //   input,   width = 32,                                                  .readdata
		.periph_pb_cpu_0_s0_writedata                            (mm_interconnect_0_periph_pb_cpu_0_s0_writedata),         //  output,   width = 32,                                                  .writedata
		.periph_pb_cpu_0_s0_burstcount                           (mm_interconnect_0_periph_pb_cpu_0_s0_burstcount),        //  output,    width = 1,                                                  .burstcount
		.periph_pb_cpu_0_s0_byteenable                           (mm_interconnect_0_periph_pb_cpu_0_s0_byteenable),        //  output,    width = 4,                                                  .byteenable
		.periph_pb_cpu_0_s0_readdatavalid                        (mm_interconnect_0_periph_pb_cpu_0_s0_readdatavalid),     //   input,    width = 1,                                                  .readdatavalid
		.periph_pb_cpu_0_s0_waitrequest                          (mm_interconnect_0_periph_pb_cpu_0_s0_waitrequest),       //   input,    width = 1,                                                  .waitrequest
		.periph_pb_cpu_0_s0_debugaccess                          (mm_interconnect_0_periph_pb_cpu_0_s0_debugaccess),       //  output,    width = 1,                                                  .debugaccess
		.fpga_m2ocm_pb_s0_address                                (mm_interconnect_0_fpga_m2ocm_pb_s0_address),             //  output,   width = 18,                                  fpga_m2ocm_pb_s0.address
		.fpga_m2ocm_pb_s0_write                                  (mm_interconnect_0_fpga_m2ocm_pb_s0_write),               //  output,    width = 1,                                                  .write
		.fpga_m2ocm_pb_s0_read                                   (mm_interconnect_0_fpga_m2ocm_pb_s0_read),                //  output,    width = 1,                                                  .read
		.fpga_m2ocm_pb_s0_readdata                               (mm_interconnect_0_fpga_m2ocm_pb_s0_readdata),            //   input,  width = 128,                                                  .readdata
		.fpga_m2ocm_pb_s0_writedata                              (mm_interconnect_0_fpga_m2ocm_pb_s0_writedata),           //  output,  width = 128,                                                  .writedata
		.fpga_m2ocm_pb_s0_burstcount                             (mm_interconnect_0_fpga_m2ocm_pb_s0_burstcount),          //  output,    width = 1,                                                  .burstcount
		.fpga_m2ocm_pb_s0_byteenable                             (mm_interconnect_0_fpga_m2ocm_pb_s0_byteenable),          //  output,   width = 16,                                                  .byteenable
		.fpga_m2ocm_pb_s0_readdatavalid                          (mm_interconnect_0_fpga_m2ocm_pb_s0_readdatavalid),       //   input,    width = 1,                                                  .readdatavalid
		.fpga_m2ocm_pb_s0_waitrequest                            (mm_interconnect_0_fpga_m2ocm_pb_s0_waitrequest),         //   input,    width = 1,                                                  .waitrequest
		.fpga_m2ocm_pb_s0_debugaccess                            (mm_interconnect_0_fpga_m2ocm_pb_s0_debugaccess),         //  output,    width = 1,                                                  .debugaccess
		.jtg_mst_reset_reset_bridge_in_reset_reset               (rst_controller_001_reset_out_reset),                     //   input,    width = 1,               jtg_mst_reset_reset_bridge_in_reset.reset
		.agilex_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                     //   input,    width = 1, agilex_hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                     (clk_100_out_clk_clk)                                     //   input,    width = 1,                                   clk_100_out_clk.clk
	);

	qsys_top_altera_mm_interconnect_1920_dla3g6i mm_interconnect_1 (
		.agilex_hps_h2f_axi_master_awid                                             (agilex_hps_h2f_axi_master_awid),      //   input,    width = 4,                                            agilex_hps_h2f_axi_master.awid
		.agilex_hps_h2f_axi_master_awaddr                                           (agilex_hps_h2f_axi_master_awaddr),    //   input,   width = 32,                                                                     .awaddr
		.agilex_hps_h2f_axi_master_awlen                                            (agilex_hps_h2f_axi_master_awlen),     //   input,    width = 8,                                                                     .awlen
		.agilex_hps_h2f_axi_master_awsize                                           (agilex_hps_h2f_axi_master_awsize),    //   input,    width = 3,                                                                     .awsize
		.agilex_hps_h2f_axi_master_awburst                                          (agilex_hps_h2f_axi_master_awburst),   //   input,    width = 2,                                                                     .awburst
		.agilex_hps_h2f_axi_master_awlock                                           (agilex_hps_h2f_axi_master_awlock),    //   input,    width = 1,                                                                     .awlock
		.agilex_hps_h2f_axi_master_awcache                                          (agilex_hps_h2f_axi_master_awcache),   //   input,    width = 4,                                                                     .awcache
		.agilex_hps_h2f_axi_master_awprot                                           (agilex_hps_h2f_axi_master_awprot),    //   input,    width = 3,                                                                     .awprot
		.agilex_hps_h2f_axi_master_awvalid                                          (agilex_hps_h2f_axi_master_awvalid),   //   input,    width = 1,                                                                     .awvalid
		.agilex_hps_h2f_axi_master_awready                                          (agilex_hps_h2f_axi_master_awready),   //  output,    width = 1,                                                                     .awready
		.agilex_hps_h2f_axi_master_wdata                                            (agilex_hps_h2f_axi_master_wdata),     //   input,  width = 128,                                                                     .wdata
		.agilex_hps_h2f_axi_master_wstrb                                            (agilex_hps_h2f_axi_master_wstrb),     //   input,   width = 16,                                                                     .wstrb
		.agilex_hps_h2f_axi_master_wlast                                            (agilex_hps_h2f_axi_master_wlast),     //   input,    width = 1,                                                                     .wlast
		.agilex_hps_h2f_axi_master_wvalid                                           (agilex_hps_h2f_axi_master_wvalid),    //   input,    width = 1,                                                                     .wvalid
		.agilex_hps_h2f_axi_master_wready                                           (agilex_hps_h2f_axi_master_wready),    //  output,    width = 1,                                                                     .wready
		.agilex_hps_h2f_axi_master_bid                                              (agilex_hps_h2f_axi_master_bid),       //  output,    width = 4,                                                                     .bid
		.agilex_hps_h2f_axi_master_bresp                                            (agilex_hps_h2f_axi_master_bresp),     //  output,    width = 2,                                                                     .bresp
		.agilex_hps_h2f_axi_master_bvalid                                           (agilex_hps_h2f_axi_master_bvalid),    //  output,    width = 1,                                                                     .bvalid
		.agilex_hps_h2f_axi_master_bready                                           (agilex_hps_h2f_axi_master_bready),    //   input,    width = 1,                                                                     .bready
		.agilex_hps_h2f_axi_master_arid                                             (agilex_hps_h2f_axi_master_arid),      //   input,    width = 4,                                                                     .arid
		.agilex_hps_h2f_axi_master_araddr                                           (agilex_hps_h2f_axi_master_araddr),    //   input,   width = 32,                                                                     .araddr
		.agilex_hps_h2f_axi_master_arlen                                            (agilex_hps_h2f_axi_master_arlen),     //   input,    width = 8,                                                                     .arlen
		.agilex_hps_h2f_axi_master_arsize                                           (agilex_hps_h2f_axi_master_arsize),    //   input,    width = 3,                                                                     .arsize
		.agilex_hps_h2f_axi_master_arburst                                          (agilex_hps_h2f_axi_master_arburst),   //   input,    width = 2,                                                                     .arburst
		.agilex_hps_h2f_axi_master_arlock                                           (agilex_hps_h2f_axi_master_arlock),    //   input,    width = 1,                                                                     .arlock
		.agilex_hps_h2f_axi_master_arcache                                          (agilex_hps_h2f_axi_master_arcache),   //   input,    width = 4,                                                                     .arcache
		.agilex_hps_h2f_axi_master_arprot                                           (agilex_hps_h2f_axi_master_arprot),    //   input,    width = 3,                                                                     .arprot
		.agilex_hps_h2f_axi_master_arvalid                                          (agilex_hps_h2f_axi_master_arvalid),   //   input,    width = 1,                                                                     .arvalid
		.agilex_hps_h2f_axi_master_arready                                          (agilex_hps_h2f_axi_master_arready),   //  output,    width = 1,                                                                     .arready
		.agilex_hps_h2f_axi_master_rid                                              (agilex_hps_h2f_axi_master_rid),       //  output,    width = 4,                                                                     .rid
		.agilex_hps_h2f_axi_master_rdata                                            (agilex_hps_h2f_axi_master_rdata),     //  output,  width = 128,                                                                     .rdata
		.agilex_hps_h2f_axi_master_rresp                                            (agilex_hps_h2f_axi_master_rresp),     //  output,    width = 2,                                                                     .rresp
		.agilex_hps_h2f_axi_master_rlast                                            (agilex_hps_h2f_axi_master_rlast),     //  output,    width = 1,                                                                     .rlast
		.agilex_hps_h2f_axi_master_rvalid                                           (agilex_hps_h2f_axi_master_rvalid),    //  output,    width = 1,                                                                     .rvalid
		.agilex_hps_h2f_axi_master_rready                                           (agilex_hps_h2f_axi_master_rready),    //   input,    width = 1,                                                                     .rready
		.fpga_m2ocm_pb_m0_address                                                   (fpga_m2ocm_pb_m0_address),            //   input,   width = 18,                                                     fpga_m2ocm_pb_m0.address
		.fpga_m2ocm_pb_m0_waitrequest                                               (fpga_m2ocm_pb_m0_waitrequest),        //  output,    width = 1,                                                                     .waitrequest
		.fpga_m2ocm_pb_m0_burstcount                                                (fpga_m2ocm_pb_m0_burstcount),         //   input,    width = 1,                                                                     .burstcount
		.fpga_m2ocm_pb_m0_byteenable                                                (fpga_m2ocm_pb_m0_byteenable),         //   input,   width = 16,                                                                     .byteenable
		.fpga_m2ocm_pb_m0_read                                                      (fpga_m2ocm_pb_m0_read),               //   input,    width = 1,                                                                     .read
		.fpga_m2ocm_pb_m0_readdata                                                  (fpga_m2ocm_pb_m0_readdata),           //  output,  width = 128,                                                                     .readdata
		.fpga_m2ocm_pb_m0_readdatavalid                                             (fpga_m2ocm_pb_m0_readdatavalid),      //  output,    width = 1,                                                                     .readdatavalid
		.fpga_m2ocm_pb_m0_write                                                     (fpga_m2ocm_pb_m0_write),              //   input,    width = 1,                                                                     .write
		.fpga_m2ocm_pb_m0_writedata                                                 (fpga_m2ocm_pb_m0_writedata),          //   input,  width = 128,                                                                     .writedata
		.fpga_m2ocm_pb_m0_debugaccess                                               (fpga_m2ocm_pb_m0_debugaccess),        //   input,    width = 1,                                                                     .debugaccess
		.ocm_s1_address                                                             (mm_interconnect_1_ocm_s1_address),    //  output,   width = 14,                                                               ocm_s1.address
		.ocm_s1_write                                                               (mm_interconnect_1_ocm_s1_write),      //  output,    width = 1,                                                                     .write
		.ocm_s1_readdata                                                            (mm_interconnect_1_ocm_s1_readdata),   //   input,  width = 128,                                                                     .readdata
		.ocm_s1_writedata                                                           (mm_interconnect_1_ocm_s1_writedata),  //  output,  width = 128,                                                                     .writedata
		.ocm_s1_byteenable                                                          (mm_interconnect_1_ocm_s1_byteenable), //  output,   width = 16,                                                                     .byteenable
		.ocm_s1_chipselect                                                          (mm_interconnect_1_ocm_s1_chipselect), //  output,    width = 1,                                                                     .chipselect
		.ocm_s1_clken                                                               (mm_interconnect_1_ocm_s1_clken),      //  output,    width = 1,                                                                     .clken
		.agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset                       (rst_controller_001_reset_out_reset),  //   input,    width = 1,                       agilex_hps_h2f_axi_reset_reset_bridge_in_reset.reset
		.agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),  //   input,    width = 1, agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                                        (clk_100_out_clk_clk)                  //   input,    width = 1,                                                      clk_100_out_clk.clk
	);

	qsys_top_altera_mm_interconnect_1920_7su3sya mm_interconnect_2 (
		.jtg_mst_hps_m_master_address                         (jtg_mst_hps_m_master_address),                       //   input,   width = 32,                           jtg_mst_hps_m_master.address
		.jtg_mst_hps_m_master_waitrequest                     (jtg_mst_hps_m_master_waitrequest),                   //  output,    width = 1,                                               .waitrequest
		.jtg_mst_hps_m_master_byteenable                      (jtg_mst_hps_m_master_byteenable),                    //   input,    width = 4,                                               .byteenable
		.jtg_mst_hps_m_master_read                            (jtg_mst_hps_m_master_read),                          //   input,    width = 1,                                               .read
		.jtg_mst_hps_m_master_readdata                        (jtg_mst_hps_m_master_readdata),                      //  output,   width = 32,                                               .readdata
		.jtg_mst_hps_m_master_readdatavalid                   (jtg_mst_hps_m_master_readdatavalid),                 //  output,    width = 1,                                               .readdatavalid
		.jtg_mst_hps_m_master_write                           (jtg_mst_hps_m_master_write),                         //   input,    width = 1,                                               .write
		.jtg_mst_hps_m_master_writedata                       (jtg_mst_hps_m_master_writedata),                     //   input,   width = 32,                                               .writedata
		.agilex_hps_f2h_axi_slave_awid                        (mm_interconnect_2_agilex_hps_f2h_axi_slave_awid),    //  output,    width = 5,                       agilex_hps_f2h_axi_slave.awid
		.agilex_hps_f2h_axi_slave_awaddr                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_awaddr),  //  output,   width = 32,                                               .awaddr
		.agilex_hps_f2h_axi_slave_awlen                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_awlen),   //  output,    width = 8,                                               .awlen
		.agilex_hps_f2h_axi_slave_awsize                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_awsize),  //  output,    width = 3,                                               .awsize
		.agilex_hps_f2h_axi_slave_awburst                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_awburst), //  output,    width = 2,                                               .awburst
		.agilex_hps_f2h_axi_slave_awlock                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_awlock),  //  output,    width = 1,                                               .awlock
		.agilex_hps_f2h_axi_slave_awcache                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_awcache), //  output,    width = 4,                                               .awcache
		.agilex_hps_f2h_axi_slave_awprot                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_awprot),  //  output,    width = 3,                                               .awprot
		.agilex_hps_f2h_axi_slave_awuser                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_awuser),  //  output,   width = 23,                                               .awuser
		.agilex_hps_f2h_axi_slave_awqos                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_awqos),   //  output,    width = 4,                                               .awqos
		.agilex_hps_f2h_axi_slave_awvalid                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_awvalid), //  output,    width = 1,                                               .awvalid
		.agilex_hps_f2h_axi_slave_awready                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_awready), //   input,    width = 1,                                               .awready
		.agilex_hps_f2h_axi_slave_wdata                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_wdata),   //  output,  width = 512,                                               .wdata
		.agilex_hps_f2h_axi_slave_wstrb                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_wstrb),   //  output,   width = 64,                                               .wstrb
		.agilex_hps_f2h_axi_slave_wlast                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_wlast),   //  output,    width = 1,                                               .wlast
		.agilex_hps_f2h_axi_slave_wvalid                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_wvalid),  //  output,    width = 1,                                               .wvalid
		.agilex_hps_f2h_axi_slave_wready                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_wready),  //   input,    width = 1,                                               .wready
		.agilex_hps_f2h_axi_slave_bid                         (mm_interconnect_2_agilex_hps_f2h_axi_slave_bid),     //   input,    width = 5,                                               .bid
		.agilex_hps_f2h_axi_slave_bresp                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_bresp),   //   input,    width = 2,                                               .bresp
		.agilex_hps_f2h_axi_slave_bvalid                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_bvalid),  //   input,    width = 1,                                               .bvalid
		.agilex_hps_f2h_axi_slave_bready                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_bready),  //  output,    width = 1,                                               .bready
		.agilex_hps_f2h_axi_slave_arid                        (mm_interconnect_2_agilex_hps_f2h_axi_slave_arid),    //  output,    width = 5,                                               .arid
		.agilex_hps_f2h_axi_slave_araddr                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_araddr),  //  output,   width = 32,                                               .araddr
		.agilex_hps_f2h_axi_slave_arlen                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_arlen),   //  output,    width = 8,                                               .arlen
		.agilex_hps_f2h_axi_slave_arsize                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_arsize),  //  output,    width = 3,                                               .arsize
		.agilex_hps_f2h_axi_slave_arburst                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_arburst), //  output,    width = 2,                                               .arburst
		.agilex_hps_f2h_axi_slave_arlock                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_arlock),  //  output,    width = 1,                                               .arlock
		.agilex_hps_f2h_axi_slave_arcache                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_arcache), //  output,    width = 4,                                               .arcache
		.agilex_hps_f2h_axi_slave_arprot                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_arprot),  //  output,    width = 3,                                               .arprot
		.agilex_hps_f2h_axi_slave_aruser                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_aruser),  //  output,   width = 23,                                               .aruser
		.agilex_hps_f2h_axi_slave_arqos                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_arqos),   //  output,    width = 4,                                               .arqos
		.agilex_hps_f2h_axi_slave_arvalid                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_arvalid), //  output,    width = 1,                                               .arvalid
		.agilex_hps_f2h_axi_slave_arready                     (mm_interconnect_2_agilex_hps_f2h_axi_slave_arready), //   input,    width = 1,                                               .arready
		.agilex_hps_f2h_axi_slave_rid                         (mm_interconnect_2_agilex_hps_f2h_axi_slave_rid),     //   input,    width = 5,                                               .rid
		.agilex_hps_f2h_axi_slave_rdata                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_rdata),   //   input,  width = 512,                                               .rdata
		.agilex_hps_f2h_axi_slave_rresp                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_rresp),   //   input,    width = 2,                                               .rresp
		.agilex_hps_f2h_axi_slave_rlast                       (mm_interconnect_2_agilex_hps_f2h_axi_slave_rlast),   //   input,    width = 1,                                               .rlast
		.agilex_hps_f2h_axi_slave_rvalid                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_rvalid),  //   input,    width = 1,                                               .rvalid
		.agilex_hps_f2h_axi_slave_rready                      (mm_interconnect_2_agilex_hps_f2h_axi_slave_rready),  //  output,    width = 1,                                               .rready
		.jtg_mst_reset_reset_bridge_in_reset_reset            (rst_controller_001_reset_out_reset),                 //   input,    width = 1,            jtg_mst_reset_reset_bridge_in_reset.reset
		.agilex_hps_f2h_axi_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                 //   input,    width = 1, agilex_hps_f2h_axi_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                  (clk_100_out_clk_clk)                                 //   input,    width = 1,                                clk_100_out_clk.clk
	);

	qsys_top_altera_irq_mapper_2000_r7l447q irq_mapper (
		.clk           (),                         //   input,   width = 1,       clk.clk
		.reset         (),                         //   input,   width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq), //   input,   width = 1, receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq), //   input,   width = 1, receiver1.irq
		.sender_irq    (agilex_hps_f2h_irq0_irq)   //  output,  width = 32,    sender.irq
	);

	qsys_top_altera_irq_mapper_2000_c7d56ci irq_mapper_001 (
		.clk           (clk_100_out_clk_clk),            //   input,  width = 1,       clk.clk
		.reset         (rst_controller_reset_out_reset), //   input,  width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       //   input,  width = 1, receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       //   input,  width = 1, receiver1.irq
		.sender_irq    (periph_ilc_irq_irq)              //  output,  width = 2,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~rst_in_out_reset_reset),            //   input,  width = 1, reset_in0.reset
		.clk            (clk_100_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~rst_in_out_reset_reset),            //   input,  width = 1, reset_in0.reset
		.clk            (clk_100_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~agilex_hps_emac1_tx_reset_reset),   //   input,  width = 1, reset_in0.reset
		.clk            (agilex_hps_emac1_gtx_clk_clk),       //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
