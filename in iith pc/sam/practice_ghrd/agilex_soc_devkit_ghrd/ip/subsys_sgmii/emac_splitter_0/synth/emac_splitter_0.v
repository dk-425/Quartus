// emac_splitter_0.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module emac_splitter_0 (
		input  wire       phy_txclk_o,        //   emac_gtx_clk.clk
		output wire       clk_tx_i,           // emac_tx_clk_in.clk
		output wire       clk_rx_i,           // emac_rx_clk_in.clk
		input  wire       rst_tx_n_o,         //  emac_tx_reset.reset_n
		input  wire       rst_rx_n_o,         //  emac_rx_reset.reset_n
		input  wire       mac_tx_clk_i,       //       hps_gmii.phy_tx_clk_i
		input  wire       mac_rx_clk,         //               .phy_rx_clk_i
		input  wire       mac_rxdv,           //               .phy_rxdv_i
		input  wire       mac_rxer,           //               .phy_rxer_i
		input  wire [7:0] mac_rxd,            //               .phy_rxd_i
		input  wire       mac_col,            //               .phy_col_i
		input  wire       mac_crs,            //               .phy_crs_i
		output wire       mac_tx_clk_o,       //               .phy_tx_clk_o
		output wire       mac_rst_tx_n,       //               .rst_tx_n
		output wire       mac_rst_rx_n,       //               .rst_rx_n
		output wire [7:0] mac_txd,            //               .phy_txd_o
		output wire       mac_txen,           //               .phy_txen_o
		output wire       mac_txer,           //               .phy_txer_o
		output wire [1:0] mac_speed,          //               .phy_mac_speed_o
		input  wire       mdi_in,             //           mdio.gmii_mdi_i
		output wire       mdo_out,            //               .gmii_mdo_o
		output wire       mdo_out_en,         //               .gmii_mdo_o_e
		input  wire [7:0] phy_txd_o,          //           emac.phy_txd_o
		input  wire       phy_txen_o,         //               .phy_txen_o
		input  wire       phy_txer_o,         //               .phy_txer_o
		input  wire [1:0] phy_mac_speed_o,    //               .phy_mac_speed_o
		input  wire       mdo_o,              //               .gmii_mdo_o
		input  wire       mdo_o_e,            //               .gmii_mdo_o_e
		input  wire       ptp_pps_o,          //               .ptp_pps_o
		output wire       phy_rxdv_i,         //               .phy_rxdv_i
		output wire       phy_rxer_i,         //               .phy_rxer_i
		output wire [7:0] phy_rxd_i,          //               .phy_rxd_i
		output wire       phy_col_i,          //               .phy_col_i
		output wire       phy_crs_i,          //               .phy_crs_i
		output wire       mdi_i,              //               .gmii_mdi_i
		output wire       ptp_aux_ts_trig_i,  //               .ptp_aux_ts_trig_i
		input  wire       ptp_tstmp_data,     //               .ptp_tstmp_data
		input  wire       ptp_tstmp_en,       //               .ptp_tstmp_en
		input  wire       ptp_aux_ts_trig_in, //            ptp.ptp_aux_ts_trig_i
		output wire       ptp_pps_out,        //               .ptp_pps_o
		output wire       ptp_tstmp_data_out, //               .ptp_tstmp_data
		output wire       ptp_tstmp_en_out    //               .ptp_tstmp_en
	);

	altera_hps_emac_interface_splitter #(
		.MAC_SPEED_CSR_ENABLE (0)
	) altera_hps_emac_interface_splitter_inst (
		.phy_txclk_o        (phy_txclk_o),                          //   input,  width = 1,   emac_gtx_clk.clk
		.clk_tx_i           (clk_tx_i),                             //  output,  width = 1, emac_tx_clk_in.clk
		.clk_rx_i           (clk_rx_i),                             //  output,  width = 1, emac_rx_clk_in.clk
		.rst_tx_n_o         (rst_tx_n_o),                           //   input,  width = 1,  emac_tx_reset.reset_n
		.rst_rx_n_o         (rst_rx_n_o),                           //   input,  width = 1,  emac_rx_reset.reset_n
		.mac_tx_clk_i       (mac_tx_clk_i),                         //   input,  width = 1,       hps_gmii.phy_tx_clk_i
		.mac_rx_clk         (mac_rx_clk),                           //   input,  width = 1,               .phy_rx_clk_i
		.mac_rxdv           (mac_rxdv),                             //   input,  width = 1,               .phy_rxdv_i
		.mac_rxer           (mac_rxer),                             //   input,  width = 1,               .phy_rxer_i
		.mac_rxd            (mac_rxd),                              //   input,  width = 8,               .phy_rxd_i
		.mac_col            (mac_col),                              //   input,  width = 1,               .phy_col_i
		.mac_crs            (mac_crs),                              //   input,  width = 1,               .phy_crs_i
		.mac_tx_clk_o       (mac_tx_clk_o),                         //  output,  width = 1,               .phy_tx_clk_o
		.mac_rst_tx_n       (mac_rst_tx_n),                         //  output,  width = 1,               .rst_tx_n
		.mac_rst_rx_n       (mac_rst_rx_n),                         //  output,  width = 1,               .rst_rx_n
		.mac_txd            (mac_txd),                              //  output,  width = 8,               .phy_txd_o
		.mac_txen           (mac_txen),                             //  output,  width = 1,               .phy_txen_o
		.mac_txer           (mac_txer),                             //  output,  width = 1,               .phy_txer_o
		.mac_speed          (mac_speed),                            //  output,  width = 2,               .phy_mac_speed_o
		.mdi_in             (mdi_in),                               //   input,  width = 1,           mdio.gmii_mdi_i
		.mdo_out            (mdo_out),                              //  output,  width = 1,               .gmii_mdo_o
		.mdo_out_en         (mdo_out_en),                           //  output,  width = 1,               .gmii_mdo_o_e
		.phy_txd_o          (phy_txd_o),                            //   input,  width = 8,           emac.phy_txd_o
		.phy_txen_o         (phy_txen_o),                           //   input,  width = 1,               .phy_txen_o
		.phy_txer_o         (phy_txer_o),                           //   input,  width = 1,               .phy_txer_o
		.phy_mac_speed_o    (phy_mac_speed_o),                      //   input,  width = 2,               .phy_mac_speed_o
		.mdo_o              (mdo_o),                                //   input,  width = 1,               .gmii_mdo_o
		.mdo_o_e            (mdo_o_e),                              //   input,  width = 1,               .gmii_mdo_o_e
		.ptp_pps_o          (ptp_pps_o),                            //   input,  width = 1,               .ptp_pps_o
		.phy_rxdv_i         (phy_rxdv_i),                           //  output,  width = 1,               .phy_rxdv_i
		.phy_rxer_i         (phy_rxer_i),                           //  output,  width = 1,               .phy_rxer_i
		.phy_rxd_i          (phy_rxd_i),                            //  output,  width = 8,               .phy_rxd_i
		.phy_col_i          (phy_col_i),                            //  output,  width = 1,               .phy_col_i
		.phy_crs_i          (phy_crs_i),                            //  output,  width = 1,               .phy_crs_i
		.mdi_i              (mdi_i),                                //  output,  width = 1,               .gmii_mdi_i
		.ptp_aux_ts_trig_i  (ptp_aux_ts_trig_i),                    //  output,  width = 1,               .ptp_aux_ts_trig_i
		.ptp_tstmp_data     (ptp_tstmp_data),                       //   input,  width = 1,               .ptp_tstmp_data
		.ptp_tstmp_en       (ptp_tstmp_en),                         //   input,  width = 1,               .ptp_tstmp_en
		.ptp_aux_ts_trig_in (ptp_aux_ts_trig_in),                   //   input,  width = 1,            ptp.ptp_aux_ts_trig_i
		.ptp_pps_out        (ptp_pps_out),                          //  output,  width = 1,               .ptp_pps_o
		.ptp_tstmp_data_out (ptp_tstmp_data_out),                   //  output,  width = 1,               .ptp_tstmp_data
		.ptp_tstmp_en_out   (ptp_tstmp_en_out),                     //  output,  width = 1,               .ptp_tstmp_en
		.clk                (1'b0),                                 // (terminated),                            
		.rst_n              (1'b0),                                 // (terminated),                            
		.read               (1'b0),                                 // (terminated),                            
		.write              (1'b0),                                 // (terminated),                            
		.writedata          (32'b00000000000000000000000000000000), // (terminated),                            
		.readdata           (),                                     // (terminated),                            
		.addr               (1'b0)                                  // (terminated),                            
	);

endmodule
