	component gmii_sgmii_adapter_0 is
		port (
			clk             : in  std_logic                     := 'X';             -- clk
			rst_n           : in  std_logic                     := 'X';             -- reset_n
			addr            : in  std_logic                     := 'X';             -- address
			read            : in  std_logic                     := 'X';             -- read
			write           : in  std_logic                     := 'X';             -- write
			writedata       : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			readdata        : out std_logic_vector(31 downto 0);                    -- readdata
			mac_tx_clk_o    : in  std_logic                     := 'X';             -- phy_tx_clk_o
			mac_rst_tx_n    : in  std_logic                     := 'X';             -- rst_tx_n
			mac_rst_rx_n    : in  std_logic                     := 'X';             -- rst_rx_n
			mac_txd         : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- phy_txd_o
			mac_txen        : in  std_logic                     := 'X';             -- phy_txen_o
			mac_txer        : in  std_logic                     := 'X';             -- phy_txer_o
			mac_speed       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- phy_mac_speed_o
			mac_tx_clk_i    : out std_logic;                                        -- phy_tx_clk_i
			mac_rx_clk      : out std_logic;                                        -- phy_rx_clk_i
			mac_rxdv        : out std_logic;                                        -- phy_rxdv_i
			mac_rxer        : out std_logic;                                        -- phy_rxer_i
			mac_rxd         : out std_logic_vector(7 downto 0);                     -- phy_rxd_i
			mac_col         : out std_logic;                                        -- phy_col_i
			mac_crs         : out std_logic;                                        -- phy_crs_i
			pcs_rst_tx      : out std_logic;                                        -- reset
			pcs_rst_rx      : out std_logic;                                        -- reset
			pcs_tx_clk      : in  std_logic                     := 'X';             -- clk
			pcs_rx_clk      : in  std_logic                     := 'X';             -- clk
			pcs_txclk_ena   : in  std_logic                     := 'X';             -- tx_clkena
			pcs_rxclk_ena   : in  std_logic                     := 'X';             -- rx_clkena
			pcs_gmii_rx_dv  : in  std_logic                     := 'X';             -- gmii_rx_dv
			pcs_gmii_rx_d   : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_rx_d
			pcs_gmii_rx_err : in  std_logic                     := 'X';             -- gmii_rx_err
			pcs_gmii_tx_en  : out std_logic;                                        -- gmii_tx_en
			pcs_gmii_tx_d   : out std_logic_vector(7 downto 0);                     -- gmii_tx_d
			pcs_gmii_tx_err : out std_logic;                                        -- gmii_tx_err
			pcs_mii_rx_dv   : in  std_logic                     := 'X';             -- mii_rx_dv
			pcs_mii_rx_d    : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_rx_d
			pcs_mii_rx_err  : in  std_logic                     := 'X';             -- mii_rx_err
			pcs_mii_col     : in  std_logic                     := 'X';             -- mii_col
			pcs_mii_crs     : in  std_logic                     := 'X';             -- mii_crs
			pcs_mii_tx_en   : out std_logic;                                        -- mii_tx_en
			pcs_mii_tx_d    : out std_logic_vector(3 downto 0);                     -- mii_tx_d
			pcs_mii_tx_err  : out std_logic                                         -- mii_tx_err
		);
	end component gmii_sgmii_adapter_0;

