// subsys_sgmii_altera_mm_interconnect_1920_xwlfuty.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module subsys_sgmii_altera_mm_interconnect_1920_xwlfuty (
		input  wire [6:0]  sgmii_csr_m0_address,                                      //                                        sgmii_csr_m0.address
		output wire        sgmii_csr_m0_waitrequest,                                  //                                                    .waitrequest
		input  wire [0:0]  sgmii_csr_m0_burstcount,                                   //                                                    .burstcount
		input  wire [3:0]  sgmii_csr_m0_byteenable,                                   //                                                    .byteenable
		input  wire        sgmii_csr_m0_read,                                         //                                                    .read
		output wire [31:0] sgmii_csr_m0_readdata,                                     //                                                    .readdata
		output wire        sgmii_csr_m0_readdatavalid,                                //                                                    .readdatavalid
		input  wire        sgmii_csr_m0_write,                                        //                                                    .write
		input  wire [31:0] sgmii_csr_m0_writedata,                                    //                                                    .writedata
		input  wire        sgmii_csr_m0_debugaccess,                                  //                                                    .debugaccess
		output wire [0:0]  gmii_sgmii_adapter_0_avalon_slave_address,                 //                   gmii_sgmii_adapter_0_avalon_slave.address
		output wire        gmii_sgmii_adapter_0_avalon_slave_write,                   //                                                    .write
		output wire        gmii_sgmii_adapter_0_avalon_slave_read,                    //                                                    .read
		input  wire [31:0] gmii_sgmii_adapter_0_avalon_slave_readdata,                //                                                    .readdata
		output wire [31:0] gmii_sgmii_adapter_0_avalon_slave_writedata,               //                                                    .writedata
		output wire [4:0]  eth_tse_0_control_port_address,                            //                              eth_tse_0_control_port.address
		output wire        eth_tse_0_control_port_write,                              //                                                    .write
		output wire        eth_tse_0_control_port_read,                               //                                                    .read
		input  wire [15:0] eth_tse_0_control_port_readdata,                           //                                                    .readdata
		output wire [15:0] eth_tse_0_control_port_writedata,                          //                                                    .writedata
		input  wire        eth_tse_0_control_port_waitrequest,                        //                                                    .waitrequest
		output wire [1:0]  sgmii_debug_status_pio_s1_address,                         //                           sgmii_debug_status_pio_s1.address
		output wire        sgmii_debug_status_pio_s1_write,                           //                                                    .write
		input  wire [31:0] sgmii_debug_status_pio_s1_readdata,                        //                                                    .readdata
		output wire [31:0] sgmii_debug_status_pio_s1_writedata,                       //                                                    .writedata
		output wire        sgmii_debug_status_pio_s1_chipselect,                      //                                                    .chipselect
		input  wire        sgmii_csr_reset_reset_bridge_in_reset_reset,               //               sgmii_csr_reset_reset_bridge_in_reset.reset
		input  wire        sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset, // sgmii_csr_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire        sgmii_csr_clk_out_clk_clk                                  //                               sgmii_csr_clk_out_clk.clk
	);

	wire         sgmii_csr_m0_translator_avalon_universal_master_0_waitrequest;      // sgmii_csr_m0_agent:av_waitrequest -> sgmii_csr_m0_translator:uav_waitrequest
	wire  [31:0] sgmii_csr_m0_translator_avalon_universal_master_0_readdata;         // sgmii_csr_m0_agent:av_readdata -> sgmii_csr_m0_translator:uav_readdata
	wire         sgmii_csr_m0_translator_avalon_universal_master_0_debugaccess;      // sgmii_csr_m0_translator:uav_debugaccess -> sgmii_csr_m0_agent:av_debugaccess
	wire   [6:0] sgmii_csr_m0_translator_avalon_universal_master_0_address;          // sgmii_csr_m0_translator:uav_address -> sgmii_csr_m0_agent:av_address
	wire         sgmii_csr_m0_translator_avalon_universal_master_0_read;             // sgmii_csr_m0_translator:uav_read -> sgmii_csr_m0_agent:av_read
	wire   [3:0] sgmii_csr_m0_translator_avalon_universal_master_0_byteenable;       // sgmii_csr_m0_translator:uav_byteenable -> sgmii_csr_m0_agent:av_byteenable
	wire         sgmii_csr_m0_translator_avalon_universal_master_0_readdatavalid;    // sgmii_csr_m0_agent:av_readdatavalid -> sgmii_csr_m0_translator:uav_readdatavalid
	wire         sgmii_csr_m0_translator_avalon_universal_master_0_lock;             // sgmii_csr_m0_translator:uav_lock -> sgmii_csr_m0_agent:av_lock
	wire         sgmii_csr_m0_translator_avalon_universal_master_0_write;            // sgmii_csr_m0_translator:uav_write -> sgmii_csr_m0_agent:av_write
	wire  [31:0] sgmii_csr_m0_translator_avalon_universal_master_0_writedata;        // sgmii_csr_m0_translator:uav_writedata -> sgmii_csr_m0_agent:av_writedata
	wire   [2:0] sgmii_csr_m0_translator_avalon_universal_master_0_burstcount;       // sgmii_csr_m0_translator:uav_burstcount -> sgmii_csr_m0_agent:av_burstcount
	wire  [31:0] gmii_sgmii_adapter_0_avalon_slave_agent_m0_readdata;                // gmii_sgmii_adapter_0_avalon_slave_translator:uav_readdata -> gmii_sgmii_adapter_0_avalon_slave_agent:m0_readdata
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_m0_waitrequest;             // gmii_sgmii_adapter_0_avalon_slave_translator:uav_waitrequest -> gmii_sgmii_adapter_0_avalon_slave_agent:m0_waitrequest
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_m0_debugaccess;             // gmii_sgmii_adapter_0_avalon_slave_agent:m0_debugaccess -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_debugaccess
	wire   [6:0] gmii_sgmii_adapter_0_avalon_slave_agent_m0_address;                 // gmii_sgmii_adapter_0_avalon_slave_agent:m0_address -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_address
	wire   [3:0] gmii_sgmii_adapter_0_avalon_slave_agent_m0_byteenable;              // gmii_sgmii_adapter_0_avalon_slave_agent:m0_byteenable -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_byteenable
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_m0_read;                    // gmii_sgmii_adapter_0_avalon_slave_agent:m0_read -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_read
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_m0_readdatavalid;           // gmii_sgmii_adapter_0_avalon_slave_translator:uav_readdatavalid -> gmii_sgmii_adapter_0_avalon_slave_agent:m0_readdatavalid
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_m0_lock;                    // gmii_sgmii_adapter_0_avalon_slave_agent:m0_lock -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_lock
	wire  [31:0] gmii_sgmii_adapter_0_avalon_slave_agent_m0_writedata;               // gmii_sgmii_adapter_0_avalon_slave_agent:m0_writedata -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_writedata
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_m0_write;                   // gmii_sgmii_adapter_0_avalon_slave_agent:m0_write -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_write
	wire   [2:0] gmii_sgmii_adapter_0_avalon_slave_agent_m0_burstcount;              // gmii_sgmii_adapter_0_avalon_slave_agent:m0_burstcount -> gmii_sgmii_adapter_0_avalon_slave_translator:uav_burstcount
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_valid;            // gmii_sgmii_adapter_0_avalon_slave_agent:rf_source_valid -> gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [88:0] gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_data;             // gmii_sgmii_adapter_0_avalon_slave_agent:rf_source_data -> gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:in_data
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_ready;            // gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:in_ready -> gmii_sgmii_adapter_0_avalon_slave_agent:rf_source_ready
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_startofpacket;    // gmii_sgmii_adapter_0_avalon_slave_agent:rf_source_startofpacket -> gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_endofpacket;      // gmii_sgmii_adapter_0_avalon_slave_agent:rf_source_endofpacket -> gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_valid;         // gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:out_valid -> gmii_sgmii_adapter_0_avalon_slave_agent:rf_sink_valid
	wire  [88:0] gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_data;          // gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:out_data -> gmii_sgmii_adapter_0_avalon_slave_agent:rf_sink_data
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_ready;         // gmii_sgmii_adapter_0_avalon_slave_agent:rf_sink_ready -> gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:out_ready
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_startofpacket; // gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> gmii_sgmii_adapter_0_avalon_slave_agent:rf_sink_startofpacket
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_endofpacket;   // gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> gmii_sgmii_adapter_0_avalon_slave_agent:rf_sink_endofpacket
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_valid;       // gmii_sgmii_adapter_0_avalon_slave_agent:rdata_fifo_src_valid -> gmii_sgmii_adapter_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_data;        // gmii_sgmii_adapter_0_avalon_slave_agent:rdata_fifo_src_data -> gmii_sgmii_adapter_0_avalon_slave_agent:rdata_fifo_sink_data
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_ready;       // gmii_sgmii_adapter_0_avalon_slave_agent:rdata_fifo_sink_ready -> gmii_sgmii_adapter_0_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> gmii_sgmii_adapter_0_avalon_slave_agent:cp_valid
	wire  [87:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> gmii_sgmii_adapter_0_avalon_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                  // gmii_sgmii_adapter_0_avalon_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [2:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> gmii_sgmii_adapter_0_avalon_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> gmii_sgmii_adapter_0_avalon_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> gmii_sgmii_adapter_0_avalon_slave_agent:cp_endofpacket
	wire  [15:0] eth_tse_0_control_port_agent_m0_readdata;                           // eth_tse_0_control_port_translator:uav_readdata -> eth_tse_0_control_port_agent:m0_readdata
	wire         eth_tse_0_control_port_agent_m0_waitrequest;                        // eth_tse_0_control_port_translator:uav_waitrequest -> eth_tse_0_control_port_agent:m0_waitrequest
	wire         eth_tse_0_control_port_agent_m0_debugaccess;                        // eth_tse_0_control_port_agent:m0_debugaccess -> eth_tse_0_control_port_translator:uav_debugaccess
	wire   [6:0] eth_tse_0_control_port_agent_m0_address;                            // eth_tse_0_control_port_agent:m0_address -> eth_tse_0_control_port_translator:uav_address
	wire   [1:0] eth_tse_0_control_port_agent_m0_byteenable;                         // eth_tse_0_control_port_agent:m0_byteenable -> eth_tse_0_control_port_translator:uav_byteenable
	wire         eth_tse_0_control_port_agent_m0_read;                               // eth_tse_0_control_port_agent:m0_read -> eth_tse_0_control_port_translator:uav_read
	wire         eth_tse_0_control_port_agent_m0_readdatavalid;                      // eth_tse_0_control_port_translator:uav_readdatavalid -> eth_tse_0_control_port_agent:m0_readdatavalid
	wire         eth_tse_0_control_port_agent_m0_lock;                               // eth_tse_0_control_port_agent:m0_lock -> eth_tse_0_control_port_translator:uav_lock
	wire  [15:0] eth_tse_0_control_port_agent_m0_writedata;                          // eth_tse_0_control_port_agent:m0_writedata -> eth_tse_0_control_port_translator:uav_writedata
	wire         eth_tse_0_control_port_agent_m0_write;                              // eth_tse_0_control_port_agent:m0_write -> eth_tse_0_control_port_translator:uav_write
	wire   [1:0] eth_tse_0_control_port_agent_m0_burstcount;                         // eth_tse_0_control_port_agent:m0_burstcount -> eth_tse_0_control_port_translator:uav_burstcount
	wire         eth_tse_0_control_port_agent_rf_source_valid;                       // eth_tse_0_control_port_agent:rf_source_valid -> eth_tse_0_control_port_agent_rsp_fifo:in_valid
	wire  [70:0] eth_tse_0_control_port_agent_rf_source_data;                        // eth_tse_0_control_port_agent:rf_source_data -> eth_tse_0_control_port_agent_rsp_fifo:in_data
	wire         eth_tse_0_control_port_agent_rf_source_ready;                       // eth_tse_0_control_port_agent_rsp_fifo:in_ready -> eth_tse_0_control_port_agent:rf_source_ready
	wire         eth_tse_0_control_port_agent_rf_source_startofpacket;               // eth_tse_0_control_port_agent:rf_source_startofpacket -> eth_tse_0_control_port_agent_rsp_fifo:in_startofpacket
	wire         eth_tse_0_control_port_agent_rf_source_endofpacket;                 // eth_tse_0_control_port_agent:rf_source_endofpacket -> eth_tse_0_control_port_agent_rsp_fifo:in_endofpacket
	wire         eth_tse_0_control_port_agent_rsp_fifo_out_valid;                    // eth_tse_0_control_port_agent_rsp_fifo:out_valid -> eth_tse_0_control_port_agent:rf_sink_valid
	wire  [70:0] eth_tse_0_control_port_agent_rsp_fifo_out_data;                     // eth_tse_0_control_port_agent_rsp_fifo:out_data -> eth_tse_0_control_port_agent:rf_sink_data
	wire         eth_tse_0_control_port_agent_rsp_fifo_out_ready;                    // eth_tse_0_control_port_agent:rf_sink_ready -> eth_tse_0_control_port_agent_rsp_fifo:out_ready
	wire         eth_tse_0_control_port_agent_rsp_fifo_out_startofpacket;            // eth_tse_0_control_port_agent_rsp_fifo:out_startofpacket -> eth_tse_0_control_port_agent:rf_sink_startofpacket
	wire         eth_tse_0_control_port_agent_rsp_fifo_out_endofpacket;              // eth_tse_0_control_port_agent_rsp_fifo:out_endofpacket -> eth_tse_0_control_port_agent:rf_sink_endofpacket
	wire         eth_tse_0_control_port_agent_rdata_fifo_src_valid;                  // eth_tse_0_control_port_agent:rdata_fifo_src_valid -> eth_tse_0_control_port_agent:rdata_fifo_sink_valid
	wire  [17:0] eth_tse_0_control_port_agent_rdata_fifo_src_data;                   // eth_tse_0_control_port_agent:rdata_fifo_src_data -> eth_tse_0_control_port_agent:rdata_fifo_sink_data
	wire         eth_tse_0_control_port_agent_rdata_fifo_src_ready;                  // eth_tse_0_control_port_agent:rdata_fifo_sink_ready -> eth_tse_0_control_port_agent:rdata_fifo_src_ready
	wire  [31:0] sgmii_debug_status_pio_s1_agent_m0_readdata;                        // sgmii_debug_status_pio_s1_translator:uav_readdata -> sgmii_debug_status_pio_s1_agent:m0_readdata
	wire         sgmii_debug_status_pio_s1_agent_m0_waitrequest;                     // sgmii_debug_status_pio_s1_translator:uav_waitrequest -> sgmii_debug_status_pio_s1_agent:m0_waitrequest
	wire         sgmii_debug_status_pio_s1_agent_m0_debugaccess;                     // sgmii_debug_status_pio_s1_agent:m0_debugaccess -> sgmii_debug_status_pio_s1_translator:uav_debugaccess
	wire   [6:0] sgmii_debug_status_pio_s1_agent_m0_address;                         // sgmii_debug_status_pio_s1_agent:m0_address -> sgmii_debug_status_pio_s1_translator:uav_address
	wire   [3:0] sgmii_debug_status_pio_s1_agent_m0_byteenable;                      // sgmii_debug_status_pio_s1_agent:m0_byteenable -> sgmii_debug_status_pio_s1_translator:uav_byteenable
	wire         sgmii_debug_status_pio_s1_agent_m0_read;                            // sgmii_debug_status_pio_s1_agent:m0_read -> sgmii_debug_status_pio_s1_translator:uav_read
	wire         sgmii_debug_status_pio_s1_agent_m0_readdatavalid;                   // sgmii_debug_status_pio_s1_translator:uav_readdatavalid -> sgmii_debug_status_pio_s1_agent:m0_readdatavalid
	wire         sgmii_debug_status_pio_s1_agent_m0_lock;                            // sgmii_debug_status_pio_s1_agent:m0_lock -> sgmii_debug_status_pio_s1_translator:uav_lock
	wire  [31:0] sgmii_debug_status_pio_s1_agent_m0_writedata;                       // sgmii_debug_status_pio_s1_agent:m0_writedata -> sgmii_debug_status_pio_s1_translator:uav_writedata
	wire         sgmii_debug_status_pio_s1_agent_m0_write;                           // sgmii_debug_status_pio_s1_agent:m0_write -> sgmii_debug_status_pio_s1_translator:uav_write
	wire   [2:0] sgmii_debug_status_pio_s1_agent_m0_burstcount;                      // sgmii_debug_status_pio_s1_agent:m0_burstcount -> sgmii_debug_status_pio_s1_translator:uav_burstcount
	wire         sgmii_debug_status_pio_s1_agent_rf_source_valid;                    // sgmii_debug_status_pio_s1_agent:rf_source_valid -> sgmii_debug_status_pio_s1_agent_rsp_fifo:in_valid
	wire  [88:0] sgmii_debug_status_pio_s1_agent_rf_source_data;                     // sgmii_debug_status_pio_s1_agent:rf_source_data -> sgmii_debug_status_pio_s1_agent_rsp_fifo:in_data
	wire         sgmii_debug_status_pio_s1_agent_rf_source_ready;                    // sgmii_debug_status_pio_s1_agent_rsp_fifo:in_ready -> sgmii_debug_status_pio_s1_agent:rf_source_ready
	wire         sgmii_debug_status_pio_s1_agent_rf_source_startofpacket;            // sgmii_debug_status_pio_s1_agent:rf_source_startofpacket -> sgmii_debug_status_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         sgmii_debug_status_pio_s1_agent_rf_source_endofpacket;              // sgmii_debug_status_pio_s1_agent:rf_source_endofpacket -> sgmii_debug_status_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         sgmii_debug_status_pio_s1_agent_rsp_fifo_out_valid;                 // sgmii_debug_status_pio_s1_agent_rsp_fifo:out_valid -> sgmii_debug_status_pio_s1_agent:rf_sink_valid
	wire  [88:0] sgmii_debug_status_pio_s1_agent_rsp_fifo_out_data;                  // sgmii_debug_status_pio_s1_agent_rsp_fifo:out_data -> sgmii_debug_status_pio_s1_agent:rf_sink_data
	wire         sgmii_debug_status_pio_s1_agent_rsp_fifo_out_ready;                 // sgmii_debug_status_pio_s1_agent:rf_sink_ready -> sgmii_debug_status_pio_s1_agent_rsp_fifo:out_ready
	wire         sgmii_debug_status_pio_s1_agent_rsp_fifo_out_startofpacket;         // sgmii_debug_status_pio_s1_agent_rsp_fifo:out_startofpacket -> sgmii_debug_status_pio_s1_agent:rf_sink_startofpacket
	wire         sgmii_debug_status_pio_s1_agent_rsp_fifo_out_endofpacket;           // sgmii_debug_status_pio_s1_agent_rsp_fifo:out_endofpacket -> sgmii_debug_status_pio_s1_agent:rf_sink_endofpacket
	wire         sgmii_debug_status_pio_s1_agent_rdata_fifo_src_valid;               // sgmii_debug_status_pio_s1_agent:rdata_fifo_src_valid -> sgmii_debug_status_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sgmii_debug_status_pio_s1_agent_rdata_fifo_src_data;                // sgmii_debug_status_pio_s1_agent:rdata_fifo_src_data -> sgmii_debug_status_pio_s1_agent:rdata_fifo_sink_data
	wire         sgmii_debug_status_pio_s1_agent_rdata_fifo_src_ready;               // sgmii_debug_status_pio_s1_agent:rdata_fifo_sink_ready -> sgmii_debug_status_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> sgmii_debug_status_pio_s1_agent:cp_valid
	wire  [87:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> sgmii_debug_status_pio_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                              // sgmii_debug_status_pio_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [2:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> sgmii_debug_status_pio_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> sgmii_debug_status_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> sgmii_debug_status_pio_s1_agent:cp_endofpacket
	wire         sgmii_csr_m0_agent_cp_valid;                                        // sgmii_csr_m0_agent:cp_valid -> router:sink_valid
	wire  [87:0] sgmii_csr_m0_agent_cp_data;                                         // sgmii_csr_m0_agent:cp_data -> router:sink_data
	wire         sgmii_csr_m0_agent_cp_ready;                                        // router:sink_ready -> sgmii_csr_m0_agent:cp_ready
	wire         sgmii_csr_m0_agent_cp_startofpacket;                                // sgmii_csr_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         sgmii_csr_m0_agent_cp_endofpacket;                                  // sgmii_csr_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rp_valid;                   // gmii_sgmii_adapter_0_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [87:0] gmii_sgmii_adapter_0_avalon_slave_agent_rp_data;                    // gmii_sgmii_adapter_0_avalon_slave_agent:rp_data -> router_001:sink_data
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rp_ready;                   // router_001:sink_ready -> gmii_sgmii_adapter_0_avalon_slave_agent:rp_ready
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rp_startofpacket;           // gmii_sgmii_adapter_0_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         gmii_sgmii_adapter_0_avalon_slave_agent_rp_endofpacket;             // gmii_sgmii_adapter_0_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                               // router_001:src_valid -> rsp_demux:sink_valid
	wire  [87:0] router_001_src_data;                                                // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                               // rsp_demux:sink_ready -> router_001:src_ready
	wire   [2:0] router_001_src_channel;                                             // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                       // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                         // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         eth_tse_0_control_port_agent_rp_valid;                              // eth_tse_0_control_port_agent:rp_valid -> router_002:sink_valid
	wire  [69:0] eth_tse_0_control_port_agent_rp_data;                               // eth_tse_0_control_port_agent:rp_data -> router_002:sink_data
	wire         eth_tse_0_control_port_agent_rp_ready;                              // router_002:sink_ready -> eth_tse_0_control_port_agent:rp_ready
	wire         eth_tse_0_control_port_agent_rp_startofpacket;                      // eth_tse_0_control_port_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         eth_tse_0_control_port_agent_rp_endofpacket;                        // eth_tse_0_control_port_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         sgmii_debug_status_pio_s1_agent_rp_valid;                           // sgmii_debug_status_pio_s1_agent:rp_valid -> router_003:sink_valid
	wire  [87:0] sgmii_debug_status_pio_s1_agent_rp_data;                            // sgmii_debug_status_pio_s1_agent:rp_data -> router_003:sink_data
	wire         sgmii_debug_status_pio_s1_agent_rp_ready;                           // router_003:sink_ready -> sgmii_debug_status_pio_s1_agent:rp_ready
	wire         sgmii_debug_status_pio_s1_agent_rp_startofpacket;                   // sgmii_debug_status_pio_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sgmii_debug_status_pio_s1_agent_rp_endofpacket;                     // sgmii_debug_status_pio_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                               // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [87:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                               // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [2:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_src_valid;                                                   // router:src_valid -> sgmii_csr_m0_limiter:cmd_sink_valid
	wire  [87:0] router_src_data;                                                    // router:src_data -> sgmii_csr_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                   // sgmii_csr_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [2:0] router_src_channel;                                                 // router:src_channel -> sgmii_csr_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                           // router:src_startofpacket -> sgmii_csr_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                             // router:src_endofpacket -> sgmii_csr_m0_limiter:cmd_sink_endofpacket
	wire  [87:0] sgmii_csr_m0_limiter_cmd_src_data;                                  // sgmii_csr_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         sgmii_csr_m0_limiter_cmd_src_ready;                                 // cmd_demux:sink_ready -> sgmii_csr_m0_limiter:cmd_src_ready
	wire   [2:0] sgmii_csr_m0_limiter_cmd_src_channel;                               // sgmii_csr_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         sgmii_csr_m0_limiter_cmd_src_startofpacket;                         // sgmii_csr_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         sgmii_csr_m0_limiter_cmd_src_endofpacket;                           // sgmii_csr_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> sgmii_csr_m0_limiter:rsp_sink_valid
	wire  [87:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> sgmii_csr_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                  // sgmii_csr_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [2:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> sgmii_csr_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> sgmii_csr_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> sgmii_csr_m0_limiter:rsp_sink_endofpacket
	wire         sgmii_csr_m0_limiter_rsp_src_valid;                                 // sgmii_csr_m0_limiter:rsp_src_valid -> sgmii_csr_m0_agent:rp_valid
	wire  [87:0] sgmii_csr_m0_limiter_rsp_src_data;                                  // sgmii_csr_m0_limiter:rsp_src_data -> sgmii_csr_m0_agent:rp_data
	wire         sgmii_csr_m0_limiter_rsp_src_ready;                                 // sgmii_csr_m0_agent:rp_ready -> sgmii_csr_m0_limiter:rsp_src_ready
	wire   [2:0] sgmii_csr_m0_limiter_rsp_src_channel;                               // sgmii_csr_m0_limiter:rsp_src_channel -> sgmii_csr_m0_agent:rp_channel
	wire         sgmii_csr_m0_limiter_rsp_src_startofpacket;                         // sgmii_csr_m0_limiter:rsp_src_startofpacket -> sgmii_csr_m0_agent:rp_startofpacket
	wire         sgmii_csr_m0_limiter_rsp_src_endofpacket;                           // sgmii_csr_m0_limiter:rsp_src_endofpacket -> sgmii_csr_m0_agent:rp_endofpacket
	wire         eth_tse_0_control_port_burst_adapter_source0_valid;                 // eth_tse_0_control_port_burst_adapter:source0_valid -> eth_tse_0_control_port_agent:cp_valid
	wire  [69:0] eth_tse_0_control_port_burst_adapter_source0_data;                  // eth_tse_0_control_port_burst_adapter:source0_data -> eth_tse_0_control_port_agent:cp_data
	wire         eth_tse_0_control_port_burst_adapter_source0_ready;                 // eth_tse_0_control_port_agent:cp_ready -> eth_tse_0_control_port_burst_adapter:source0_ready
	wire   [2:0] eth_tse_0_control_port_burst_adapter_source0_channel;               // eth_tse_0_control_port_burst_adapter:source0_channel -> eth_tse_0_control_port_agent:cp_channel
	wire         eth_tse_0_control_port_burst_adapter_source0_startofpacket;         // eth_tse_0_control_port_burst_adapter:source0_startofpacket -> eth_tse_0_control_port_agent:cp_startofpacket
	wire         eth_tse_0_control_port_burst_adapter_source0_endofpacket;           // eth_tse_0_control_port_burst_adapter:source0_endofpacket -> eth_tse_0_control_port_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [87:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [2:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [87:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [2:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [87:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [2:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [87:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [2:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [87:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [2:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [87:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [2:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         router_002_src_valid;                                               // router_002:src_valid -> eth_tse_0_control_port_rsp_width_adapter:in_valid
	wire  [69:0] router_002_src_data;                                                // router_002:src_data -> eth_tse_0_control_port_rsp_width_adapter:in_data
	wire         router_002_src_ready;                                               // eth_tse_0_control_port_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [2:0] router_002_src_channel;                                             // router_002:src_channel -> eth_tse_0_control_port_rsp_width_adapter:in_channel
	wire         router_002_src_startofpacket;                                       // router_002:src_startofpacket -> eth_tse_0_control_port_rsp_width_adapter:in_startofpacket
	wire         router_002_src_endofpacket;                                         // router_002:src_endofpacket -> eth_tse_0_control_port_rsp_width_adapter:in_endofpacket
	wire         eth_tse_0_control_port_rsp_width_adapter_src_valid;                 // eth_tse_0_control_port_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [87:0] eth_tse_0_control_port_rsp_width_adapter_src_data;                  // eth_tse_0_control_port_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire         eth_tse_0_control_port_rsp_width_adapter_src_ready;                 // rsp_demux_001:sink_ready -> eth_tse_0_control_port_rsp_width_adapter:out_ready
	wire   [2:0] eth_tse_0_control_port_rsp_width_adapter_src_channel;               // eth_tse_0_control_port_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire         eth_tse_0_control_port_rsp_width_adapter_src_startofpacket;         // eth_tse_0_control_port_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         eth_tse_0_control_port_rsp_width_adapter_src_endofpacket;           // eth_tse_0_control_port_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> eth_tse_0_control_port_cmd_width_adapter:in_valid
	wire  [87:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> eth_tse_0_control_port_cmd_width_adapter:in_data
	wire         cmd_mux_001_src_ready;                                              // eth_tse_0_control_port_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [2:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> eth_tse_0_control_port_cmd_width_adapter:in_channel
	wire         cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> eth_tse_0_control_port_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> eth_tse_0_control_port_cmd_width_adapter:in_endofpacket
	wire         eth_tse_0_control_port_cmd_width_adapter_src_valid;                 // eth_tse_0_control_port_cmd_width_adapter:out_valid -> eth_tse_0_control_port_burst_adapter:sink0_valid
	wire  [69:0] eth_tse_0_control_port_cmd_width_adapter_src_data;                  // eth_tse_0_control_port_cmd_width_adapter:out_data -> eth_tse_0_control_port_burst_adapter:sink0_data
	wire         eth_tse_0_control_port_cmd_width_adapter_src_ready;                 // eth_tse_0_control_port_burst_adapter:sink0_ready -> eth_tse_0_control_port_cmd_width_adapter:out_ready
	wire   [2:0] eth_tse_0_control_port_cmd_width_adapter_src_channel;               // eth_tse_0_control_port_cmd_width_adapter:out_channel -> eth_tse_0_control_port_burst_adapter:sink0_channel
	wire         eth_tse_0_control_port_cmd_width_adapter_src_startofpacket;         // eth_tse_0_control_port_cmd_width_adapter:out_startofpacket -> eth_tse_0_control_port_burst_adapter:sink0_startofpacket
	wire         eth_tse_0_control_port_cmd_width_adapter_src_endofpacket;           // eth_tse_0_control_port_cmd_width_adapter:out_endofpacket -> eth_tse_0_control_port_burst_adapter:sink0_endofpacket
	wire   [2:0] sgmii_csr_m0_limiter_cmd_valid_data;                                // sgmii_csr_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	subsys_sgmii_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (7),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (7),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) sgmii_csr_m0_translator (
		.clk                    (sgmii_csr_clk_out_clk_clk),                                       //   input,   width = 1,                       clk.clk
		.reset                  (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (sgmii_csr_m0_translator_avalon_universal_master_0_address),       //  output,   width = 7, avalon_universal_master_0.address
		.uav_burstcount         (sgmii_csr_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (sgmii_csr_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (sgmii_csr_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (sgmii_csr_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (sgmii_csr_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (sgmii_csr_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (sgmii_csr_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (sgmii_csr_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (sgmii_csr_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (sgmii_csr_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (sgmii_csr_m0_address),                                            //   input,   width = 7,      avalon_anti_master_0.address
		.av_waitrequest         (sgmii_csr_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (sgmii_csr_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (sgmii_csr_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (sgmii_csr_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (sgmii_csr_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (sgmii_csr_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (sgmii_csr_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (sgmii_csr_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (sgmii_csr_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            // (terminated),                                        
		.av_begintransfer       (1'b0),                                                            // (terminated),                                        
		.av_chipselect          (1'b0),                                                            // (terminated),                                        
		.av_lock                (1'b0),                                                            // (terminated),                                        
		.uav_clken              (),                                                                // (terminated),                                        
		.av_clken               (1'b1),                                                            // (terminated),                                        
		.uav_response           (2'b00),                                                           // (terminated),                                        
		.av_response            (),                                                                // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                            // (terminated),                                        
		.av_writeresponsevalid  ()                                                                 // (terminated),                                        
	);

	subsys_sgmii_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) gmii_sgmii_adapter_0_avalon_slave_translator (
		.clk                    (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,                      clk.clk
		.reset                  (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (gmii_sgmii_adapter_0_avalon_slave_agent_m0_address),        //   input,   width = 7, avalon_universal_slave_0.address
		.uav_burstcount         (gmii_sgmii_adapter_0_avalon_slave_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (gmii_sgmii_adapter_0_avalon_slave_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (gmii_sgmii_adapter_0_avalon_slave_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (gmii_sgmii_adapter_0_avalon_slave_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (gmii_sgmii_adapter_0_avalon_slave_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (gmii_sgmii_adapter_0_avalon_slave_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (gmii_sgmii_adapter_0_avalon_slave_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (gmii_sgmii_adapter_0_avalon_slave_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (gmii_sgmii_adapter_0_avalon_slave_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (gmii_sgmii_adapter_0_avalon_slave_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_address             (gmii_sgmii_adapter_0_avalon_slave_address),                 //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (gmii_sgmii_adapter_0_avalon_slave_write),                   //  output,   width = 1,                         .write
		.av_read                (gmii_sgmii_adapter_0_avalon_slave_read),                    //  output,   width = 1,                         .read
		.av_readdata            (gmii_sgmii_adapter_0_avalon_slave_readdata),                //   input,  width = 32,                         .readdata
		.av_writedata           (gmii_sgmii_adapter_0_avalon_slave_writedata),               //  output,  width = 32,                         .writedata
		.av_begintransfer       (),                                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                                          // (terminated),                                       
		.av_burstcount          (),                                                          // (terminated),                                       
		.av_byteenable          (),                                                          // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                      // (terminated),                                       
		.av_waitrequest         (1'b0),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                          // (terminated),                                       
		.av_lock                (),                                                          // (terminated),                                       
		.av_chipselect          (),                                                          // (terminated),                                       
		.av_clken               (),                                                          // (terminated),                                       
		.uav_clken              (1'b0),                                                      // (terminated),                                       
		.av_debugaccess         (),                                                          // (terminated),                                       
		.av_outputenable        (),                                                          // (terminated),                                       
		.uav_response           (),                                                          // (terminated),                                       
		.av_response            (2'b00),                                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                       // (terminated),                                       
	);

	subsys_sgmii_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) eth_tse_0_control_port_translator (
		.clk                    (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,                      clk.clk
		.reset                  (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (eth_tse_0_control_port_agent_m0_address),                   //   input,   width = 7, avalon_universal_slave_0.address
		.uav_burstcount         (eth_tse_0_control_port_agent_m0_burstcount),                //   input,   width = 2,                         .burstcount
		.uav_read               (eth_tse_0_control_port_agent_m0_read),                      //   input,   width = 1,                         .read
		.uav_write              (eth_tse_0_control_port_agent_m0_write),                     //   input,   width = 1,                         .write
		.uav_waitrequest        (eth_tse_0_control_port_agent_m0_waitrequest),               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (eth_tse_0_control_port_agent_m0_readdatavalid),             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (eth_tse_0_control_port_agent_m0_byteenable),                //   input,   width = 2,                         .byteenable
		.uav_readdata           (eth_tse_0_control_port_agent_m0_readdata),                  //  output,  width = 16,                         .readdata
		.uav_writedata          (eth_tse_0_control_port_agent_m0_writedata),                 //   input,  width = 16,                         .writedata
		.uav_lock               (eth_tse_0_control_port_agent_m0_lock),                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (eth_tse_0_control_port_agent_m0_debugaccess),               //   input,   width = 1,                         .debugaccess
		.av_address             (eth_tse_0_control_port_address),                            //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (eth_tse_0_control_port_write),                              //  output,   width = 1,                         .write
		.av_read                (eth_tse_0_control_port_read),                               //  output,   width = 1,                         .read
		.av_readdata            (eth_tse_0_control_port_readdata),                           //   input,  width = 16,                         .readdata
		.av_writedata           (eth_tse_0_control_port_writedata),                          //  output,  width = 16,                         .writedata
		.av_waitrequest         (eth_tse_0_control_port_waitrequest),                        //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                                          // (terminated),                                       
		.av_burstcount          (),                                                          // (terminated),                                       
		.av_byteenable          (),                                                          // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                          // (terminated),                                       
		.av_lock                (),                                                          // (terminated),                                       
		.av_chipselect          (),                                                          // (terminated),                                       
		.av_clken               (),                                                          // (terminated),                                       
		.uav_clken              (1'b0),                                                      // (terminated),                                       
		.av_debugaccess         (),                                                          // (terminated),                                       
		.av_outputenable        (),                                                          // (terminated),                                       
		.uav_response           (),                                                          // (terminated),                                       
		.av_response            (2'b00),                                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                       // (terminated),                                       
	);

	subsys_sgmii_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) sgmii_debug_status_pio_s1_translator (
		.clk                    (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,                      clk.clk
		.reset                  (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (sgmii_debug_status_pio_s1_agent_m0_address),                //   input,   width = 7, avalon_universal_slave_0.address
		.uav_burstcount         (sgmii_debug_status_pio_s1_agent_m0_burstcount),             //   input,   width = 3,                         .burstcount
		.uav_read               (sgmii_debug_status_pio_s1_agent_m0_read),                   //   input,   width = 1,                         .read
		.uav_write              (sgmii_debug_status_pio_s1_agent_m0_write),                  //   input,   width = 1,                         .write
		.uav_waitrequest        (sgmii_debug_status_pio_s1_agent_m0_waitrequest),            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sgmii_debug_status_pio_s1_agent_m0_readdatavalid),          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sgmii_debug_status_pio_s1_agent_m0_byteenable),             //   input,   width = 4,                         .byteenable
		.uav_readdata           (sgmii_debug_status_pio_s1_agent_m0_readdata),               //  output,  width = 32,                         .readdata
		.uav_writedata          (sgmii_debug_status_pio_s1_agent_m0_writedata),              //   input,  width = 32,                         .writedata
		.uav_lock               (sgmii_debug_status_pio_s1_agent_m0_lock),                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (sgmii_debug_status_pio_s1_agent_m0_debugaccess),            //   input,   width = 1,                         .debugaccess
		.av_address             (sgmii_debug_status_pio_s1_address),                         //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (sgmii_debug_status_pio_s1_write),                           //  output,   width = 1,                         .write
		.av_readdata            (sgmii_debug_status_pio_s1_readdata),                        //   input,  width = 32,                         .readdata
		.av_writedata           (sgmii_debug_status_pio_s1_writedata),                       //  output,  width = 32,                         .writedata
		.av_chipselect          (sgmii_debug_status_pio_s1_chipselect),                      //  output,   width = 1,                         .chipselect
		.av_read                (),                                                          // (terminated),                                       
		.av_begintransfer       (),                                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                                          // (terminated),                                       
		.av_burstcount          (),                                                          // (terminated),                                       
		.av_byteenable          (),                                                          // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                      // (terminated),                                       
		.av_waitrequest         (1'b0),                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                          // (terminated),                                       
		.av_lock                (),                                                          // (terminated),                                       
		.av_clken               (),                                                          // (terminated),                                       
		.uav_clken              (1'b0),                                                      // (terminated),                                       
		.av_debugaccess         (),                                                          // (terminated),                                       
		.av_outputenable        (),                                                          // (terminated),                                       
		.uav_response           (),                                                          // (terminated),                                       
		.av_response            (2'b00),                                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                       // (terminated),                                       
	);

	subsys_sgmii_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (87),
		.PKT_DOMAIN_H              (86),
		.PKT_DOMAIN_L              (85),
		.PKT_SNOOP_H               (84),
		.PKT_SNOOP_L               (81),
		.PKT_BARRIER_H             (80),
		.PKT_BARRIER_L             (79),
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_QOS_H                 (61),
		.PKT_QOS_L                 (61),
		.PKT_DATA_SIDEBAND_H       (59),
		.PKT_DATA_SIDEBAND_L       (59),
		.PKT_ADDR_SIDEBAND_H       (58),
		.PKT_ADDR_SIDEBAND_L       (58),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_CACHE_H               (73),
		.PKT_CACHE_L               (70),
		.PKT_THREAD_ID_H           (66),
		.PKT_THREAD_ID_L           (66),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_EXCLUSIVE       (48),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (64),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) sgmii_csr_m0_agent (
		.clk                   (sgmii_csr_clk_out_clk_clk),                                       //   input,   width = 1,       clk.clk
		.reset                 (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.av_address            (sgmii_csr_m0_translator_avalon_universal_master_0_address),       //   input,   width = 7,        av.address
		.av_write              (sgmii_csr_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (sgmii_csr_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (sgmii_csr_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (sgmii_csr_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (sgmii_csr_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (sgmii_csr_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (sgmii_csr_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (sgmii_csr_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (sgmii_csr_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (sgmii_csr_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (sgmii_csr_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (sgmii_csr_m0_agent_cp_data),                                      //  output,  width = 88,          .data
		.cp_startofpacket      (sgmii_csr_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (sgmii_csr_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (sgmii_csr_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (sgmii_csr_m0_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (sgmii_csr_m0_limiter_rsp_src_data),                               //   input,  width = 88,          .data
		.rp_channel            (sgmii_csr_m0_limiter_rsp_src_channel),                            //   input,   width = 3,          .channel
		.rp_startofpacket      (sgmii_csr_m0_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (sgmii_csr_m0_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (sgmii_csr_m0_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                // (terminated),                        
		.av_writeresponsevalid ()                                                                 // (terminated),                        
	);

	subsys_sgmii_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) gmii_sgmii_adapter_0_avalon_slave_agent (
		.clk                     (sgmii_csr_clk_out_clk_clk),                                          //   input,   width = 1,             clk.clk
		.reset                   (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),          //   input,   width = 1,       clk_reset.reset
		.m0_address              (gmii_sgmii_adapter_0_avalon_slave_agent_m0_address),                 //  output,   width = 7,              m0.address
		.m0_burstcount           (gmii_sgmii_adapter_0_avalon_slave_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (gmii_sgmii_adapter_0_avalon_slave_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (gmii_sgmii_adapter_0_avalon_slave_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (gmii_sgmii_adapter_0_avalon_slave_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (gmii_sgmii_adapter_0_avalon_slave_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (gmii_sgmii_adapter_0_avalon_slave_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (gmii_sgmii_adapter_0_avalon_slave_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (gmii_sgmii_adapter_0_avalon_slave_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (gmii_sgmii_adapter_0_avalon_slave_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (gmii_sgmii_adapter_0_avalon_slave_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (gmii_sgmii_adapter_0_avalon_slave_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (gmii_sgmii_adapter_0_avalon_slave_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (gmii_sgmii_adapter_0_avalon_slave_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (gmii_sgmii_adapter_0_avalon_slave_agent_rp_data),                    //  output,  width = 88,                .data
		.rp_startofpacket        (gmii_sgmii_adapter_0_avalon_slave_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                  //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                  //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                   //   input,  width = 88,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                          //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                            //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                //   input,   width = 3,                .channel
		.rf_sink_ready           (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_data),          //   input,  width = 89,                .data
		.rf_source_ready         (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_data),             //  output,  width = 89,                .data
		.rdata_fifo_sink_ready   (gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (gmii_sgmii_adapter_0_avalon_slave_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                              // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                               // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                                // (terminated),                              
	);

	subsys_sgmii_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo (
		.clk               (sgmii_csr_clk_out_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset             (sgmii_csr_reset_reset_bridge_in_reset_reset),                        //   input,   width = 1, clk_reset.reset
		.in_data           (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_data),             //   input,  width = 89,        in.data
		.in_valid          (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (gmii_sgmii_adapter_0_avalon_slave_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_data),          //  output,  width = 89,       out.data
		.out_valid         (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (gmii_sgmii_adapter_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated),                        
		.csr_read          (1'b0),                                                               // (terminated),                        
		.csr_write         (1'b0),                                                               // (terminated),                        
		.csr_readdata      (),                                                                   // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated),                        
		.almost_full_data  (),                                                                   // (terminated),                        
		.almost_empty_data (),                                                                   // (terminated),                        
		.in_empty          (1'b0),                                                               // (terminated),                        
		.out_empty         (),                                                                   // (terminated),                        
		.in_error          (1'b0),                                                               // (terminated),                        
		.out_error         (),                                                                   // (terminated),                        
		.in_channel        (1'b0),                                                               // (terminated),                        
		.out_channel       ()                                                                    // (terminated),                        
	);

	subsys_sgmii_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (60),
		.PKT_ORI_BURST_SIZE_L      (58),
		.PKT_RESPONSE_STATUS_H     (57),
		.PKT_RESPONSE_STATUS_L     (56),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (51),
		.PKT_PROTECTION_L          (49),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (45),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (47),
		.PKT_DEST_ID_L             (46),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (70),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) eth_tse_0_control_port_agent (
		.clk                     (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,             clk.clk
		.reset                   (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1,       clk_reset.reset
		.m0_address              (eth_tse_0_control_port_agent_m0_address),                    //  output,   width = 7,              m0.address
		.m0_burstcount           (eth_tse_0_control_port_agent_m0_burstcount),                 //  output,   width = 2,                .burstcount
		.m0_byteenable           (eth_tse_0_control_port_agent_m0_byteenable),                 //  output,   width = 2,                .byteenable
		.m0_debugaccess          (eth_tse_0_control_port_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (eth_tse_0_control_port_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (eth_tse_0_control_port_agent_m0_readdata),                   //   input,  width = 16,                .readdata
		.m0_readdatavalid        (eth_tse_0_control_port_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (eth_tse_0_control_port_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (eth_tse_0_control_port_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (eth_tse_0_control_port_agent_m0_writedata),                  //  output,  width = 16,                .writedata
		.m0_write                (eth_tse_0_control_port_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (eth_tse_0_control_port_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (eth_tse_0_control_port_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (eth_tse_0_control_port_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (eth_tse_0_control_port_agent_rp_data),                       //  output,  width = 70,                .data
		.rp_startofpacket        (eth_tse_0_control_port_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (eth_tse_0_control_port_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (eth_tse_0_control_port_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (eth_tse_0_control_port_burst_adapter_source0_data),          //   input,  width = 70,                .data
		.cp_startofpacket        (eth_tse_0_control_port_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (eth_tse_0_control_port_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (eth_tse_0_control_port_burst_adapter_source0_channel),       //   input,   width = 3,                .channel
		.rf_sink_ready           (eth_tse_0_control_port_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (eth_tse_0_control_port_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (eth_tse_0_control_port_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (eth_tse_0_control_port_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (eth_tse_0_control_port_agent_rsp_fifo_out_data),             //   input,  width = 71,                .data
		.rf_source_ready         (eth_tse_0_control_port_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (eth_tse_0_control_port_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (eth_tse_0_control_port_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (eth_tse_0_control_port_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (eth_tse_0_control_port_agent_rf_source_data),                //  output,  width = 71,                .data
		.rdata_fifo_sink_ready   (eth_tse_0_control_port_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_tse_0_control_port_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (eth_tse_0_control_port_agent_rdata_fifo_src_data),           //   input,  width = 18,                .data
		.rdata_fifo_src_ready    (eth_tse_0_control_port_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_tse_0_control_port_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (eth_tse_0_control_port_agent_rdata_fifo_src_data),           //  output,  width = 18,                .data
		.m0_response             (2'b00),                                                      // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                              
	);

	subsys_sgmii_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (71),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) eth_tse_0_control_port_agent_rsp_fifo (
		.clk               (sgmii_csr_clk_out_clk_clk),                               //   input,   width = 1,       clk.clk
		.reset             (sgmii_csr_reset_reset_bridge_in_reset_reset),             //   input,   width = 1, clk_reset.reset
		.in_data           (eth_tse_0_control_port_agent_rf_source_data),             //   input,  width = 71,        in.data
		.in_valid          (eth_tse_0_control_port_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (eth_tse_0_control_port_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (eth_tse_0_control_port_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (eth_tse_0_control_port_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (eth_tse_0_control_port_agent_rsp_fifo_out_data),          //  output,  width = 71,       out.data
		.out_valid         (eth_tse_0_control_port_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (eth_tse_0_control_port_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (eth_tse_0_control_port_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (eth_tse_0_control_port_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated),                        
		.csr_read          (1'b0),                                                    // (terminated),                        
		.csr_write         (1'b0),                                                    // (terminated),                        
		.csr_readdata      (),                                                        // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated),                        
		.almost_full_data  (),                                                        // (terminated),                        
		.almost_empty_data (),                                                        // (terminated),                        
		.in_empty          (1'b0),                                                    // (terminated),                        
		.out_empty         (),                                                        // (terminated),                        
		.in_error          (1'b0),                                                    // (terminated),                        
		.out_error         (),                                                        // (terminated),                        
		.in_channel        (1'b0),                                                    // (terminated),                        
		.out_channel       ()                                                         // (terminated),                        
	);

	subsys_sgmii_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (64),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) sgmii_debug_status_pio_s1_agent (
		.clk                     (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,             clk.clk
		.reset                   (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1,       clk_reset.reset
		.m0_address              (sgmii_debug_status_pio_s1_agent_m0_address),                 //  output,   width = 7,              m0.address
		.m0_burstcount           (sgmii_debug_status_pio_s1_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (sgmii_debug_status_pio_s1_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (sgmii_debug_status_pio_s1_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (sgmii_debug_status_pio_s1_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (sgmii_debug_status_pio_s1_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (sgmii_debug_status_pio_s1_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (sgmii_debug_status_pio_s1_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (sgmii_debug_status_pio_s1_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (sgmii_debug_status_pio_s1_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (sgmii_debug_status_pio_s1_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (sgmii_debug_status_pio_s1_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (sgmii_debug_status_pio_s1_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (sgmii_debug_status_pio_s1_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (sgmii_debug_status_pio_s1_agent_rp_data),                    //  output,  width = 88,                .data
		.rp_startofpacket        (sgmii_debug_status_pio_s1_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                      //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                      //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                       //   input,  width = 88,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                              //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                    //   input,   width = 3,                .channel
		.rf_sink_ready           (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 89,                .data
		.rf_source_ready         (sgmii_debug_status_pio_s1_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (sgmii_debug_status_pio_s1_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (sgmii_debug_status_pio_s1_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (sgmii_debug_status_pio_s1_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (sgmii_debug_status_pio_s1_agent_rf_source_data),             //  output,  width = 89,                .data
		.rdata_fifo_sink_ready   (sgmii_debug_status_pio_s1_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sgmii_debug_status_pio_s1_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (sgmii_debug_status_pio_s1_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (sgmii_debug_status_pio_s1_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgmii_debug_status_pio_s1_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (sgmii_debug_status_pio_s1_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                      // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                              
	);

	subsys_sgmii_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) sgmii_debug_status_pio_s1_agent_rsp_fifo (
		.clk               (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (sgmii_csr_reset_reset_bridge_in_reset_reset),                //   input,   width = 1, clk_reset.reset
		.in_data           (sgmii_debug_status_pio_s1_agent_rf_source_data),             //   input,  width = 89,        in.data
		.in_valid          (sgmii_debug_status_pio_s1_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (sgmii_debug_status_pio_s1_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (sgmii_debug_status_pio_s1_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (sgmii_debug_status_pio_s1_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 89,       out.data
		.out_valid         (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (sgmii_debug_status_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                        
		.csr_read          (1'b0),                                                       // (terminated),                        
		.csr_write         (1'b0),                                                       // (terminated),                        
		.csr_readdata      (),                                                           // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                        
		.almost_full_data  (),                                                           // (terminated),                        
		.almost_empty_data (),                                                           // (terminated),                        
		.in_empty          (1'b0),                                                       // (terminated),                        
		.out_empty         (),                                                           // (terminated),                        
		.in_error          (1'b0),                                                       // (terminated),                        
		.out_error         (),                                                           // (terminated),                        
		.in_channel        (1'b0),                                                       // (terminated),                        
		.out_channel       ()                                                            // (terminated),                        
	);

	subsys_sgmii_altera_merlin_router_1921_ibd2ssy router (
		.sink_ready         (sgmii_csr_m0_agent_cp_ready),                               //  output,   width = 1,      sink.ready
		.sink_valid         (sgmii_csr_m0_agent_cp_valid),                               //   input,   width = 1,          .valid
		.sink_data          (sgmii_csr_m0_agent_cp_data),                                //   input,  width = 88,          .data
		.sink_startofpacket (sgmii_csr_m0_agent_cp_startofpacket),                       //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (sgmii_csr_m0_agent_cp_endofpacket),                         //   input,   width = 1,          .endofpacket
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                          //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                                          //  output,   width = 1,          .valid
		.src_data           (router_src_data),                                           //  output,  width = 88,          .data
		.src_channel        (router_src_channel),                                        //  output,   width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_router_1921_zqi7ivq router_001 (
		.sink_ready         (gmii_sgmii_adapter_0_avalon_slave_agent_rp_ready),          //  output,   width = 1,      sink.ready
		.sink_valid         (gmii_sgmii_adapter_0_avalon_slave_agent_rp_valid),          //   input,   width = 1,          .valid
		.sink_data          (gmii_sgmii_adapter_0_avalon_slave_agent_rp_data),           //   input,  width = 88,          .data
		.sink_startofpacket (gmii_sgmii_adapter_0_avalon_slave_agent_rp_startofpacket),  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (gmii_sgmii_adapter_0_avalon_slave_agent_rp_endofpacket),    //   input,   width = 1,          .endofpacket
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                      //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                       //  output,  width = 88,          .data
		.src_channel        (router_001_src_channel),                                    //  output,   width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_router_1921_k5tktwa router_002 (
		.sink_ready         (eth_tse_0_control_port_agent_rp_ready),                     //  output,   width = 1,      sink.ready
		.sink_valid         (eth_tse_0_control_port_agent_rp_valid),                     //   input,   width = 1,          .valid
		.sink_data          (eth_tse_0_control_port_agent_rp_data),                      //   input,  width = 70,          .data
		.sink_startofpacket (eth_tse_0_control_port_agent_rp_startofpacket),             //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (eth_tse_0_control_port_agent_rp_endofpacket),               //   input,   width = 1,          .endofpacket
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                      //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                                       //  output,  width = 70,          .data
		.src_channel        (router_002_src_channel),                                    //  output,   width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_router_1921_zqi7ivq router_003 (
		.sink_ready         (sgmii_debug_status_pio_s1_agent_rp_ready),                  //  output,   width = 1,      sink.ready
		.sink_valid         (sgmii_debug_status_pio_s1_agent_rp_valid),                  //   input,   width = 1,          .valid
		.sink_data          (sgmii_debug_status_pio_s1_agent_rp_data),                   //   input,  width = 88,          .data
		.sink_startofpacket (sgmii_debug_status_pio_s1_agent_rp_startofpacket),          //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (sgmii_debug_status_pio_s1_agent_rp_endofpacket),            //   input,   width = 1,          .endofpacket
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                      //   input,   width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                      //  output,   width = 1,          .valid
		.src_data           (router_003_src_data),                                       //  output,  width = 88,          .data
		.src_channel        (router_003_src_channel),                                    //  output,   width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                              //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                 //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (64),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sgmii_csr_m0_limiter (
		.clk                    (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset                  (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                          //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                          //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                           //   input,  width = 88,          .data
		.cmd_sink_channel       (router_src_channel),                                        //   input,   width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                  //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                    //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (sgmii_csr_m0_limiter_cmd_src_ready),                        //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (sgmii_csr_m0_limiter_cmd_src_data),                         //  output,  width = 88,          .data
		.cmd_src_channel        (sgmii_csr_m0_limiter_cmd_src_channel),                      //  output,   width = 3,          .channel
		.cmd_src_startofpacket  (sgmii_csr_m0_limiter_cmd_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (sgmii_csr_m0_limiter_cmd_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                         //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                         //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                       //   input,   width = 3,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                          //   input,  width = 88,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                 //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                   //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (sgmii_csr_m0_limiter_rsp_src_ready),                        //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (sgmii_csr_m0_limiter_rsp_src_valid),                        //  output,   width = 1,          .valid
		.rsp_src_data           (sgmii_csr_m0_limiter_rsp_src_data),                         //  output,  width = 88,          .data
		.rsp_src_channel        (sgmii_csr_m0_limiter_rsp_src_channel),                      //  output,   width = 3,          .channel
		.rsp_src_startofpacket  (sgmii_csr_m0_limiter_rsp_src_startofpacket),                //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (sgmii_csr_m0_limiter_rsp_src_endofpacket),                  //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (sgmii_csr_m0_limiter_cmd_valid_data)                        //  output,   width = 3, cmd_valid.data
	);

	subsys_sgmii_altera_merlin_burst_adapter_1923_msydpny #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (70),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (32),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) eth_tse_0_control_port_burst_adapter (
		.clk                   (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,       cr0.clk
		.reset                 (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (eth_tse_0_control_port_cmd_width_adapter_src_valid),         //   input,   width = 1,     sink0.valid
		.sink0_data            (eth_tse_0_control_port_cmd_width_adapter_src_data),          //   input,  width = 70,          .data
		.sink0_channel         (eth_tse_0_control_port_cmd_width_adapter_src_channel),       //   input,   width = 3,          .channel
		.sink0_startofpacket   (eth_tse_0_control_port_cmd_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (eth_tse_0_control_port_cmd_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink0_ready           (eth_tse_0_control_port_cmd_width_adapter_src_ready),         //  output,   width = 1,          .ready
		.source0_valid         (eth_tse_0_control_port_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (eth_tse_0_control_port_burst_adapter_source0_data),          //  output,  width = 70,          .data
		.source0_channel       (eth_tse_0_control_port_burst_adapter_source0_channel),       //  output,   width = 3,          .channel
		.source0_startofpacket (eth_tse_0_control_port_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (eth_tse_0_control_port_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (eth_tse_0_control_port_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	subsys_sgmii_altera_merlin_demultiplexer_1921_gjflily cmd_demux (
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,        clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,  clk_reset.reset
		.sink_ready         (sgmii_csr_m0_limiter_cmd_src_ready),                        //  output,   width = 1,       sink.ready
		.sink_channel       (sgmii_csr_m0_limiter_cmd_src_channel),                      //   input,   width = 3,           .channel
		.sink_data          (sgmii_csr_m0_limiter_cmd_src_data),                         //   input,  width = 88,           .data
		.sink_startofpacket (sgmii_csr_m0_limiter_cmd_src_startofpacket),                //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (sgmii_csr_m0_limiter_cmd_src_endofpacket),                  //   input,   width = 1,           .endofpacket
		.sink_valid         (sgmii_csr_m0_limiter_cmd_valid_data),                       //   input,   width = 3, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                      //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                      //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                       //  output,  width = 88,           .data
		.src0_channel       (cmd_demux_src0_channel),                                    //  output,   width = 3,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                              //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                      //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                      //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                       //  output,  width = 88,           .data
		.src1_channel       (cmd_demux_src1_channel),                                    //  output,   width = 3,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                              //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                //  output,   width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                      //   input,   width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                      //  output,   width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                       //  output,  width = 88,           .data
		.src2_channel       (cmd_demux_src2_channel),                                    //  output,   width = 3,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                              //  output,   width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                 //  output,   width = 1,           .endofpacket
	);

	subsys_sgmii_altera_merlin_multiplexer_1921_gc7bcei cmd_mux (
		.clk                 (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset               (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                          //  output,  width = 88,          .data
		.src_channel         (cmd_mux_src_channel),                                       //  output,   width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                      //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                      //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                    //   input,   width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                                       //   input,  width = 88,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                              //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                 //   input,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_multiplexer_1921_gc7bcei cmd_mux_001 (
		.clk                 (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset               (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                      //  output,  width = 88,          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //  output,   width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                      //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                      //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                    //   input,   width = 3,          .channel
		.sink0_data          (cmd_demux_src1_data),                                       //   input,  width = 88,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                              //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                 //   input,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_multiplexer_1921_gc7bcei cmd_mux_002 (
		.clk                 (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset               (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //  output,   width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                      //  output,  width = 88,          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //  output,   width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                      //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                      //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                    //   input,   width = 3,          .channel
		.sink0_data          (cmd_demux_src2_data),                                       //   input,  width = 88,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                              //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                 //   input,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_demultiplexer_1921_zomz5va rsp_demux (
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                      //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                    //   input,   width = 3,          .channel
		.sink_data          (router_001_src_data),                                       //   input,  width = 88,          .data
		.sink_startofpacket (router_001_src_startofpacket),                              //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                      //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                       //  output,  width = 88,          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //  output,   width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_demultiplexer_1921_zomz5va rsp_demux_001 (
		.clk                (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.sink_ready         (eth_tse_0_control_port_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (eth_tse_0_control_port_rsp_width_adapter_src_channel),       //   input,   width = 3,          .channel
		.sink_data          (eth_tse_0_control_port_rsp_width_adapter_src_data),          //   input,  width = 88,          .data
		.sink_startofpacket (eth_tse_0_control_port_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (eth_tse_0_control_port_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (eth_tse_0_control_port_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //  output,  width = 88,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //  output,   width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_demultiplexer_1921_zomz5va rsp_demux_002 (
		.clk                (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset              (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                      //  output,   width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                    //   input,   width = 3,          .channel
		.sink_data          (router_003_src_data),                                       //   input,  width = 88,          .data
		.sink_startofpacket (router_003_src_startofpacket),                              //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                //   input,   width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                      //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //  output,  width = 88,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //  output,   width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                             //  output,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_multiplexer_1921_i33pauy rsp_mux (
		.clk                 (sgmii_csr_clk_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset               (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                          //  output,  width = 88,          .data
		.src_channel         (rsp_mux_src_channel),                                       //  output,   width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                      //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                      //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                    //   input,   width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                                       //   input,  width = 88,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                              //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                  //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                  //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                //   input,   width = 3,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                   //   input,  width = 88,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                            //   input,   width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                  //  output,   width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                  //   input,   width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                //   input,   width = 3,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                   //   input,  width = 88,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                             //   input,   width = 1,          .endofpacket
	);

	subsys_sgmii_altera_merlin_width_adapter_1920_vlgnzxq #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (57),
		.IN_PKT_RESPONSE_STATUS_L      (56),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (58),
		.IN_PKT_ORI_BURST_SIZE_H       (60),
		.IN_ST_DATA_W                  (70),
		.OUT_PKT_ADDR_H                (42),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (49),
		.OUT_PKT_TRANS_COMPRESSED_READ (43),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (75),
		.OUT_PKT_RESPONSE_STATUS_L     (74),
		.OUT_PKT_TRANS_EXCLUSIVE       (48),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (76),
		.OUT_PKT_ORI_BURST_SIZE_H      (78),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) eth_tse_0_control_port_rsp_width_adapter (
		.clk                  (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset                (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                       //   input,   width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                     //   input,   width = 3,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                               //   input,   width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                 //   input,   width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                       //  output,   width = 1,          .ready
		.in_data              (router_002_src_data),                                        //   input,  width = 70,          .data
		.out_endofpacket      (eth_tse_0_control_port_rsp_width_adapter_src_endofpacket),   //  output,   width = 1,       src.endofpacket
		.out_data             (eth_tse_0_control_port_rsp_width_adapter_src_data),          //  output,  width = 88,          .data
		.out_channel          (eth_tse_0_control_port_rsp_width_adapter_src_channel),       //  output,   width = 3,          .channel
		.out_valid            (eth_tse_0_control_port_rsp_width_adapter_src_valid),         //  output,   width = 1,          .valid
		.out_ready            (eth_tse_0_control_port_rsp_width_adapter_src_ready),         //   input,   width = 1,          .ready
		.out_startofpacket    (eth_tse_0_control_port_rsp_width_adapter_src_startofpacket), //  output,   width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated),                        
	);

	subsys_sgmii_altera_merlin_width_adapter_1920_nixemsy #(
		.IN_PKT_ADDR_H                 (42),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (49),
		.IN_PKT_TRANS_COMPRESSED_READ  (43),
		.IN_PKT_TRANS_WRITE            (45),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (75),
		.IN_PKT_RESPONSE_STATUS_L      (74),
		.IN_PKT_TRANS_EXCLUSIVE        (48),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (76),
		.IN_PKT_ORI_BURST_SIZE_H       (78),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (57),
		.OUT_PKT_RESPONSE_STATUS_L     (56),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (58),
		.OUT_PKT_ORI_BURST_SIZE_H      (60),
		.OUT_ST_DATA_W                 (70),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) eth_tse_0_control_port_cmd_width_adapter (
		.clk                  (sgmii_csr_clk_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset                (sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                      //   input,   width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                    //   input,   width = 3,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                              //   input,   width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                //   input,   width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                      //  output,   width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                       //   input,  width = 88,          .data
		.out_endofpacket      (eth_tse_0_control_port_cmd_width_adapter_src_endofpacket),   //  output,   width = 1,       src.endofpacket
		.out_data             (eth_tse_0_control_port_cmd_width_adapter_src_data),          //  output,  width = 70,          .data
		.out_channel          (eth_tse_0_control_port_cmd_width_adapter_src_channel),       //  output,   width = 3,          .channel
		.out_valid            (eth_tse_0_control_port_cmd_width_adapter_src_valid),         //  output,   width = 1,          .valid
		.out_ready            (eth_tse_0_control_port_cmd_width_adapter_src_ready),         //   input,   width = 1,          .ready
		.out_startofpacket    (eth_tse_0_control_port_cmd_width_adapter_src_startofpacket), //  output,   width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated),                        
	);

endmodule
