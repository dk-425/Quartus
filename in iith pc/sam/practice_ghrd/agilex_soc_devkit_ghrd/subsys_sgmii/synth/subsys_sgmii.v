// subsys_sgmii.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module subsys_sgmii (
		input  wire        emac_gtx_clk_clk,                //           emac_gtx_clk.clk
		output wire        emac_tx_clk_in_clk,              //         emac_tx_clk_in.clk
		output wire        emac_rx_clk_in_clk,              //         emac_rx_clk_in.clk
		input  wire        emac_tx_reset_reset_n,           //          emac_tx_reset.reset_n
		input  wire        emac_rx_reset_reset_n,           //          emac_rx_reset.reset_n
		input  wire        mdio_gmii_mdi_i,                 //                   mdio.gmii_mdi_i
		output wire        mdio_gmii_mdo_o,                 //                       .gmii_mdo_o
		output wire        mdio_gmii_mdo_o_e,               //                       .gmii_mdo_o_e
		input  wire [7:0]  splitter_emac_phy_txd_o,         //          splitter_emac.phy_txd_o
		input  wire        splitter_emac_phy_txen_o,        //                       .phy_txen_o
		input  wire        splitter_emac_phy_txer_o,        //                       .phy_txer_o
		input  wire [1:0]  splitter_emac_phy_mac_speed_o,   //                       .phy_mac_speed_o
		input  wire        splitter_emac_gmii_mdo_o,        //                       .gmii_mdo_o
		input  wire        splitter_emac_gmii_mdo_o_e,      //                       .gmii_mdo_o_e
		input  wire        splitter_emac_ptp_pps_o,         //                       .ptp_pps_o
		output wire        splitter_emac_phy_rxdv_i,        //                       .phy_rxdv_i
		output wire        splitter_emac_phy_rxer_i,        //                       .phy_rxer_i
		output wire [7:0]  splitter_emac_phy_rxd_i,         //                       .phy_rxd_i
		output wire        splitter_emac_phy_col_i,         //                       .phy_col_i
		output wire        splitter_emac_phy_crs_i,         //                       .phy_crs_i
		output wire        splitter_emac_gmii_mdi_i,        //                       .gmii_mdi_i
		output wire        splitter_emac_ptp_aux_ts_trig_i, //                       .ptp_aux_ts_trig_i
		input  wire        splitter_emac_ptp_tstmp_data,    //                       .ptp_tstmp_data
		input  wire        splitter_emac_ptp_tstmp_en,      //                       .ptp_tstmp_en
		input  wire        ptp_ptp_aux_ts_trig_i,           //                    ptp.ptp_aux_ts_trig_i
		output wire        ptp_ptp_pps_o,                   //                       .ptp_pps_o
		output wire        ptp_ptp_tstmp_data,              //                       .ptp_tstmp_data
		output wire        ptp_ptp_tstmp_en,                //                       .ptp_tstmp_en
		output wire        sgmii_status_set_10,             //           sgmii_status.set_10
		output wire        sgmii_status_set_1000,           //                       .set_1000
		output wire        sgmii_status_set_100,            //                       .set_100
		output wire        sgmii_status_hd_ena,             //                       .hd_ena
		output wire        status_led_crs,                  //             status_led.crs
		output wire        status_led_link,                 //                       .link
		output wire        status_led_panel_link,           //                       .panel_link
		output wire        status_led_col,                  //                       .col
		output wire        status_led_an,                   //                       .an
		output wire        status_led_char_err,             //                       .char_err
		output wire        status_led_disp_err,             //                       .disp_err
		output wire        serdes_control_export,           //         serdes_control.export
		output wire        lvds_tx_pll_locked_export,       //     lvds_tx_pll_locked.export
		input  wire        serial_connection_rxp_0,         //      serial_connection.rxp_0
		input  wire        serial_connection_rxn_0,         //                       .rxn_0
		output wire        serial_connection_txp_0,         //                       .txp_0
		output wire        serial_connection_txn_0,         //                       .txn_0
		input  wire        clk_125_clk,                     //                clk_125.clk
		output wire        csr_waitrequest,                 //                    csr.waitrequest
		output wire [31:0] csr_readdata,                    //                       .readdata
		output wire        csr_readdatavalid,               //                       .readdatavalid
		input  wire [0:0]  csr_burstcount,                  //                       .burstcount
		input  wire [31:0] csr_writedata,                   //                       .writedata
		input  wire [6:0]  csr_address,                     //                       .address
		input  wire        csr_write,                       //                       .write
		input  wire        csr_read,                        //                       .read
		input  wire [3:0]  csr_byteenable,                  //                       .byteenable
		input  wire        csr_debugaccess,                 //                       .debugaccess
		input  wire        csr_clk_clk,                     //                csr_clk.clk
		input  wire [12:0] sgmii_debug_status_pio_export,   // sgmii_debug_status_pio.export
		input  wire        rst_in_reset_n                   //                 rst_in.reset_n
	);

	wire         sgmii_csr_clk_out_clk_clk;                                     // sgmii_csr_clk:out_clk -> [eth_tse_0:clk, gmii_sgmii_adapter_0:clk, mm_interconnect_0:sgmii_csr_clk_out_clk_clk, sgmii_csr:clk, sgmii_debug_status_pio:clk, sgmii_rst_in:clk]
	wire         sgmii_clk_125_out_clk_clk;                                     // sgmii_clk_125:out_clk -> eth_tse_0:ref_clk
	wire         eth_tse_0_pcs_receive_clock_connection_clk;                    // eth_tse_0:rx_clk -> [gmii_sgmii_adapter_0:pcs_rx_clk, rst_controller_001:clk]
	wire         eth_tse_0_pcs_transmit_clock_connection_clk;                   // eth_tse_0:tx_clk -> [gmii_sgmii_adapter_0:pcs_tx_clk, rst_controller:clk]
	wire         gmii_sgmii_adapter_0_hps_gmii_phy_rx_clk_i;                    // gmii_sgmii_adapter_0:mac_rx_clk -> emac_splitter_0:mac_rx_clk
	wire   [7:0] emac_splitter_0_hps_gmii_phy_txd_o;                            // emac_splitter_0:mac_txd -> gmii_sgmii_adapter_0:mac_txd
	wire         gmii_sgmii_adapter_0_hps_gmii_phy_rxer_i;                      // gmii_sgmii_adapter_0:mac_rxer -> emac_splitter_0:mac_rxer
	wire         emac_splitter_0_hps_gmii_phy_tx_clk_o;                         // emac_splitter_0:mac_tx_clk_o -> gmii_sgmii_adapter_0:mac_tx_clk_o
	wire         emac_splitter_0_hps_gmii_rst_tx_n;                             // emac_splitter_0:mac_rst_tx_n -> gmii_sgmii_adapter_0:mac_rst_tx_n
	wire         gmii_sgmii_adapter_0_hps_gmii_phy_col_i;                       // gmii_sgmii_adapter_0:mac_col -> emac_splitter_0:mac_col
	wire         gmii_sgmii_adapter_0_hps_gmii_phy_crs_i;                       // gmii_sgmii_adapter_0:mac_crs -> emac_splitter_0:mac_crs
	wire         emac_splitter_0_hps_gmii_phy_txen_o;                           // emac_splitter_0:mac_txen -> gmii_sgmii_adapter_0:mac_txen
	wire         emac_splitter_0_hps_gmii_rst_rx_n;                             // emac_splitter_0:mac_rst_rx_n -> gmii_sgmii_adapter_0:mac_rst_rx_n
	wire         emac_splitter_0_hps_gmii_phy_txer_o;                           // emac_splitter_0:mac_txer -> gmii_sgmii_adapter_0:mac_txer
	wire         gmii_sgmii_adapter_0_hps_gmii_phy_tx_clk_i;                    // gmii_sgmii_adapter_0:mac_tx_clk_i -> emac_splitter_0:mac_tx_clk_i
	wire   [7:0] gmii_sgmii_adapter_0_hps_gmii_phy_rxd_i;                       // gmii_sgmii_adapter_0:mac_rxd -> emac_splitter_0:mac_rxd
	wire   [1:0] emac_splitter_0_hps_gmii_phy_mac_speed_o;                      // emac_splitter_0:mac_speed -> gmii_sgmii_adapter_0:mac_speed
	wire         gmii_sgmii_adapter_0_hps_gmii_phy_rxdv_i;                      // gmii_sgmii_adapter_0:mac_rxdv -> emac_splitter_0:mac_rxdv
	wire         eth_tse_0_clock_enable_connection_tx_clkena;                   // eth_tse_0:tx_clkena -> gmii_sgmii_adapter_0:pcs_txclk_ena
	wire         eth_tse_0_clock_enable_connection_rx_clkena;                   // eth_tse_0:rx_clkena -> gmii_sgmii_adapter_0:pcs_rxclk_ena
	wire   [7:0] eth_tse_0_gmii_connection_gmii_rx_d;                           // eth_tse_0:gmii_rx_d -> gmii_sgmii_adapter_0:pcs_gmii_rx_d
	wire         eth_tse_0_gmii_connection_gmii_rx_err;                         // eth_tse_0:gmii_rx_err -> gmii_sgmii_adapter_0:pcs_gmii_rx_err
	wire         eth_tse_0_gmii_connection_gmii_rx_dv;                          // eth_tse_0:gmii_rx_dv -> gmii_sgmii_adapter_0:pcs_gmii_rx_dv
	wire   [7:0] gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_d;                       // gmii_sgmii_adapter_0:pcs_gmii_tx_d -> eth_tse_0:gmii_tx_d
	wire         gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_en;                      // gmii_sgmii_adapter_0:pcs_gmii_tx_en -> eth_tse_0:gmii_tx_en
	wire         gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_err;                     // gmii_sgmii_adapter_0:pcs_gmii_tx_err -> eth_tse_0:gmii_tx_err
	wire         gmii_sgmii_adapter_0_pcs_mii_mii_tx_en;                        // gmii_sgmii_adapter_0:pcs_mii_tx_en -> eth_tse_0:mii_tx_en
	wire   [3:0] eth_tse_0_mii_connection_mii_rx_d;                             // eth_tse_0:mii_rx_d -> gmii_sgmii_adapter_0:pcs_mii_rx_d
	wire         eth_tse_0_mii_connection_mii_col;                              // eth_tse_0:mii_col -> gmii_sgmii_adapter_0:pcs_mii_col
	wire   [3:0] gmii_sgmii_adapter_0_pcs_mii_mii_tx_d;                         // gmii_sgmii_adapter_0:pcs_mii_tx_d -> eth_tse_0:mii_tx_d
	wire         gmii_sgmii_adapter_0_pcs_mii_mii_tx_err;                       // gmii_sgmii_adapter_0:pcs_mii_tx_err -> eth_tse_0:mii_tx_err
	wire         eth_tse_0_mii_connection_mii_crs;                              // eth_tse_0:mii_crs -> gmii_sgmii_adapter_0:pcs_mii_crs
	wire         eth_tse_0_mii_connection_mii_rx_err;                           // eth_tse_0:mii_rx_err -> gmii_sgmii_adapter_0:pcs_mii_rx_err
	wire         eth_tse_0_mii_connection_mii_rx_dv;                            // eth_tse_0:mii_rx_dv -> gmii_sgmii_adapter_0:pcs_mii_rx_dv
	wire         sgmii_rst_in_out_reset_reset;                                  // sgmii_rst_in:out_reset_n -> [eth_tse_0:reset, gmii_sgmii_adapter_0:rst_n, mm_interconnect_0:sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_0:sgmii_csr_reset_reset_bridge_in_reset_reset, sgmii_csr:reset, sgmii_debug_status_pio:reset_n]
	wire         sgmii_csr_m0_waitrequest;                                      // mm_interconnect_0:sgmii_csr_m0_waitrequest -> sgmii_csr:m0_waitrequest
	wire  [31:0] sgmii_csr_m0_readdata;                                         // mm_interconnect_0:sgmii_csr_m0_readdata -> sgmii_csr:m0_readdata
	wire         sgmii_csr_m0_debugaccess;                                      // sgmii_csr:m0_debugaccess -> mm_interconnect_0:sgmii_csr_m0_debugaccess
	wire   [6:0] sgmii_csr_m0_address;                                          // sgmii_csr:m0_address -> mm_interconnect_0:sgmii_csr_m0_address
	wire         sgmii_csr_m0_read;                                             // sgmii_csr:m0_read -> mm_interconnect_0:sgmii_csr_m0_read
	wire   [3:0] sgmii_csr_m0_byteenable;                                       // sgmii_csr:m0_byteenable -> mm_interconnect_0:sgmii_csr_m0_byteenable
	wire         sgmii_csr_m0_readdatavalid;                                    // mm_interconnect_0:sgmii_csr_m0_readdatavalid -> sgmii_csr:m0_readdatavalid
	wire  [31:0] sgmii_csr_m0_writedata;                                        // sgmii_csr:m0_writedata -> mm_interconnect_0:sgmii_csr_m0_writedata
	wire         sgmii_csr_m0_write;                                            // sgmii_csr:m0_write -> mm_interconnect_0:sgmii_csr_m0_write
	wire   [0:0] sgmii_csr_m0_burstcount;                                       // sgmii_csr:m0_burstcount -> mm_interconnect_0:sgmii_csr_m0_burstcount
	wire  [31:0] mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_readdata;  // gmii_sgmii_adapter_0:readdata -> mm_interconnect_0:gmii_sgmii_adapter_0_avalon_slave_readdata
	wire   [0:0] mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_address;   // mm_interconnect_0:gmii_sgmii_adapter_0_avalon_slave_address -> gmii_sgmii_adapter_0:addr
	wire         mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_read;      // mm_interconnect_0:gmii_sgmii_adapter_0_avalon_slave_read -> gmii_sgmii_adapter_0:read
	wire         mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_write;     // mm_interconnect_0:gmii_sgmii_adapter_0_avalon_slave_write -> gmii_sgmii_adapter_0:write
	wire  [31:0] mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_writedata; // mm_interconnect_0:gmii_sgmii_adapter_0_avalon_slave_writedata -> gmii_sgmii_adapter_0:writedata
	wire  [15:0] mm_interconnect_0_eth_tse_0_control_port_readdata;             // eth_tse_0:reg_data_out -> mm_interconnect_0:eth_tse_0_control_port_readdata
	wire         mm_interconnect_0_eth_tse_0_control_port_waitrequest;          // eth_tse_0:reg_busy -> mm_interconnect_0:eth_tse_0_control_port_waitrequest
	wire   [4:0] mm_interconnect_0_eth_tse_0_control_port_address;              // mm_interconnect_0:eth_tse_0_control_port_address -> eth_tse_0:reg_addr
	wire         mm_interconnect_0_eth_tse_0_control_port_read;                 // mm_interconnect_0:eth_tse_0_control_port_read -> eth_tse_0:reg_rd
	wire         mm_interconnect_0_eth_tse_0_control_port_write;                // mm_interconnect_0:eth_tse_0_control_port_write -> eth_tse_0:reg_wr
	wire  [15:0] mm_interconnect_0_eth_tse_0_control_port_writedata;            // mm_interconnect_0:eth_tse_0_control_port_writedata -> eth_tse_0:reg_data_in
	wire         mm_interconnect_0_sgmii_debug_status_pio_s1_chipselect;        // mm_interconnect_0:sgmii_debug_status_pio_s1_chipselect -> sgmii_debug_status_pio:chipselect
	wire  [31:0] mm_interconnect_0_sgmii_debug_status_pio_s1_readdata;          // sgmii_debug_status_pio:readdata -> mm_interconnect_0:sgmii_debug_status_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_sgmii_debug_status_pio_s1_address;           // mm_interconnect_0:sgmii_debug_status_pio_s1_address -> sgmii_debug_status_pio:address
	wire         mm_interconnect_0_sgmii_debug_status_pio_s1_write;             // mm_interconnect_0:sgmii_debug_status_pio_s1_write -> sgmii_debug_status_pio:write_n
	wire  [31:0] mm_interconnect_0_sgmii_debug_status_pio_s1_writedata;         // mm_interconnect_0:sgmii_debug_status_pio_s1_writedata -> sgmii_debug_status_pio:writedata
	wire         rst_controller_reset_out_reset;                                // rst_controller:reset_out -> eth_tse_0:reset_tx_clk
	wire         gmii_sgmii_adapter_0_pcs_transmit_reset_reset;                 // gmii_sgmii_adapter_0:pcs_rst_tx -> rst_controller:reset_in0
	wire         rst_controller_001_reset_out_reset;                            // rst_controller_001:reset_out -> eth_tse_0:reset_rx_clk
	wire         gmii_sgmii_adapter_0_pcs_receive_reset_reset;                  // gmii_sgmii_adapter_0:pcs_rst_rx -> rst_controller_001:reset_in0

	emac_splitter_0 emac_splitter_0 (
		.phy_txclk_o        (emac_gtx_clk_clk),                           //   input,  width = 1,   emac_gtx_clk.clk
		.clk_tx_i           (emac_tx_clk_in_clk),                         //  output,  width = 1, emac_tx_clk_in.clk
		.clk_rx_i           (emac_rx_clk_in_clk),                         //  output,  width = 1, emac_rx_clk_in.clk
		.rst_tx_n_o         (emac_tx_reset_reset_n),                      //   input,  width = 1,  emac_tx_reset.reset_n
		.rst_rx_n_o         (emac_rx_reset_reset_n),                      //   input,  width = 1,  emac_rx_reset.reset_n
		.mac_tx_clk_i       (gmii_sgmii_adapter_0_hps_gmii_phy_tx_clk_i), //   input,  width = 1,       hps_gmii.phy_tx_clk_i
		.mac_rx_clk         (gmii_sgmii_adapter_0_hps_gmii_phy_rx_clk_i), //   input,  width = 1,               .phy_rx_clk_i
		.mac_rxdv           (gmii_sgmii_adapter_0_hps_gmii_phy_rxdv_i),   //   input,  width = 1,               .phy_rxdv_i
		.mac_rxer           (gmii_sgmii_adapter_0_hps_gmii_phy_rxer_i),   //   input,  width = 1,               .phy_rxer_i
		.mac_rxd            (gmii_sgmii_adapter_0_hps_gmii_phy_rxd_i),    //   input,  width = 8,               .phy_rxd_i
		.mac_col            (gmii_sgmii_adapter_0_hps_gmii_phy_col_i),    //   input,  width = 1,               .phy_col_i
		.mac_crs            (gmii_sgmii_adapter_0_hps_gmii_phy_crs_i),    //   input,  width = 1,               .phy_crs_i
		.mac_tx_clk_o       (emac_splitter_0_hps_gmii_phy_tx_clk_o),      //  output,  width = 1,               .phy_tx_clk_o
		.mac_rst_tx_n       (emac_splitter_0_hps_gmii_rst_tx_n),          //  output,  width = 1,               .rst_tx_n
		.mac_rst_rx_n       (emac_splitter_0_hps_gmii_rst_rx_n),          //  output,  width = 1,               .rst_rx_n
		.mac_txd            (emac_splitter_0_hps_gmii_phy_txd_o),         //  output,  width = 8,               .phy_txd_o
		.mac_txen           (emac_splitter_0_hps_gmii_phy_txen_o),        //  output,  width = 1,               .phy_txen_o
		.mac_txer           (emac_splitter_0_hps_gmii_phy_txer_o),        //  output,  width = 1,               .phy_txer_o
		.mac_speed          (emac_splitter_0_hps_gmii_phy_mac_speed_o),   //  output,  width = 2,               .phy_mac_speed_o
		.mdi_in             (mdio_gmii_mdi_i),                            //   input,  width = 1,           mdio.gmii_mdi_i
		.mdo_out            (mdio_gmii_mdo_o),                            //  output,  width = 1,               .gmii_mdo_o
		.mdo_out_en         (mdio_gmii_mdo_o_e),                          //  output,  width = 1,               .gmii_mdo_o_e
		.phy_txd_o          (splitter_emac_phy_txd_o),                    //   input,  width = 8,           emac.phy_txd_o
		.phy_txen_o         (splitter_emac_phy_txen_o),                   //   input,  width = 1,               .phy_txen_o
		.phy_txer_o         (splitter_emac_phy_txer_o),                   //   input,  width = 1,               .phy_txer_o
		.phy_mac_speed_o    (splitter_emac_phy_mac_speed_o),              //   input,  width = 2,               .phy_mac_speed_o
		.mdo_o              (splitter_emac_gmii_mdo_o),                   //   input,  width = 1,               .gmii_mdo_o
		.mdo_o_e            (splitter_emac_gmii_mdo_o_e),                 //   input,  width = 1,               .gmii_mdo_o_e
		.ptp_pps_o          (splitter_emac_ptp_pps_o),                    //   input,  width = 1,               .ptp_pps_o
		.phy_rxdv_i         (splitter_emac_phy_rxdv_i),                   //  output,  width = 1,               .phy_rxdv_i
		.phy_rxer_i         (splitter_emac_phy_rxer_i),                   //  output,  width = 1,               .phy_rxer_i
		.phy_rxd_i          (splitter_emac_phy_rxd_i),                    //  output,  width = 8,               .phy_rxd_i
		.phy_col_i          (splitter_emac_phy_col_i),                    //  output,  width = 1,               .phy_col_i
		.phy_crs_i          (splitter_emac_phy_crs_i),                    //  output,  width = 1,               .phy_crs_i
		.mdi_i              (splitter_emac_gmii_mdi_i),                   //  output,  width = 1,               .gmii_mdi_i
		.ptp_aux_ts_trig_i  (splitter_emac_ptp_aux_ts_trig_i),            //  output,  width = 1,               .ptp_aux_ts_trig_i
		.ptp_tstmp_data     (splitter_emac_ptp_tstmp_data),               //   input,  width = 1,               .ptp_tstmp_data
		.ptp_tstmp_en       (splitter_emac_ptp_tstmp_en),                 //   input,  width = 1,               .ptp_tstmp_en
		.ptp_aux_ts_trig_in (ptp_ptp_aux_ts_trig_i),                      //   input,  width = 1,            ptp.ptp_aux_ts_trig_i
		.ptp_pps_out        (ptp_ptp_pps_o),                              //  output,  width = 1,               .ptp_pps_o
		.ptp_tstmp_data_out (ptp_ptp_tstmp_data),                         //  output,  width = 1,               .ptp_tstmp_data
		.ptp_tstmp_en_out   (ptp_ptp_tstmp_en)                            //  output,  width = 1,               .ptp_tstmp_en
	);

	eth_tse_0 eth_tse_0 (
		.ref_clk            (sgmii_clk_125_out_clk_clk),                            //   input,   width = 1,  pcs_ref_clk_clock_connection.clk
		.clk                (sgmii_csr_clk_out_clk_clk),                            //   input,   width = 1, control_port_clock_connection.clk
		.reset              (~sgmii_rst_in_out_reset_reset),                        //   input,   width = 1,              reset_connection.reset
		.reg_addr           (mm_interconnect_0_eth_tse_0_control_port_address),     //   input,   width = 5,                  control_port.address
		.reg_data_out       (mm_interconnect_0_eth_tse_0_control_port_readdata),    //  output,  width = 16,                              .readdata
		.reg_rd             (mm_interconnect_0_eth_tse_0_control_port_read),        //   input,   width = 1,                              .read
		.reg_data_in        (mm_interconnect_0_eth_tse_0_control_port_writedata),   //   input,  width = 16,                              .writedata
		.reg_wr             (mm_interconnect_0_eth_tse_0_control_port_write),       //   input,   width = 1,                              .write
		.reg_busy           (mm_interconnect_0_eth_tse_0_control_port_waitrequest), //  output,   width = 1,                              .waitrequest
		.tx_clkena          (eth_tse_0_clock_enable_connection_tx_clkena),          //  output,   width = 1,       clock_enable_connection.tx_clkena
		.rx_clkena          (eth_tse_0_clock_enable_connection_rx_clkena),          //  output,   width = 1,                              .rx_clkena
		.gmii_rx_dv         (eth_tse_0_gmii_connection_gmii_rx_dv),                 //  output,   width = 1,               gmii_connection.gmii_rx_dv
		.gmii_rx_d          (eth_tse_0_gmii_connection_gmii_rx_d),                  //  output,   width = 8,                              .gmii_rx_d
		.gmii_rx_err        (eth_tse_0_gmii_connection_gmii_rx_err),                //  output,   width = 1,                              .gmii_rx_err
		.gmii_tx_en         (gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_en),             //   input,   width = 1,                              .gmii_tx_en
		.gmii_tx_d          (gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_d),              //   input,   width = 8,                              .gmii_tx_d
		.gmii_tx_err        (gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_err),            //   input,   width = 1,                              .gmii_tx_err
		.mii_rx_dv          (eth_tse_0_mii_connection_mii_rx_dv),                   //  output,   width = 1,                mii_connection.mii_rx_dv
		.mii_rx_d           (eth_tse_0_mii_connection_mii_rx_d),                    //  output,   width = 4,                              .mii_rx_d
		.mii_rx_err         (eth_tse_0_mii_connection_mii_rx_err),                  //  output,   width = 1,                              .mii_rx_err
		.mii_tx_en          (gmii_sgmii_adapter_0_pcs_mii_mii_tx_en),               //   input,   width = 1,                              .mii_tx_en
		.mii_tx_d           (gmii_sgmii_adapter_0_pcs_mii_mii_tx_d),                //   input,   width = 4,                              .mii_tx_d
		.mii_tx_err         (gmii_sgmii_adapter_0_pcs_mii_mii_tx_err),              //   input,   width = 1,                              .mii_tx_err
		.mii_col            (eth_tse_0_mii_connection_mii_col),                     //  output,   width = 1,                              .mii_col
		.mii_crs            (eth_tse_0_mii_connection_mii_crs),                     //  output,   width = 1,                              .mii_crs
		.set_10             (sgmii_status_set_10),                                  //  output,   width = 1,       sgmii_status_connection.set_10
		.set_1000           (sgmii_status_set_1000),                                //  output,   width = 1,                              .set_1000
		.set_100            (sgmii_status_set_100),                                 //  output,   width = 1,                              .set_100
		.hd_ena             (sgmii_status_hd_ena),                                  //  output,   width = 1,                              .hd_ena
		.tx_clk             (eth_tse_0_pcs_transmit_clock_connection_clk),          //  output,   width = 1, pcs_transmit_clock_connection.clk
		.rx_clk             (eth_tse_0_pcs_receive_clock_connection_clk),           //  output,   width = 1,  pcs_receive_clock_connection.clk
		.reset_tx_clk       (rst_controller_reset_out_reset),                       //   input,   width = 1, pcs_transmit_reset_connection.reset
		.reset_rx_clk       (rst_controller_001_reset_out_reset),                   //   input,   width = 1,  pcs_receive_reset_connection.reset
		.led_crs            (status_led_crs),                                       //  output,   width = 1,         status_led_connection.crs
		.led_link           (status_led_link),                                      //  output,   width = 1,                              .link
		.led_panel_link     (status_led_panel_link),                                //  output,   width = 1,                              .panel_link
		.led_col            (status_led_col),                                       //  output,   width = 1,                              .col
		.led_an             (status_led_an),                                        //  output,   width = 1,                              .an
		.led_char_err       (status_led_char_err),                                  //  output,   width = 1,                              .char_err
		.led_disp_err       (status_led_disp_err),                                  //  output,   width = 1,                              .disp_err
		.rx_recovclkout     (serdes_control_export),                                //  output,   width = 1,     serdes_control_connection.export
		.lvds_tx_pll_locked (lvds_tx_pll_locked_export),                            //  output,   width = 1,            lvds_tx_pll_locked.export
		.rxp                (serial_connection_rxp_0),                              //   input,   width = 1,             serial_connection.rxp_0
		.rxn                (serial_connection_rxn_0),                              //   input,   width = 1,                              .rxn_0
		.txp                (serial_connection_txp_0),                              //  output,   width = 1,                              .txp_0
		.txn                (serial_connection_txn_0)                               //  output,   width = 1,                              .txn_0
	);

	gmii_sgmii_adapter_0 gmii_sgmii_adapter_0 (
		.clk             (sgmii_csr_clk_out_clk_clk),                                     //   input,   width = 1,         peri_clock.clk
		.rst_n           (sgmii_rst_in_out_reset_reset),                                  //   input,   width = 1,         peri_reset.reset_n
		.addr            (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_address),   //   input,   width = 1,       avalon_slave.address
		.read            (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_read),      //   input,   width = 1,                   .read
		.write           (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_write),     //   input,   width = 1,                   .write
		.writedata       (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_writedata), //   input,  width = 32,                   .writedata
		.readdata        (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_readdata),  //  output,  width = 32,                   .readdata
		.mac_tx_clk_o    (emac_splitter_0_hps_gmii_phy_tx_clk_o),                         //   input,   width = 1,           hps_gmii.phy_tx_clk_o
		.mac_rst_tx_n    (emac_splitter_0_hps_gmii_rst_tx_n),                             //   input,   width = 1,                   .rst_tx_n
		.mac_rst_rx_n    (emac_splitter_0_hps_gmii_rst_rx_n),                             //   input,   width = 1,                   .rst_rx_n
		.mac_txd         (emac_splitter_0_hps_gmii_phy_txd_o),                            //   input,   width = 8,                   .phy_txd_o
		.mac_txen        (emac_splitter_0_hps_gmii_phy_txen_o),                           //   input,   width = 1,                   .phy_txen_o
		.mac_txer        (emac_splitter_0_hps_gmii_phy_txer_o),                           //   input,   width = 1,                   .phy_txer_o
		.mac_speed       (emac_splitter_0_hps_gmii_phy_mac_speed_o),                      //   input,   width = 2,                   .phy_mac_speed_o
		.mac_tx_clk_i    (gmii_sgmii_adapter_0_hps_gmii_phy_tx_clk_i),                    //  output,   width = 1,                   .phy_tx_clk_i
		.mac_rx_clk      (gmii_sgmii_adapter_0_hps_gmii_phy_rx_clk_i),                    //  output,   width = 1,                   .phy_rx_clk_i
		.mac_rxdv        (gmii_sgmii_adapter_0_hps_gmii_phy_rxdv_i),                      //  output,   width = 1,                   .phy_rxdv_i
		.mac_rxer        (gmii_sgmii_adapter_0_hps_gmii_phy_rxer_i),                      //  output,   width = 1,                   .phy_rxer_i
		.mac_rxd         (gmii_sgmii_adapter_0_hps_gmii_phy_rxd_i),                       //  output,   width = 8,                   .phy_rxd_i
		.mac_col         (gmii_sgmii_adapter_0_hps_gmii_phy_col_i),                       //  output,   width = 1,                   .phy_col_i
		.mac_crs         (gmii_sgmii_adapter_0_hps_gmii_phy_crs_i),                       //  output,   width = 1,                   .phy_crs_i
		.pcs_rst_tx      (gmii_sgmii_adapter_0_pcs_transmit_reset_reset),                 //  output,   width = 1, pcs_transmit_reset.reset
		.pcs_rst_rx      (gmii_sgmii_adapter_0_pcs_receive_reset_reset),                  //  output,   width = 1,  pcs_receive_reset.reset
		.pcs_tx_clk      (eth_tse_0_pcs_transmit_clock_connection_clk),                   //   input,   width = 1, pcs_transmit_clock.clk
		.pcs_rx_clk      (eth_tse_0_pcs_receive_clock_connection_clk),                    //   input,   width = 1,  pcs_receive_clock.clk
		.pcs_txclk_ena   (eth_tse_0_clock_enable_connection_tx_clkena),                   //   input,   width = 1,   pcs_clock_enable.tx_clkena
		.pcs_rxclk_ena   (eth_tse_0_clock_enable_connection_rx_clkena),                   //   input,   width = 1,                   .rx_clkena
		.pcs_gmii_rx_dv  (eth_tse_0_gmii_connection_gmii_rx_dv),                          //   input,   width = 1,           pcs_gmii.gmii_rx_dv
		.pcs_gmii_rx_d   (eth_tse_0_gmii_connection_gmii_rx_d),                           //   input,   width = 8,                   .gmii_rx_d
		.pcs_gmii_rx_err (eth_tse_0_gmii_connection_gmii_rx_err),                         //   input,   width = 1,                   .gmii_rx_err
		.pcs_gmii_tx_en  (gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_en),                      //  output,   width = 1,                   .gmii_tx_en
		.pcs_gmii_tx_d   (gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_d),                       //  output,   width = 8,                   .gmii_tx_d
		.pcs_gmii_tx_err (gmii_sgmii_adapter_0_pcs_gmii_gmii_tx_err),                     //  output,   width = 1,                   .gmii_tx_err
		.pcs_mii_rx_dv   (eth_tse_0_mii_connection_mii_rx_dv),                            //   input,   width = 1,            pcs_mii.mii_rx_dv
		.pcs_mii_rx_d    (eth_tse_0_mii_connection_mii_rx_d),                             //   input,   width = 4,                   .mii_rx_d
		.pcs_mii_rx_err  (eth_tse_0_mii_connection_mii_rx_err),                           //   input,   width = 1,                   .mii_rx_err
		.pcs_mii_col     (eth_tse_0_mii_connection_mii_col),                              //   input,   width = 1,                   .mii_col
		.pcs_mii_crs     (eth_tse_0_mii_connection_mii_crs),                              //   input,   width = 1,                   .mii_crs
		.pcs_mii_tx_en   (gmii_sgmii_adapter_0_pcs_mii_mii_tx_en),                        //  output,   width = 1,                   .mii_tx_en
		.pcs_mii_tx_d    (gmii_sgmii_adapter_0_pcs_mii_mii_tx_d),                         //  output,   width = 4,                   .mii_tx_d
		.pcs_mii_tx_err  (gmii_sgmii_adapter_0_pcs_mii_mii_tx_err)                        //  output,   width = 1,                   .mii_tx_err
	);

	sgmii_clk_125 sgmii_clk_125 (
		.in_clk  (clk_125_clk),               //   input,  width = 1,  in_clk.clk
		.out_clk (sgmii_clk_125_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	sgmii_csr sgmii_csr (
		.clk              (sgmii_csr_clk_out_clk_clk),     //   input,   width = 1,   clk.clk
		.reset            (~sgmii_rst_in_out_reset_reset), //   input,   width = 1, reset.reset
		.s0_waitrequest   (csr_waitrequest),               //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (csr_readdata),                  //  output,  width = 32,      .readdata
		.s0_readdatavalid (csr_readdatavalid),             //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (csr_burstcount),                //   input,   width = 1,      .burstcount
		.s0_writedata     (csr_writedata),                 //   input,  width = 32,      .writedata
		.s0_address       (csr_address),                   //   input,   width = 7,      .address
		.s0_write         (csr_write),                     //   input,   width = 1,      .write
		.s0_read          (csr_read),                      //   input,   width = 1,      .read
		.s0_byteenable    (csr_byteenable),                //   input,   width = 4,      .byteenable
		.s0_debugaccess   (csr_debugaccess),               //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (sgmii_csr_m0_waitrequest),      //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (sgmii_csr_m0_readdata),         //   input,  width = 32,      .readdata
		.m0_readdatavalid (sgmii_csr_m0_readdatavalid),    //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (sgmii_csr_m0_burstcount),       //  output,   width = 1,      .burstcount
		.m0_writedata     (sgmii_csr_m0_writedata),        //  output,  width = 32,      .writedata
		.m0_address       (sgmii_csr_m0_address),          //  output,   width = 7,      .address
		.m0_write         (sgmii_csr_m0_write),            //  output,   width = 1,      .write
		.m0_read          (sgmii_csr_m0_read),             //  output,   width = 1,      .read
		.m0_byteenable    (sgmii_csr_m0_byteenable),       //  output,   width = 4,      .byteenable
		.m0_debugaccess   (sgmii_csr_m0_debugaccess)       //  output,   width = 1,      .debugaccess
	);

	sgmii_csr_clk sgmii_csr_clk (
		.in_clk  (csr_clk_clk),               //   input,  width = 1,  in_clk.clk
		.out_clk (sgmii_csr_clk_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	sgmii_debug_status_pio sgmii_debug_status_pio (
		.clk        (sgmii_csr_clk_out_clk_clk),                              //   input,   width = 1,                 clk.clk
		.reset_n    (sgmii_rst_in_out_reset_reset),                           //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_sgmii_debug_status_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_sgmii_debug_status_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_sgmii_debug_status_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_sgmii_debug_status_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_sgmii_debug_status_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (sgmii_debug_status_pio_export)                           //   input,  width = 13, external_connection.export
	);

	sgmii_rst_in sgmii_rst_in (
		.clk         (sgmii_csr_clk_out_clk_clk),    //   input,  width = 1,       clk.clk
		.in_reset_n  (rst_in_reset_n),               //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (sgmii_rst_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	subsys_sgmii_altera_mm_interconnect_1920_xwlfuty mm_interconnect_0 (
		.sgmii_csr_m0_address                                      (sgmii_csr_m0_address),                                          //   input,   width = 7,                                        sgmii_csr_m0.address
		.sgmii_csr_m0_waitrequest                                  (sgmii_csr_m0_waitrequest),                                      //  output,   width = 1,                                                    .waitrequest
		.sgmii_csr_m0_burstcount                                   (sgmii_csr_m0_burstcount),                                       //   input,   width = 1,                                                    .burstcount
		.sgmii_csr_m0_byteenable                                   (sgmii_csr_m0_byteenable),                                       //   input,   width = 4,                                                    .byteenable
		.sgmii_csr_m0_read                                         (sgmii_csr_m0_read),                                             //   input,   width = 1,                                                    .read
		.sgmii_csr_m0_readdata                                     (sgmii_csr_m0_readdata),                                         //  output,  width = 32,                                                    .readdata
		.sgmii_csr_m0_readdatavalid                                (sgmii_csr_m0_readdatavalid),                                    //  output,   width = 1,                                                    .readdatavalid
		.sgmii_csr_m0_write                                        (sgmii_csr_m0_write),                                            //   input,   width = 1,                                                    .write
		.sgmii_csr_m0_writedata                                    (sgmii_csr_m0_writedata),                                        //   input,  width = 32,                                                    .writedata
		.sgmii_csr_m0_debugaccess                                  (sgmii_csr_m0_debugaccess),                                      //   input,   width = 1,                                                    .debugaccess
		.gmii_sgmii_adapter_0_avalon_slave_address                 (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_address),   //  output,   width = 1,                   gmii_sgmii_adapter_0_avalon_slave.address
		.gmii_sgmii_adapter_0_avalon_slave_write                   (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_write),     //  output,   width = 1,                                                    .write
		.gmii_sgmii_adapter_0_avalon_slave_read                    (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_read),      //  output,   width = 1,                                                    .read
		.gmii_sgmii_adapter_0_avalon_slave_readdata                (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_readdata),  //   input,  width = 32,                                                    .readdata
		.gmii_sgmii_adapter_0_avalon_slave_writedata               (mm_interconnect_0_gmii_sgmii_adapter_0_avalon_slave_writedata), //  output,  width = 32,                                                    .writedata
		.eth_tse_0_control_port_address                            (mm_interconnect_0_eth_tse_0_control_port_address),              //  output,   width = 5,                              eth_tse_0_control_port.address
		.eth_tse_0_control_port_write                              (mm_interconnect_0_eth_tse_0_control_port_write),                //  output,   width = 1,                                                    .write
		.eth_tse_0_control_port_read                               (mm_interconnect_0_eth_tse_0_control_port_read),                 //  output,   width = 1,                                                    .read
		.eth_tse_0_control_port_readdata                           (mm_interconnect_0_eth_tse_0_control_port_readdata),             //   input,  width = 16,                                                    .readdata
		.eth_tse_0_control_port_writedata                          (mm_interconnect_0_eth_tse_0_control_port_writedata),            //  output,  width = 16,                                                    .writedata
		.eth_tse_0_control_port_waitrequest                        (mm_interconnect_0_eth_tse_0_control_port_waitrequest),          //   input,   width = 1,                                                    .waitrequest
		.sgmii_debug_status_pio_s1_address                         (mm_interconnect_0_sgmii_debug_status_pio_s1_address),           //  output,   width = 2,                           sgmii_debug_status_pio_s1.address
		.sgmii_debug_status_pio_s1_write                           (mm_interconnect_0_sgmii_debug_status_pio_s1_write),             //  output,   width = 1,                                                    .write
		.sgmii_debug_status_pio_s1_readdata                        (mm_interconnect_0_sgmii_debug_status_pio_s1_readdata),          //   input,  width = 32,                                                    .readdata
		.sgmii_debug_status_pio_s1_writedata                       (mm_interconnect_0_sgmii_debug_status_pio_s1_writedata),         //  output,  width = 32,                                                    .writedata
		.sgmii_debug_status_pio_s1_chipselect                      (mm_interconnect_0_sgmii_debug_status_pio_s1_chipselect),        //  output,   width = 1,                                                    .chipselect
		.sgmii_csr_reset_reset_bridge_in_reset_reset               (~sgmii_rst_in_out_reset_reset),                                 //   input,   width = 1,               sgmii_csr_reset_reset_bridge_in_reset.reset
		.sgmii_csr_m0_translator_reset_reset_bridge_in_reset_reset (~sgmii_rst_in_out_reset_reset),                                 //   input,   width = 1, sgmii_csr_m0_translator_reset_reset_bridge_in_reset.reset
		.sgmii_csr_clk_out_clk_clk                                 (sgmii_csr_clk_out_clk_clk)                                      //   input,   width = 1,                               sgmii_csr_clk_out_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (gmii_sgmii_adapter_0_pcs_transmit_reset_reset), //   input,  width = 1, reset_in0.reset
		.clk            (eth_tse_0_pcs_transmit_clock_connection_clk),   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),                //  output,  width = 1, reset_out.reset
		.reset_req      (),                                              // (terminated),                       
		.reset_req_in0  (1'b0),                                          // (terminated),                       
		.reset_in1      (1'b0),                                          // (terminated),                       
		.reset_req_in1  (1'b0),                                          // (terminated),                       
		.reset_in2      (1'b0),                                          // (terminated),                       
		.reset_req_in2  (1'b0),                                          // (terminated),                       
		.reset_in3      (1'b0),                                          // (terminated),                       
		.reset_req_in3  (1'b0),                                          // (terminated),                       
		.reset_in4      (1'b0),                                          // (terminated),                       
		.reset_req_in4  (1'b0),                                          // (terminated),                       
		.reset_in5      (1'b0),                                          // (terminated),                       
		.reset_req_in5  (1'b0),                                          // (terminated),                       
		.reset_in6      (1'b0),                                          // (terminated),                       
		.reset_req_in6  (1'b0),                                          // (terminated),                       
		.reset_in7      (1'b0),                                          // (terminated),                       
		.reset_req_in7  (1'b0),                                          // (terminated),                       
		.reset_in8      (1'b0),                                          // (terminated),                       
		.reset_req_in8  (1'b0),                                          // (terminated),                       
		.reset_in9      (1'b0),                                          // (terminated),                       
		.reset_req_in9  (1'b0),                                          // (terminated),                       
		.reset_in10     (1'b0),                                          // (terminated),                       
		.reset_req_in10 (1'b0),                                          // (terminated),                       
		.reset_in11     (1'b0),                                          // (terminated),                       
		.reset_req_in11 (1'b0),                                          // (terminated),                       
		.reset_in12     (1'b0),                                          // (terminated),                       
		.reset_req_in12 (1'b0),                                          // (terminated),                       
		.reset_in13     (1'b0),                                          // (terminated),                       
		.reset_req_in13 (1'b0),                                          // (terminated),                       
		.reset_in14     (1'b0),                                          // (terminated),                       
		.reset_req_in14 (1'b0),                                          // (terminated),                       
		.reset_in15     (1'b0),                                          // (terminated),                       
		.reset_req_in15 (1'b0)                                           // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (gmii_sgmii_adapter_0_pcs_receive_reset_reset), //   input,  width = 1, reset_in0.reset
		.clk            (eth_tse_0_pcs_receive_clock_connection_clk),   //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),           //  output,  width = 1, reset_out.reset
		.reset_req      (),                                             // (terminated),                       
		.reset_req_in0  (1'b0),                                         // (terminated),                       
		.reset_in1      (1'b0),                                         // (terminated),                       
		.reset_req_in1  (1'b0),                                         // (terminated),                       
		.reset_in2      (1'b0),                                         // (terminated),                       
		.reset_req_in2  (1'b0),                                         // (terminated),                       
		.reset_in3      (1'b0),                                         // (terminated),                       
		.reset_req_in3  (1'b0),                                         // (terminated),                       
		.reset_in4      (1'b0),                                         // (terminated),                       
		.reset_req_in4  (1'b0),                                         // (terminated),                       
		.reset_in5      (1'b0),                                         // (terminated),                       
		.reset_req_in5  (1'b0),                                         // (terminated),                       
		.reset_in6      (1'b0),                                         // (terminated),                       
		.reset_req_in6  (1'b0),                                         // (terminated),                       
		.reset_in7      (1'b0),                                         // (terminated),                       
		.reset_req_in7  (1'b0),                                         // (terminated),                       
		.reset_in8      (1'b0),                                         // (terminated),                       
		.reset_req_in8  (1'b0),                                         // (terminated),                       
		.reset_in9      (1'b0),                                         // (terminated),                       
		.reset_req_in9  (1'b0),                                         // (terminated),                       
		.reset_in10     (1'b0),                                         // (terminated),                       
		.reset_req_in10 (1'b0),                                         // (terminated),                       
		.reset_in11     (1'b0),                                         // (terminated),                       
		.reset_req_in11 (1'b0),                                         // (terminated),                       
		.reset_in12     (1'b0),                                         // (terminated),                       
		.reset_req_in12 (1'b0),                                         // (terminated),                       
		.reset_in13     (1'b0),                                         // (terminated),                       
		.reset_req_in13 (1'b0),                                         // (terminated),                       
		.reset_in14     (1'b0),                                         // (terminated),                       
		.reset_req_in14 (1'b0),                                         // (terminated),                       
		.reset_in15     (1'b0),                                         // (terminated),                       
		.reset_req_in15 (1'b0)                                          // (terminated),                       
	);

endmodule
